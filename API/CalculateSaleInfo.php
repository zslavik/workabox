<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CalculateSaleInfo
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'Sale',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\RetailSale',
        ),
        2 => array(
            'var' => 'MIBarCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        3 => array(
            'var' => 'Messages',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'SaveSale',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var \Workabox\API\RetailSale
     */
    public $Sale = null;
    /**
     * @var string[]
     */
    public $MIBarCodes = null;
    /**
     * @var string[]
     */
    public $Messages = null;
    /**
     * @var bool
     */
    public $SaveSale = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['Sale'])) {
                $this->Sale = $vals['Sale'];
            }
            if (isset($vals['MIBarCodes'])) {
                $this->MIBarCodes = $vals['MIBarCodes'];
            }
            if (isset($vals['Messages'])) {
                $this->Messages = $vals['Messages'];
            }
            if (isset($vals['SaveSale'])) {
                $this->SaveSale = $vals['SaveSale'];
            }
        }
    }

    public function getName()
    {
        return 'CalculateSaleInfo';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->Sale = new \Workabox\API\RetailSale();
                        $xfer += $this->Sale->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::LST) {
                        $this->MIBarCodes = array();
                        $_size1036 = 0;
                        $_etype1039 = 0;
                        $xfer += $input->readListBegin($_etype1039, $_size1036);
                        for ($_i1040 = 0; $_i1040 < $_size1036; ++$_i1040) {
                            $elem1041 = null;
                            $xfer += $input->readString($elem1041);
                            $this->MIBarCodes []= $elem1041;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->Messages = array();
                        $_size1042 = 0;
                        $_etype1045 = 0;
                        $xfer += $input->readListBegin($_etype1045, $_size1042);
                        for ($_i1046 = 0; $_i1046 < $_size1042; ++$_i1046) {
                            $elem1047 = null;
                            $xfer += $input->readString($elem1047);
                            $this->Messages []= $elem1047;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->SaveSale);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CalculateSaleInfo');
        if ($this->Sale !== null) {
            if (!is_object($this->Sale)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Sale', TType::STRUCT, 1);
            $xfer += $this->Sale->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MIBarCodes !== null) {
            if (!is_array($this->MIBarCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('MIBarCodes', TType::LST, 2);
            $output->writeListBegin(TType::STRING, count($this->MIBarCodes));
            foreach ($this->MIBarCodes as $iter1048) {
                $xfer += $output->writeString($iter1048);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Messages !== null) {
            if (!is_array($this->Messages)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Messages', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->Messages));
            foreach ($this->Messages as $iter1049) {
                $xfer += $output->writeString($iter1049);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SaveSale !== null) {
            $xfer += $output->writeFieldBegin('SaveSale', TType::BOOL, 4);
            $xfer += $output->writeBool($this->SaveSale);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

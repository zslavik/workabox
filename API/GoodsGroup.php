<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GoodsGroup
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'ObjectName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'ParentGroupID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'Properties',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\GoodsProperty',
                ),
        ),
        5 => array(
            'var' => 'ImageURL',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'OuterCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\OuterCodesLine',
                ),
        ),
        7 => array(
            'var' => 'UniteModel',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
                'type' => TType::I32,
                ),
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $ObjectName = null;
    /**
     * @var int
     */
    public $ParentGroupID = null;
    /**
     * @var \Workabox\API\GoodsProperty[]
     */
    public $Properties = null;
    /**
     * @var string
     */
    public $ImageURL = null;
    /**
     * @var \Workabox\API\OuterCodesLine[]
     */
    public $OuterCodes = null;
    /**
     * @var int[]
     */
    public $UniteModel = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['ObjectName'])) {
                $this->ObjectName = $vals['ObjectName'];
            }
            if (isset($vals['ParentGroupID'])) {
                $this->ParentGroupID = $vals['ParentGroupID'];
            }
            if (isset($vals['Properties'])) {
                $this->Properties = $vals['Properties'];
            }
            if (isset($vals['ImageURL'])) {
                $this->ImageURL = $vals['ImageURL'];
            }
            if (isset($vals['OuterCodes'])) {
                $this->OuterCodes = $vals['OuterCodes'];
            }
            if (isset($vals['UniteModel'])) {
                $this->UniteModel = $vals['UniteModel'];
            }
        }
    }

    public function getName()
    {
        return 'GoodsGroup';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ObjectName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ParentGroupID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->Properties = array();
                        $_size1015 = 0;
                        $_etype1018 = 0;
                        $xfer += $input->readListBegin($_etype1018, $_size1015);
                        for ($_i1019 = 0; $_i1019 < $_size1015; ++$_i1019) {
                            $elem1020 = null;
                            $elem1020 = new \Workabox\API\GoodsProperty();
                            $xfer += $elem1020->read($input);
                            $this->Properties []= $elem1020;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ImageURL);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->OuterCodes = array();
                        $_size1021 = 0;
                        $_etype1024 = 0;
                        $xfer += $input->readListBegin($_etype1024, $_size1021);
                        for ($_i1025 = 0; $_i1025 < $_size1021; ++$_i1025) {
                            $elem1026 = null;
                            $elem1026 = new \Workabox\API\OuterCodesLine();
                            $xfer += $elem1026->read($input);
                            $this->OuterCodes []= $elem1026;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->UniteModel = array();
                        $_size1027 = 0;
                        $_etype1030 = 0;
                        $xfer += $input->readListBegin($_etype1030, $_size1027);
                        for ($_i1031 = 0; $_i1031 < $_size1027; ++$_i1031) {
                            $elem1032 = null;
                            $xfer += $input->readI32($elem1032);
                            $this->UniteModel []= $elem1032;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GoodsGroup');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectName !== null) {
            $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 2);
            $xfer += $output->writeString($this->ObjectName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ParentGroupID !== null) {
            $xfer += $output->writeFieldBegin('ParentGroupID', TType::I32, 3);
            $xfer += $output->writeI32($this->ParentGroupID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Properties !== null) {
            if (!is_array($this->Properties)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Properties', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->Properties));
            foreach ($this->Properties as $iter1033) {
                $xfer += $iter1033->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ImageURL !== null) {
            $xfer += $output->writeFieldBegin('ImageURL', TType::STRING, 5);
            $xfer += $output->writeString($this->ImageURL);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterCodes !== null) {
            if (!is_array($this->OuterCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 6);
            $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
            foreach ($this->OuterCodes as $iter1034) {
                $xfer += $iter1034->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UniteModel !== null) {
            if (!is_array($this->UniteModel)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UniteModel', TType::LST, 7);
            $output->writeListBegin(TType::I32, count($this->UniteModel));
            foreach ($this->UniteModel as $iter1035) {
                $xfer += $output->writeI32($iter1035);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

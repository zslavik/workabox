<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Office
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'OuterID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'ObjectName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'CodeOKPO',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'RegistrationCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'IsFranchising',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'AllowOfflineLogin',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'HierarchyBranch',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'ObjectOwner',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        10 => array(
            'var' => 'OuterCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\OuterCodesLine',
                ),
        ),
        11 => array(
            'var' => 'Settlement',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'PostAddress',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'Phone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'StateMain',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'EmployeeOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        16 => array(
            'var' => 'StoreOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        17 => array(
            'var' => 'SubOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        18 => array(
            'var' => 'CashDeskOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        19 => array(
            'var' => 'AccountOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        20 => array(
            'var' => 'SubOfficeMaster',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $OuterID = null;
    /**
     * @var string
     */
    public $ObjectName = null;
    /**
     * @var string
     */
    public $CodeOKPO = null;
    /**
     * @var string
     */
    public $RegistrationCode = null;
    /**
     * @var bool
     */
    public $IsFranchising = null;
    /**
     * @var bool
     */
    public $AllowOfflineLogin = null;
    /**
     * @var string
     */
    public $HierarchyBranch = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $ObjectOwner = null;
    /**
     * @var \Workabox\API\OuterCodesLine[]
     */
    public $OuterCodes = null;
    /**
     * @var string
     */
    public $Settlement = null;
    /**
     * @var string
     */
    public $PostAddress = null;
    /**
     * @var string
     */
    public $Phone = null;
    /**
     * @var string
     */
    public $StateMain = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $EmployeeOfficeSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $StoreOfficeSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $SubOfficeSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $CashDeskOfficeSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $AccountOfficeSlave = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $SubOfficeMaster = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['OuterID'])) {
                $this->OuterID = $vals['OuterID'];
            }
            if (isset($vals['ObjectName'])) {
                $this->ObjectName = $vals['ObjectName'];
            }
            if (isset($vals['CodeOKPO'])) {
                $this->CodeOKPO = $vals['CodeOKPO'];
            }
            if (isset($vals['RegistrationCode'])) {
                $this->RegistrationCode = $vals['RegistrationCode'];
            }
            if (isset($vals['IsFranchising'])) {
                $this->IsFranchising = $vals['IsFranchising'];
            }
            if (isset($vals['AllowOfflineLogin'])) {
                $this->AllowOfflineLogin = $vals['AllowOfflineLogin'];
            }
            if (isset($vals['HierarchyBranch'])) {
                $this->HierarchyBranch = $vals['HierarchyBranch'];
            }
            if (isset($vals['ObjectOwner'])) {
                $this->ObjectOwner = $vals['ObjectOwner'];
            }
            if (isset($vals['OuterCodes'])) {
                $this->OuterCodes = $vals['OuterCodes'];
            }
            if (isset($vals['Settlement'])) {
                $this->Settlement = $vals['Settlement'];
            }
            if (isset($vals['PostAddress'])) {
                $this->PostAddress = $vals['PostAddress'];
            }
            if (isset($vals['Phone'])) {
                $this->Phone = $vals['Phone'];
            }
            if (isset($vals['StateMain'])) {
                $this->StateMain = $vals['StateMain'];
            }
            if (isset($vals['EmployeeOfficeSlave'])) {
                $this->EmployeeOfficeSlave = $vals['EmployeeOfficeSlave'];
            }
            if (isset($vals['StoreOfficeSlave'])) {
                $this->StoreOfficeSlave = $vals['StoreOfficeSlave'];
            }
            if (isset($vals['SubOfficeSlave'])) {
                $this->SubOfficeSlave = $vals['SubOfficeSlave'];
            }
            if (isset($vals['CashDeskOfficeSlave'])) {
                $this->CashDeskOfficeSlave = $vals['CashDeskOfficeSlave'];
            }
            if (isset($vals['AccountOfficeSlave'])) {
                $this->AccountOfficeSlave = $vals['AccountOfficeSlave'];
            }
            if (isset($vals['SubOfficeMaster'])) {
                $this->SubOfficeMaster = $vals['SubOfficeMaster'];
            }
        }
    }

    public function getName()
    {
        return 'Office';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->OuterID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ObjectName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->CodeOKPO);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->RegistrationCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->IsFranchising);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->AllowOfflineLogin);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->HierarchyBranch);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRUCT) {
                        $this->ObjectOwner = new \Workabox\API\ObjectID();
                        $xfer += $this->ObjectOwner->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::LST) {
                        $this->OuterCodes = array();
                        $_size315 = 0;
                        $_etype318 = 0;
                        $xfer += $input->readListBegin($_etype318, $_size315);
                        for ($_i319 = 0; $_i319 < $_size315; ++$_i319) {
                            $elem320 = null;
                            $elem320 = new \Workabox\API\OuterCodesLine();
                            $xfer += $elem320->read($input);
                            $this->OuterCodes []= $elem320;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Settlement);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->PostAddress);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Phone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->StateMain);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::LST) {
                        $this->EmployeeOfficeSlave = array();
                        $_size321 = 0;
                        $_etype324 = 0;
                        $xfer += $input->readListBegin($_etype324, $_size321);
                        for ($_i325 = 0; $_i325 < $_size321; ++$_i325) {
                            $elem326 = null;
                            $elem326 = new \Workabox\API\ObjectID();
                            $xfer += $elem326->read($input);
                            $this->EmployeeOfficeSlave []= $elem326;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::LST) {
                        $this->StoreOfficeSlave = array();
                        $_size327 = 0;
                        $_etype330 = 0;
                        $xfer += $input->readListBegin($_etype330, $_size327);
                        for ($_i331 = 0; $_i331 < $_size327; ++$_i331) {
                            $elem332 = null;
                            $elem332 = new \Workabox\API\ObjectID();
                            $xfer += $elem332->read($input);
                            $this->StoreOfficeSlave []= $elem332;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::LST) {
                        $this->SubOfficeSlave = array();
                        $_size333 = 0;
                        $_etype336 = 0;
                        $xfer += $input->readListBegin($_etype336, $_size333);
                        for ($_i337 = 0; $_i337 < $_size333; ++$_i337) {
                            $elem338 = null;
                            $elem338 = new \Workabox\API\ObjectID();
                            $xfer += $elem338->read($input);
                            $this->SubOfficeSlave []= $elem338;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::LST) {
                        $this->CashDeskOfficeSlave = array();
                        $_size339 = 0;
                        $_etype342 = 0;
                        $xfer += $input->readListBegin($_etype342, $_size339);
                        for ($_i343 = 0; $_i343 < $_size339; ++$_i343) {
                            $elem344 = null;
                            $elem344 = new \Workabox\API\ObjectID();
                            $xfer += $elem344->read($input);
                            $this->CashDeskOfficeSlave []= $elem344;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::LST) {
                        $this->AccountOfficeSlave = array();
                        $_size345 = 0;
                        $_etype348 = 0;
                        $xfer += $input->readListBegin($_etype348, $_size345);
                        for ($_i349 = 0; $_i349 < $_size345; ++$_i349) {
                            $elem350 = null;
                            $elem350 = new \Workabox\API\ObjectID();
                            $xfer += $elem350->read($input);
                            $this->AccountOfficeSlave []= $elem350;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRUCT) {
                        $this->SubOfficeMaster = new \Workabox\API\ObjectID();
                        $xfer += $this->SubOfficeMaster->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Office');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterID !== null) {
            $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
            $xfer += $output->writeString($this->OuterID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectName !== null) {
            $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
            $xfer += $output->writeString($this->ObjectName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CodeOKPO !== null) {
            $xfer += $output->writeFieldBegin('CodeOKPO', TType::STRING, 4);
            $xfer += $output->writeString($this->CodeOKPO);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->RegistrationCode !== null) {
            $xfer += $output->writeFieldBegin('RegistrationCode', TType::STRING, 5);
            $xfer += $output->writeString($this->RegistrationCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->IsFranchising !== null) {
            $xfer += $output->writeFieldBegin('IsFranchising', TType::BOOL, 6);
            $xfer += $output->writeBool($this->IsFranchising);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->AllowOfflineLogin !== null) {
            $xfer += $output->writeFieldBegin('AllowOfflineLogin', TType::BOOL, 7);
            $xfer += $output->writeBool($this->AllowOfflineLogin);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->HierarchyBranch !== null) {
            $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 8);
            $xfer += $output->writeString($this->HierarchyBranch);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectOwner !== null) {
            if (!is_object($this->ObjectOwner)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 9);
            $xfer += $this->ObjectOwner->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterCodes !== null) {
            if (!is_array($this->OuterCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 10);
            $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
            foreach ($this->OuterCodes as $iter351) {
                $xfer += $iter351->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Settlement !== null) {
            $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 11);
            $xfer += $output->writeString($this->Settlement);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PostAddress !== null) {
            $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 12);
            $xfer += $output->writeString($this->PostAddress);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Phone !== null) {
            $xfer += $output->writeFieldBegin('Phone', TType::STRING, 13);
            $xfer += $output->writeString($this->Phone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StateMain !== null) {
            $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 14);
            $xfer += $output->writeString($this->StateMain);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->EmployeeOfficeSlave !== null) {
            if (!is_array($this->EmployeeOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('EmployeeOfficeSlave', TType::LST, 15);
            $output->writeListBegin(TType::STRUCT, count($this->EmployeeOfficeSlave));
            foreach ($this->EmployeeOfficeSlave as $iter352) {
                $xfer += $iter352->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StoreOfficeSlave !== null) {
            if (!is_array($this->StoreOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('StoreOfficeSlave', TType::LST, 16);
            $output->writeListBegin(TType::STRUCT, count($this->StoreOfficeSlave));
            foreach ($this->StoreOfficeSlave as $iter353) {
                $xfer += $iter353->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SubOfficeSlave !== null) {
            if (!is_array($this->SubOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('SubOfficeSlave', TType::LST, 17);
            $output->writeListBegin(TType::STRUCT, count($this->SubOfficeSlave));
            foreach ($this->SubOfficeSlave as $iter354) {
                $xfer += $iter354->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CashDeskOfficeSlave !== null) {
            if (!is_array($this->CashDeskOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('CashDeskOfficeSlave', TType::LST, 18);
            $output->writeListBegin(TType::STRUCT, count($this->CashDeskOfficeSlave));
            foreach ($this->CashDeskOfficeSlave as $iter355) {
                $xfer += $iter355->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->AccountOfficeSlave !== null) {
            if (!is_array($this->AccountOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('AccountOfficeSlave', TType::LST, 19);
            $output->writeListBegin(TType::STRUCT, count($this->AccountOfficeSlave));
            foreach ($this->AccountOfficeSlave as $iter356) {
                $xfer += $iter356->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SubOfficeMaster !== null) {
            if (!is_object($this->SubOfficeMaster)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('SubOfficeMaster', TType::STRUCT, 20);
            $xfer += $this->SubOfficeMaster->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

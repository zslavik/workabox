<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class RetailSaleFilter
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'OuterID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'GUID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'CashDesk',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        5 => array(
            'var' => 'PayType',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        6 => array(
            'var' => 'Account',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        7 => array(
            'var' => 'MarketingDiscount',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'RTT',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        9 => array(
            'var' => 'Client',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        10 => array(
            'var' => 'SpecialDiscount',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'ManagerDiscount',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'ExtendedDiscount',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'Cashier',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        14 => array(
            'var' => 'PrePay',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'Additional',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        16 => array(
            'var' => 'DocumentSumm',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'DocNumber',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        18 => array(
            'var' => 'DocumentDate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        19 => array(
            'var' => 'StateDocuments',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $OuterID = null;
    /**
     * @var string
     */
    public $GUID = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $CashDesk = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $PayType = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $Account = null;
    /**
     * @var string
     */
    public $MarketingDiscount = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $RTT = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $Client = null;
    /**
     * @var string
     */
    public $SpecialDiscount = null;
    /**
     * @var string
     */
    public $ManagerDiscount = null;
    /**
     * @var string
     */
    public $ExtendedDiscount = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $Cashier = null;
    /**
     * @var string
     */
    public $PrePay = null;
    /**
     * @var string
     */
    public $Additional = null;
    /**
     * @var string
     */
    public $DocumentSumm = null;
    /**
     * @var string
     */
    public $DocNumber = null;
    /**
     * @var string
     */
    public $DocumentDate = null;
    /**
     * @var string[]
     */
    public $StateDocuments = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['OuterID'])) {
                $this->OuterID = $vals['OuterID'];
            }
            if (isset($vals['GUID'])) {
                $this->GUID = $vals['GUID'];
            }
            if (isset($vals['CashDesk'])) {
                $this->CashDesk = $vals['CashDesk'];
            }
            if (isset($vals['PayType'])) {
                $this->PayType = $vals['PayType'];
            }
            if (isset($vals['Account'])) {
                $this->Account = $vals['Account'];
            }
            if (isset($vals['MarketingDiscount'])) {
                $this->MarketingDiscount = $vals['MarketingDiscount'];
            }
            if (isset($vals['RTT'])) {
                $this->RTT = $vals['RTT'];
            }
            if (isset($vals['Client'])) {
                $this->Client = $vals['Client'];
            }
            if (isset($vals['SpecialDiscount'])) {
                $this->SpecialDiscount = $vals['SpecialDiscount'];
            }
            if (isset($vals['ManagerDiscount'])) {
                $this->ManagerDiscount = $vals['ManagerDiscount'];
            }
            if (isset($vals['ExtendedDiscount'])) {
                $this->ExtendedDiscount = $vals['ExtendedDiscount'];
            }
            if (isset($vals['Cashier'])) {
                $this->Cashier = $vals['Cashier'];
            }
            if (isset($vals['PrePay'])) {
                $this->PrePay = $vals['PrePay'];
            }
            if (isset($vals['Additional'])) {
                $this->Additional = $vals['Additional'];
            }
            if (isset($vals['DocumentSumm'])) {
                $this->DocumentSumm = $vals['DocumentSumm'];
            }
            if (isset($vals['DocNumber'])) {
                $this->DocNumber = $vals['DocNumber'];
            }
            if (isset($vals['DocumentDate'])) {
                $this->DocumentDate = $vals['DocumentDate'];
            }
            if (isset($vals['StateDocuments'])) {
                $this->StateDocuments = $vals['StateDocuments'];
            }
        }
    }

    public function getName()
    {
        return 'RetailSaleFilter';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->OuterID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->GUID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->CashDesk = new \Workabox\API\ObjectID();
                        $xfer += $this->CashDesk->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->PayType = new \Workabox\API\ObjectID();
                        $xfer += $this->PayType->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->Account = new \Workabox\API\ObjectID();
                        $xfer += $this->Account->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->MarketingDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->RTT = new \Workabox\API\ObjectID();
                        $xfer += $this->RTT->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRUCT) {
                        $this->Client = new \Workabox\API\ObjectID();
                        $xfer += $this->Client->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->SpecialDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ManagerDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ExtendedDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRUCT) {
                        $this->Cashier = new \Workabox\API\ObjectID();
                        $xfer += $this->Cashier->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->PrePay);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Additional);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->DocumentSumm);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->DocNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->DocumentDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::LST) {
                        $this->StateDocuments = array();
                        $_size749 = 0;
                        $_etype752 = 0;
                        $xfer += $input->readListBegin($_etype752, $_size749);
                        for ($_i753 = 0; $_i753 < $_size749; ++$_i753) {
                            $elem754 = null;
                            $xfer += $input->readString($elem754);
                            $this->StateDocuments []= $elem754;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('RetailSaleFilter');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterID !== null) {
            $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
            $xfer += $output->writeString($this->OuterID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GUID !== null) {
            $xfer += $output->writeFieldBegin('GUID', TType::STRING, 3);
            $xfer += $output->writeString($this->GUID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CashDesk !== null) {
            if (!is_object($this->CashDesk)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('CashDesk', TType::STRUCT, 4);
            $xfer += $this->CashDesk->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PayType !== null) {
            if (!is_object($this->PayType)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('PayType', TType::STRUCT, 5);
            $xfer += $this->PayType->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Account !== null) {
            if (!is_object($this->Account)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Account', TType::STRUCT, 6);
            $xfer += $this->Account->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MarketingDiscount !== null) {
            $xfer += $output->writeFieldBegin('MarketingDiscount', TType::STRING, 7);
            $xfer += $output->writeString($this->MarketingDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->RTT !== null) {
            if (!is_object($this->RTT)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('RTT', TType::STRUCT, 8);
            $xfer += $this->RTT->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Client !== null) {
            if (!is_object($this->Client)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Client', TType::STRUCT, 9);
            $xfer += $this->Client->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SpecialDiscount !== null) {
            $xfer += $output->writeFieldBegin('SpecialDiscount', TType::STRING, 10);
            $xfer += $output->writeString($this->SpecialDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ManagerDiscount !== null) {
            $xfer += $output->writeFieldBegin('ManagerDiscount', TType::STRING, 11);
            $xfer += $output->writeString($this->ManagerDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ExtendedDiscount !== null) {
            $xfer += $output->writeFieldBegin('ExtendedDiscount', TType::STRING, 12);
            $xfer += $output->writeString($this->ExtendedDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Cashier !== null) {
            if (!is_object($this->Cashier)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Cashier', TType::STRUCT, 13);
            $xfer += $this->Cashier->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PrePay !== null) {
            $xfer += $output->writeFieldBegin('PrePay', TType::STRING, 14);
            $xfer += $output->writeString($this->PrePay);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Additional !== null) {
            $xfer += $output->writeFieldBegin('Additional', TType::STRING, 15);
            $xfer += $output->writeString($this->Additional);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->DocumentSumm !== null) {
            $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 16);
            $xfer += $output->writeString($this->DocumentSumm);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->DocNumber !== null) {
            $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 17);
            $xfer += $output->writeString($this->DocNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->DocumentDate !== null) {
            $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 18);
            $xfer += $output->writeString($this->DocumentDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StateDocuments !== null) {
            if (!is_array($this->StateDocuments)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('StateDocuments', TType::LST, 19);
            $output->writeListBegin(TType::STRING, count($this->StateDocuments));
            foreach ($this->StateDocuments as $iter755) {
                $xfer += $output->writeString($iter755);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

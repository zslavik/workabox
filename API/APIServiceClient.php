<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class APIServiceClient implements \Workabox\API\APIServiceIf
{
    protected $input_ = null;
    protected $output_ = null;

    protected $seqid_ = 0;

    public function __construct($input, $output = null)
    {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }


    public function Login($login, $password)
    {
        $this->send_Login($login, $password);
        return $this->recv_Login();
    }

    public function send_Login($login, $password)
    {
        $args = new \Workabox\API\APIService_Login_args();
        $args->login = $login;
        $args->password = $password;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'Login',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('Login', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_Login()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_Login_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_Login_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("Login failed: unknown result");
    }

    public function ExportGoodsGroup($apiKey, $date, \Workabox\API\GoodsGroupFilter $filter)
    {
        $this->send_ExportGoodsGroup($apiKey, $date, $filter);
        return $this->recv_ExportGoodsGroup();
    }

    public function send_ExportGoodsGroup($apiKey, $date, \Workabox\API\GoodsGroupFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportGoodsGroup_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportGoodsGroup',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportGoodsGroup', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportGoodsGroup()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportGoodsGroup_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportGoodsGroup_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportGoodsGroup failed: unknown result");
    }

    public function ImportHeadOffice($apiKey, \Workabox\API\HeadOffice $importdata)
    {
        $this->send_ImportHeadOffice($apiKey, $importdata);
        $this->recv_ImportHeadOffice();
    }

    public function send_ImportHeadOffice($apiKey, \Workabox\API\HeadOffice $importdata)
    {
        $args = new \Workabox\API\APIService_ImportHeadOffice_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportHeadOffice',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportHeadOffice', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportHeadOffice()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportHeadOffice_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportHeadOffice_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        return;
    }

    public function ExportHeadOffice($apiKey)
    {
        $this->send_ExportHeadOffice($apiKey);
        return $this->recv_ExportHeadOffice();
    }

    public function send_ExportHeadOffice($apiKey)
    {
        $args = new \Workabox\API\APIService_ExportHeadOffice_args();
        $args->apiKey = $apiKey;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportHeadOffice',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportHeadOffice', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportHeadOffice()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportHeadOffice_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportHeadOffice_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportHeadOffice failed: unknown result");
    }

    public function ExportChosenGoods($apiKey, \Workabox\API\ObjectID $rttID)
    {
        $this->send_ExportChosenGoods($apiKey, $rttID);
        return $this->recv_ExportChosenGoods();
    }

    public function send_ExportChosenGoods($apiKey, \Workabox\API\ObjectID $rttID)
    {
        $args = new \Workabox\API\APIService_ExportChosenGoods_args();
        $args->apiKey = $apiKey;
        $args->rttID = $rttID;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportChosenGoods',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportChosenGoods', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportChosenGoods()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportChosenGoods_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportChosenGoods_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportChosenGoods failed: unknown result");
    }

    public function ExportChosenGoodsPrice($apiKey, \Workabox\API\ObjectID $rttID)
    {
        $this->send_ExportChosenGoodsPrice($apiKey, $rttID);
        return $this->recv_ExportChosenGoodsPrice();
    }

    public function send_ExportChosenGoodsPrice($apiKey, \Workabox\API\ObjectID $rttID)
    {
        $args = new \Workabox\API\APIService_ExportChosenGoodsPrice_args();
        $args->apiKey = $apiKey;
        $args->rttID = $rttID;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportChosenGoodsPrice',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportChosenGoodsPrice', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportChosenGoodsPrice()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportChosenGoodsPrice_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportChosenGoodsPrice_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportChosenGoodsPrice failed: unknown result");
    }

    public function ImportChosenGoods($apiKey, \Workabox\API\ObjectID $rttID, array $goodsIDs)
    {
        $this->send_ImportChosenGoods($apiKey, $rttID, $goodsIDs);
        $this->recv_ImportChosenGoods();
    }

    public function send_ImportChosenGoods($apiKey, \Workabox\API\ObjectID $rttID, array $goodsIDs)
    {
        $args = new \Workabox\API\APIService_ImportChosenGoods_args();
        $args->apiKey = $apiKey;
        $args->rttID = $rttID;
        $args->goodsIDs = $goodsIDs;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportChosenGoods',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportChosenGoods', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportChosenGoods()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportChosenGoods_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportChosenGoods_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        return;
    }

    public function ExportPriceListRTT($apiKey, \Workabox\API\ObjectID $rttID)
    {
        $this->send_ExportPriceListRTT($apiKey, $rttID);
        return $this->recv_ExportPriceListRTT();
    }

    public function send_ExportPriceListRTT($apiKey, \Workabox\API\ObjectID $rttID)
    {
        $args = new \Workabox\API\APIService_ExportPriceListRTT_args();
        $args->apiKey = $apiKey;
        $args->rttID = $rttID;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportPriceListRTT',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportPriceListRTT', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportPriceListRTT()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportPriceListRTT_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportPriceListRTT_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportPriceListRTT failed: unknown result");
    }

    public function ExportGoodsQuantity($apiKey, \Workabox\API\ObjectID $storeID)
    {
        $this->send_ExportGoodsQuantity($apiKey, $storeID);
        return $this->recv_ExportGoodsQuantity();
    }

    public function send_ExportGoodsQuantity($apiKey, \Workabox\API\ObjectID $storeID)
    {
        $args = new \Workabox\API\APIService_ExportGoodsQuantity_args();
        $args->apiKey = $apiKey;
        $args->storeID = $storeID;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportGoodsQuantity',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportGoodsQuantity', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportGoodsQuantity()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportGoodsQuantity_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportGoodsQuantity_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportGoodsQuantity failed: unknown result");
    }

    public function CalculateSale($apiKey, \Workabox\API\CalculateSaleInfo $sale)
    {
        $this->send_CalculateSale($apiKey, $sale);
        return $this->recv_CalculateSale();
    }

    public function send_CalculateSale($apiKey, \Workabox\API\CalculateSaleInfo $sale)
    {
        $args = new \Workabox\API\APIService_CalculateSale_args();
        $args->apiKey = $apiKey;
        $args->sale = $sale;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'CalculateSale',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('CalculateSale', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_CalculateSale()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_CalculateSale_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_CalculateSale_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("CalculateSale failed: unknown result");
    }

    public function CalculateOrder($apiKey, \Workabox\API\CalculateOrderInfo $order)
    {
        $this->send_CalculateOrder($apiKey, $order);
        return $this->recv_CalculateOrder();
    }

    public function send_CalculateOrder($apiKey, \Workabox\API\CalculateOrderInfo $order)
    {
        $args = new \Workabox\API\APIService_CalculateOrder_args();
        $args->apiKey = $apiKey;
        $args->order = $order;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'CalculateOrder',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('CalculateOrder', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_CalculateOrder()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_CalculateOrder_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_CalculateOrder_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("CalculateOrder failed: unknown result");
    }

    public function CompleteSale($apiKey, $saleID)
    {
        $this->send_CompleteSale($apiKey, $saleID);
        $this->recv_CompleteSale();
    }

    public function send_CompleteSale($apiKey, $saleID)
    {
        $args = new \Workabox\API\APIService_CompleteSale_args();
        $args->apiKey = $apiKey;
        $args->saleID = $saleID;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'CompleteSale',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('CompleteSale', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_CompleteSale()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_CompleteSale_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_CompleteSale_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        return;
    }

    public function ImportUserCatalog($apiKey, \Workabox\API\UserCatalog $importdata)
    {
        $this->send_ImportUserCatalog($apiKey, $importdata);
        return $this->recv_ImportUserCatalog();
    }

    public function send_ImportUserCatalog($apiKey, \Workabox\API\UserCatalog $importdata)
    {
        $args = new \Workabox\API\APIService_ImportUserCatalog_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportUserCatalog',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportUserCatalog', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportUserCatalog()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportUserCatalog_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportUserCatalog_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportUserCatalog failed: unknown result");
    }

    public function ExportUserCatalog($apiKey, $date, \Workabox\API\UserCatalogFilter $filter)
    {
        $this->send_ExportUserCatalog($apiKey, $date, $filter);
        return $this->recv_ExportUserCatalog();
    }

    public function send_ExportUserCatalog($apiKey, $date, \Workabox\API\UserCatalogFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportUserCatalog_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportUserCatalog',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportUserCatalog', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportUserCatalog()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportUserCatalog_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportUserCatalog_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportUserCatalog failed: unknown result");
    }

    public function ImportGoods($apiKey, \Workabox\API\Goods $importdata)
    {
        $this->send_ImportGoods($apiKey, $importdata);
        return $this->recv_ImportGoods();
    }

    public function send_ImportGoods($apiKey, \Workabox\API\Goods $importdata)
    {
        $args = new \Workabox\API\APIService_ImportGoods_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportGoods',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportGoods', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportGoods()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportGoods_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportGoods_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportGoods failed: unknown result");
    }

    public function ExportGoods($apiKey, $date, \Workabox\API\GoodsFilter $filter)
    {
        $this->send_ExportGoods($apiKey, $date, $filter);
        return $this->recv_ExportGoods();
    }

    public function send_ExportGoods($apiKey, $date, \Workabox\API\GoodsFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportGoods_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportGoods',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportGoods', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportGoods()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportGoods_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportGoods_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportGoods failed: unknown result");
    }

    public function ImportService($apiKey, \Workabox\API\Service $importdata)
    {
        $this->send_ImportService($apiKey, $importdata);
        return $this->recv_ImportService();
    }

    public function send_ImportService($apiKey, \Workabox\API\Service $importdata)
    {
        $args = new \Workabox\API\APIService_ImportService_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportService',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportService', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportService()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportService_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportService_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportService failed: unknown result");
    }

    public function ExportService($apiKey, $date, \Workabox\API\ServiceFilter $filter)
    {
        $this->send_ExportService($apiKey, $date, $filter);
        return $this->recv_ExportService();
    }

    public function send_ExportService($apiKey, $date, \Workabox\API\ServiceFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportService_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportService',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportService', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportService()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportService_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportService_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportService failed: unknown result");
    }

    public function ImportMoneyFacilitiesType($apiKey, \Workabox\API\MoneyFacilitiesType $importdata)
    {
        $this->send_ImportMoneyFacilitiesType($apiKey, $importdata);
        return $this->recv_ImportMoneyFacilitiesType();
    }

    public function send_ImportMoneyFacilitiesType($apiKey, \Workabox\API\MoneyFacilitiesType $importdata)
    {
        $args = new \Workabox\API\APIService_ImportMoneyFacilitiesType_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportMoneyFacilitiesType',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportMoneyFacilitiesType', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportMoneyFacilitiesType()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportMoneyFacilitiesType_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportMoneyFacilitiesType_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportMoneyFacilitiesType failed: unknown result");
    }

    public function ExportMoneyFacilitiesType($apiKey, $date, \Workabox\API\MoneyFacilitiesTypeFilter $filter)
    {
        $this->send_ExportMoneyFacilitiesType($apiKey, $date, $filter);
        return $this->recv_ExportMoneyFacilitiesType();
    }

    public function send_ExportMoneyFacilitiesType($apiKey, $date, \Workabox\API\MoneyFacilitiesTypeFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportMoneyFacilitiesType_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportMoneyFacilitiesType',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportMoneyFacilitiesType', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportMoneyFacilitiesType()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportMoneyFacilitiesType_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportMoneyFacilitiesType_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportMoneyFacilitiesType failed: unknown result");
    }

    public function ImportPriceList($apiKey, \Workabox\API\PriceList $importdata)
    {
        $this->send_ImportPriceList($apiKey, $importdata);
        return $this->recv_ImportPriceList();
    }

    public function send_ImportPriceList($apiKey, \Workabox\API\PriceList $importdata)
    {
        $args = new \Workabox\API\APIService_ImportPriceList_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportPriceList',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportPriceList', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportPriceList()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportPriceList_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportPriceList_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportPriceList failed: unknown result");
    }

    public function ExportPriceList($apiKey, $date, \Workabox\API\PriceListFilter $filter)
    {
        $this->send_ExportPriceList($apiKey, $date, $filter);
        return $this->recv_ExportPriceList();
    }

    public function send_ExportPriceList($apiKey, $date, \Workabox\API\PriceListFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportPriceList_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportPriceList',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportPriceList', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportPriceList()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportPriceList_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportPriceList_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportPriceList failed: unknown result");
    }

    public function ImportSupplier($apiKey, \Workabox\API\Supplier $importdata)
    {
        $this->send_ImportSupplier($apiKey, $importdata);
        return $this->recv_ImportSupplier();
    }

    public function send_ImportSupplier($apiKey, \Workabox\API\Supplier $importdata)
    {
        $args = new \Workabox\API\APIService_ImportSupplier_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportSupplier',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportSupplier', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportSupplier()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportSupplier_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportSupplier_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportSupplier failed: unknown result");
    }

    public function ExportSupplier($apiKey, $date, \Workabox\API\SupplierFilter $filter)
    {
        $this->send_ExportSupplier($apiKey, $date, $filter);
        return $this->recv_ExportSupplier();
    }

    public function send_ExportSupplier($apiKey, $date, \Workabox\API\SupplierFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportSupplier_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportSupplier',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportSupplier', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportSupplier()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportSupplier_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportSupplier_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportSupplier failed: unknown result");
    }

    public function ImportOffice($apiKey, \Workabox\API\Office $importdata)
    {
        $this->send_ImportOffice($apiKey, $importdata);
        return $this->recv_ImportOffice();
    }

    public function send_ImportOffice($apiKey, \Workabox\API\Office $importdata)
    {
        $args = new \Workabox\API\APIService_ImportOffice_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportOffice',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportOffice', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportOffice()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportOffice_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportOffice_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportOffice failed: unknown result");
    }

    public function ExportOffice($apiKey, $date, \Workabox\API\OfficeFilter $filter)
    {
        $this->send_ExportOffice($apiKey, $date, $filter);
        return $this->recv_ExportOffice();
    }

    public function send_ExportOffice($apiKey, $date, \Workabox\API\OfficeFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportOffice_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportOffice',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportOffice', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportOffice()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportOffice_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportOffice_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportOffice failed: unknown result");
    }

    public function ImportStock($apiKey, \Workabox\API\Stock $importdata)
    {
        $this->send_ImportStock($apiKey, $importdata);
        return $this->recv_ImportStock();
    }

    public function send_ImportStock($apiKey, \Workabox\API\Stock $importdata)
    {
        $args = new \Workabox\API\APIService_ImportStock_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportStock',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportStock', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportStock()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportStock_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportStock_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportStock failed: unknown result");
    }

    public function ExportStock($apiKey, $date, \Workabox\API\StockFilter $filter)
    {
        $this->send_ExportStock($apiKey, $date, $filter);
        return $this->recv_ExportStock();
    }

    public function send_ExportStock($apiKey, $date, \Workabox\API\StockFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportStock_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportStock',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportStock', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportStock()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportStock_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportStock_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportStock failed: unknown result");
    }

    public function ImportRTT($apiKey, \Workabox\API\RTT $importdata)
    {
        $this->send_ImportRTT($apiKey, $importdata);
        return $this->recv_ImportRTT();
    }

    public function send_ImportRTT($apiKey, \Workabox\API\RTT $importdata)
    {
        $args = new \Workabox\API\APIService_ImportRTT_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportRTT',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportRTT', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportRTT()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportRTT_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportRTT_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportRTT failed: unknown result");
    }

    public function ExportRTT($apiKey, $date, \Workabox\API\RTTFilter $filter)
    {
        $this->send_ExportRTT($apiKey, $date, $filter);
        return $this->recv_ExportRTT();
    }

    public function send_ExportRTT($apiKey, $date, \Workabox\API\RTTFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportRTT_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportRTT',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportRTT', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportRTT()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportRTT_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportRTT_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportRTT failed: unknown result");
    }

    public function ImportCashDeskRTT($apiKey, \Workabox\API\CashDeskRTT $importdata)
    {
        $this->send_ImportCashDeskRTT($apiKey, $importdata);
        return $this->recv_ImportCashDeskRTT();
    }

    public function send_ImportCashDeskRTT($apiKey, \Workabox\API\CashDeskRTT $importdata)
    {
        $args = new \Workabox\API\APIService_ImportCashDeskRTT_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportCashDeskRTT',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportCashDeskRTT', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportCashDeskRTT()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportCashDeskRTT_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportCashDeskRTT_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportCashDeskRTT failed: unknown result");
    }

    public function ExportCashDeskRTT($apiKey, $date, \Workabox\API\CashDeskRTTFilter $filter)
    {
        $this->send_ExportCashDeskRTT($apiKey, $date, $filter);
        return $this->recv_ExportCashDeskRTT();
    }

    public function send_ExportCashDeskRTT($apiKey, $date, \Workabox\API\CashDeskRTTFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportCashDeskRTT_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportCashDeskRTT',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportCashDeskRTT', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportCashDeskRTT()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportCashDeskRTT_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportCashDeskRTT_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportCashDeskRTT failed: unknown result");
    }

    public function ImportEmployee($apiKey, \Workabox\API\Employee $importdata)
    {
        $this->send_ImportEmployee($apiKey, $importdata);
        return $this->recv_ImportEmployee();
    }

    public function send_ImportEmployee($apiKey, \Workabox\API\Employee $importdata)
    {
        $args = new \Workabox\API\APIService_ImportEmployee_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportEmployee',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportEmployee', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportEmployee()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportEmployee_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportEmployee_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportEmployee failed: unknown result");
    }

    public function ExportEmployee($apiKey, $date, \Workabox\API\EmployeeFilter $filter)
    {
        $this->send_ExportEmployee($apiKey, $date, $filter);
        return $this->recv_ExportEmployee();
    }

    public function send_ExportEmployee($apiKey, $date, \Workabox\API\EmployeeFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportEmployee_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportEmployee',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportEmployee', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportEmployee()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportEmployee_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportEmployee_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportEmployee failed: unknown result");
    }

    public function ImportBank($apiKey, \Workabox\API\Bank $importdata)
    {
        $this->send_ImportBank($apiKey, $importdata);
        return $this->recv_ImportBank();
    }

    public function send_ImportBank($apiKey, \Workabox\API\Bank $importdata)
    {
        $args = new \Workabox\API\APIService_ImportBank_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportBank',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportBank', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportBank()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportBank_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportBank_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportBank failed: unknown result");
    }

    public function ExportBank($apiKey, $date, \Workabox\API\BankFilter $filter)
    {
        $this->send_ExportBank($apiKey, $date, $filter);
        return $this->recv_ExportBank();
    }

    public function send_ExportBank($apiKey, $date, \Workabox\API\BankFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportBank_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportBank',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportBank', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportBank()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportBank_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportBank_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportBank failed: unknown result");
    }

    public function ImportAccount($apiKey, \Workabox\API\Account $importdata)
    {
        $this->send_ImportAccount($apiKey, $importdata);
        return $this->recv_ImportAccount();
    }

    public function send_ImportAccount($apiKey, \Workabox\API\Account $importdata)
    {
        $args = new \Workabox\API\APIService_ImportAccount_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportAccount',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportAccount', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportAccount()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportAccount_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportAccount_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportAccount failed: unknown result");
    }

    public function ExportAccount($apiKey, $date, \Workabox\API\AccountFilter $filter)
    {
        $this->send_ExportAccount($apiKey, $date, $filter);
        return $this->recv_ExportAccount();
    }

    public function send_ExportAccount($apiKey, $date, \Workabox\API\AccountFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportAccount_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportAccount',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportAccount', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportAccount()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportAccount_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportAccount_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportAccount failed: unknown result");
    }

    public function ImportCashDesk($apiKey, \Workabox\API\CashDesk $importdata)
    {
        $this->send_ImportCashDesk($apiKey, $importdata);
        return $this->recv_ImportCashDesk();
    }

    public function send_ImportCashDesk($apiKey, \Workabox\API\CashDesk $importdata)
    {
        $args = new \Workabox\API\APIService_ImportCashDesk_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportCashDesk',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportCashDesk', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportCashDesk()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportCashDesk_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportCashDesk_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportCashDesk failed: unknown result");
    }

    public function ExportCashDesk($apiKey, $date, \Workabox\API\CashDeskFilter $filter)
    {
        $this->send_ExportCashDesk($apiKey, $date, $filter);
        return $this->recv_ExportCashDesk();
    }

    public function send_ExportCashDesk($apiKey, $date, \Workabox\API\CashDeskFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportCashDesk_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportCashDesk',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportCashDesk', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportCashDesk()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportCashDesk_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportCashDesk_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportCashDesk failed: unknown result");
    }

    public function ImportMarketingInstrumentType($apiKey, \Workabox\API\MarketingInstrumentType $importdata)
    {
        $this->send_ImportMarketingInstrumentType($apiKey, $importdata);
        return $this->recv_ImportMarketingInstrumentType();
    }

    public function send_ImportMarketingInstrumentType($apiKey, \Workabox\API\MarketingInstrumentType $importdata)
    {
        $args = new \Workabox\API\APIService_ImportMarketingInstrumentType_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportMarketingInstrumentType',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportMarketingInstrumentType', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportMarketingInstrumentType()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportMarketingInstrumentType_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportMarketingInstrumentType_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportMarketingInstrumentType failed: unknown result");
    }

    public function ExportMarketingInstrumentType($apiKey, $date, \Workabox\API\MarketingInstrumentTypeFilter $filter)
    {
        $this->send_ExportMarketingInstrumentType($apiKey, $date, $filter);
        return $this->recv_ExportMarketingInstrumentType();
    }

    public function send_ExportMarketingInstrumentType($apiKey, $date, \Workabox\API\MarketingInstrumentTypeFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportMarketingInstrumentType_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportMarketingInstrumentType',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportMarketingInstrumentType', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportMarketingInstrumentType()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportMarketingInstrumentType_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportMarketingInstrumentType_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportMarketingInstrumentType failed: unknown result");
    }

    public function ImportActualizingMI($apiKey, \Workabox\API\ActualizingMI $importdata)
    {
        $this->send_ImportActualizingMI($apiKey, $importdata);
        return $this->recv_ImportActualizingMI();
    }

    public function send_ImportActualizingMI($apiKey, \Workabox\API\ActualizingMI $importdata)
    {
        $args = new \Workabox\API\APIService_ImportActualizingMI_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportActualizingMI',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportActualizingMI', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportActualizingMI()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportActualizingMI_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportActualizingMI_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportActualizingMI failed: unknown result");
    }

    public function ExportActualizingMI($apiKey, $date, \Workabox\API\ActualizingMIFilter $filter)
    {
        $this->send_ExportActualizingMI($apiKey, $date, $filter);
        return $this->recv_ExportActualizingMI();
    }

    public function send_ExportActualizingMI($apiKey, $date, \Workabox\API\ActualizingMIFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportActualizingMI_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportActualizingMI',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportActualizingMI', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportActualizingMI()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportActualizingMI_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportActualizingMI_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportActualizingMI failed: unknown result");
    }

    public function ImportCustomerNaturalPerson($apiKey, \Workabox\API\CustomerNaturalPerson $importdata)
    {
        $this->send_ImportCustomerNaturalPerson($apiKey, $importdata);
        return $this->recv_ImportCustomerNaturalPerson();
    }

    public function send_ImportCustomerNaturalPerson($apiKey, \Workabox\API\CustomerNaturalPerson $importdata)
    {
        $args = new \Workabox\API\APIService_ImportCustomerNaturalPerson_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportCustomerNaturalPerson',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportCustomerNaturalPerson', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportCustomerNaturalPerson()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportCustomerNaturalPerson_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportCustomerNaturalPerson_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportCustomerNaturalPerson failed: unknown result");
    }

    public function ExportCustomerNaturalPerson($apiKey, $date, \Workabox\API\CustomerNaturalPersonFilter $filter)
    {
        $this->send_ExportCustomerNaturalPerson($apiKey, $date, $filter);
        return $this->recv_ExportCustomerNaturalPerson();
    }

    public function send_ExportCustomerNaturalPerson($apiKey, $date, \Workabox\API\CustomerNaturalPersonFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportCustomerNaturalPerson_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportCustomerNaturalPerson',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportCustomerNaturalPerson', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportCustomerNaturalPerson()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportCustomerNaturalPerson_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportCustomerNaturalPerson_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportCustomerNaturalPerson failed: unknown result");
    }

    public function ImportGoodsIncome($apiKey, \Workabox\API\GoodsIncome $importdata)
    {
        $this->send_ImportGoodsIncome($apiKey, $importdata);
        return $this->recv_ImportGoodsIncome();
    }

    public function send_ImportGoodsIncome($apiKey, \Workabox\API\GoodsIncome $importdata)
    {
        $args = new \Workabox\API\APIService_ImportGoodsIncome_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportGoodsIncome',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportGoodsIncome', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportGoodsIncome()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportGoodsIncome_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportGoodsIncome_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportGoodsIncome failed: unknown result");
    }

    public function ExportGoodsIncome($apiKey, $date, \Workabox\API\GoodsIncomeFilter $filter)
    {
        $this->send_ExportGoodsIncome($apiKey, $date, $filter);
        return $this->recv_ExportGoodsIncome();
    }

    public function send_ExportGoodsIncome($apiKey, $date, \Workabox\API\GoodsIncomeFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportGoodsIncome_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportGoodsIncome',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportGoodsIncome', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportGoodsIncome()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportGoodsIncome_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportGoodsIncome_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportGoodsIncome failed: unknown result");
    }

    public function ImportGoodsMove($apiKey, \Workabox\API\GoodsMove $importdata)
    {
        $this->send_ImportGoodsMove($apiKey, $importdata);
        return $this->recv_ImportGoodsMove();
    }

    public function send_ImportGoodsMove($apiKey, \Workabox\API\GoodsMove $importdata)
    {
        $args = new \Workabox\API\APIService_ImportGoodsMove_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportGoodsMove',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportGoodsMove', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportGoodsMove()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportGoodsMove_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportGoodsMove_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportGoodsMove failed: unknown result");
    }

    public function ExportGoodsMove($apiKey, $date, \Workabox\API\GoodsMoveFilter $filter)
    {
        $this->send_ExportGoodsMove($apiKey, $date, $filter);
        return $this->recv_ExportGoodsMove();
    }

    public function send_ExportGoodsMove($apiKey, $date, \Workabox\API\GoodsMoveFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportGoodsMove_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportGoodsMove',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportGoodsMove', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportGoodsMove()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportGoodsMove_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportGoodsMove_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportGoodsMove failed: unknown result");
    }

    public function ImportGoodsReturn($apiKey, \Workabox\API\GoodsReturn $importdata)
    {
        $this->send_ImportGoodsReturn($apiKey, $importdata);
        return $this->recv_ImportGoodsReturn();
    }

    public function send_ImportGoodsReturn($apiKey, \Workabox\API\GoodsReturn $importdata)
    {
        $args = new \Workabox\API\APIService_ImportGoodsReturn_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportGoodsReturn',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportGoodsReturn', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportGoodsReturn()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportGoodsReturn_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportGoodsReturn_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportGoodsReturn failed: unknown result");
    }

    public function ExportGoodsReturn($apiKey, $date, \Workabox\API\GoodsReturnFilter $filter)
    {
        $this->send_ExportGoodsReturn($apiKey, $date, $filter);
        return $this->recv_ExportGoodsReturn();
    }

    public function send_ExportGoodsReturn($apiKey, $date, \Workabox\API\GoodsReturnFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportGoodsReturn_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportGoodsReturn',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportGoodsReturn', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportGoodsReturn()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportGoodsReturn_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportGoodsReturn_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportGoodsReturn failed: unknown result");
    }

    public function ImportGoodsDebit($apiKey, \Workabox\API\GoodsDebit $importdata)
    {
        $this->send_ImportGoodsDebit($apiKey, $importdata);
        return $this->recv_ImportGoodsDebit();
    }

    public function send_ImportGoodsDebit($apiKey, \Workabox\API\GoodsDebit $importdata)
    {
        $args = new \Workabox\API\APIService_ImportGoodsDebit_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportGoodsDebit',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportGoodsDebit', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportGoodsDebit()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportGoodsDebit_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportGoodsDebit_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportGoodsDebit failed: unknown result");
    }

    public function ExportGoodsDebit($apiKey, $date, \Workabox\API\GoodsDebitFilter $filter)
    {
        $this->send_ExportGoodsDebit($apiKey, $date, $filter);
        return $this->recv_ExportGoodsDebit();
    }

    public function send_ExportGoodsDebit($apiKey, $date, \Workabox\API\GoodsDebitFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportGoodsDebit_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportGoodsDebit',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportGoodsDebit', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportGoodsDebit()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportGoodsDebit_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportGoodsDebit_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportGoodsDebit failed: unknown result");
    }

    public function ImportRetailSale($apiKey, \Workabox\API\RetailSale $importdata)
    {
        $this->send_ImportRetailSale($apiKey, $importdata);
        return $this->recv_ImportRetailSale();
    }

    public function send_ImportRetailSale($apiKey, \Workabox\API\RetailSale $importdata)
    {
        $args = new \Workabox\API\APIService_ImportRetailSale_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportRetailSale',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportRetailSale', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportRetailSale()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportRetailSale_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportRetailSale_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportRetailSale failed: unknown result");
    }

    public function ExportRetailSale($apiKey, $date, \Workabox\API\RetailSaleFilter $filter)
    {
        $this->send_ExportRetailSale($apiKey, $date, $filter);
        return $this->recv_ExportRetailSale();
    }

    public function send_ExportRetailSale($apiKey, $date, \Workabox\API\RetailSaleFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportRetailSale_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportRetailSale',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportRetailSale', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportRetailSale()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportRetailSale_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportRetailSale_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportRetailSale failed: unknown result");
    }

    public function ImportCustomerOrder($apiKey, \Workabox\API\CustomerOrder $importdata)
    {
        $this->send_ImportCustomerOrder($apiKey, $importdata);
        return $this->recv_ImportCustomerOrder();
    }

    public function send_ImportCustomerOrder($apiKey, \Workabox\API\CustomerOrder $importdata)
    {
        $args = new \Workabox\API\APIService_ImportCustomerOrder_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportCustomerOrder',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportCustomerOrder', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportCustomerOrder()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportCustomerOrder_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportCustomerOrder_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportCustomerOrder failed: unknown result");
    }

    public function ExportCustomerOrder($apiKey, $date, \Workabox\API\CustomerOrderFilter $filter)
    {
        $this->send_ExportCustomerOrder($apiKey, $date, $filter);
        return $this->recv_ExportCustomerOrder();
    }

    public function send_ExportCustomerOrder($apiKey, $date, \Workabox\API\CustomerOrderFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportCustomerOrder_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportCustomerOrder',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportCustomerOrder', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportCustomerOrder()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportCustomerOrder_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportCustomerOrder_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportCustomerOrder failed: unknown result");
    }

    public function ImportCustomerReturn($apiKey, \Workabox\API\CustomerReturn $importdata)
    {
        $this->send_ImportCustomerReturn($apiKey, $importdata);
        return $this->recv_ImportCustomerReturn();
    }

    public function send_ImportCustomerReturn($apiKey, \Workabox\API\CustomerReturn $importdata)
    {
        $args = new \Workabox\API\APIService_ImportCustomerReturn_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportCustomerReturn',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportCustomerReturn', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportCustomerReturn()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportCustomerReturn_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportCustomerReturn_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportCustomerReturn failed: unknown result");
    }

    public function ExportCustomerReturn($apiKey, $date, \Workabox\API\CustomerReturnFilter $filter)
    {
        $this->send_ExportCustomerReturn($apiKey, $date, $filter);
        return $this->recv_ExportCustomerReturn();
    }

    public function send_ExportCustomerReturn($apiKey, $date, \Workabox\API\CustomerReturnFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportCustomerReturn_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportCustomerReturn',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportCustomerReturn', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportCustomerReturn()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportCustomerReturn_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportCustomerReturn_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportCustomerReturn failed: unknown result");
    }

    public function ImportOrderDocOut($apiKey, \Workabox\API\OrderDocOut $importdata)
    {
        $this->send_ImportOrderDocOut($apiKey, $importdata);
        return $this->recv_ImportOrderDocOut();
    }

    public function send_ImportOrderDocOut($apiKey, \Workabox\API\OrderDocOut $importdata)
    {
        $args = new \Workabox\API\APIService_ImportOrderDocOut_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportOrderDocOut',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportOrderDocOut', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportOrderDocOut()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportOrderDocOut_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportOrderDocOut_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportOrderDocOut failed: unknown result");
    }

    public function ExportOrderDocOut($apiKey, $date, \Workabox\API\OrderDocOutFilter $filter)
    {
        $this->send_ExportOrderDocOut($apiKey, $date, $filter);
        return $this->recv_ExportOrderDocOut();
    }

    public function send_ExportOrderDocOut($apiKey, $date, \Workabox\API\OrderDocOutFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportOrderDocOut_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportOrderDocOut',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportOrderDocOut', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportOrderDocOut()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportOrderDocOut_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportOrderDocOut_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportOrderDocOut failed: unknown result");
    }

    public function ImportOrderDocInner($apiKey, \Workabox\API\OrderDocInner $importdata)
    {
        $this->send_ImportOrderDocInner($apiKey, $importdata);
        return $this->recv_ImportOrderDocInner();
    }

    public function send_ImportOrderDocInner($apiKey, \Workabox\API\OrderDocInner $importdata)
    {
        $args = new \Workabox\API\APIService_ImportOrderDocInner_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportOrderDocInner',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportOrderDocInner', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportOrderDocInner()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportOrderDocInner_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportOrderDocInner_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportOrderDocInner failed: unknown result");
    }

    public function ExportOrderDocInner($apiKey, $date, \Workabox\API\OrderDocInnerFilter $filter)
    {
        $this->send_ExportOrderDocInner($apiKey, $date, $filter);
        return $this->recv_ExportOrderDocInner();
    }

    public function send_ExportOrderDocInner($apiKey, $date, \Workabox\API\OrderDocInnerFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportOrderDocInner_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportOrderDocInner',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportOrderDocInner', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportOrderDocInner()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportOrderDocInner_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportOrderDocInner_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportOrderDocInner failed: unknown result");
    }

    public function ImportInventory($apiKey, \Workabox\API\Inventory $importdata)
    {
        $this->send_ImportInventory($apiKey, $importdata);
        return $this->recv_ImportInventory();
    }

    public function send_ImportInventory($apiKey, \Workabox\API\Inventory $importdata)
    {
        $args = new \Workabox\API\APIService_ImportInventory_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportInventory',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportInventory', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportInventory()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportInventory_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportInventory_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportInventory failed: unknown result");
    }

    public function ExportInventory($apiKey, $date, \Workabox\API\InventoryFilter $filter)
    {
        $this->send_ExportInventory($apiKey, $date, $filter);
        return $this->recv_ExportInventory();
    }

    public function send_ExportInventory($apiKey, $date, \Workabox\API\InventoryFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportInventory_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportInventory',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportInventory', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportInventory()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportInventory_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportInventory_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportInventory failed: unknown result");
    }

    public function ImportMoneyMovementIn($apiKey, \Workabox\API\MoneyMovementIn $importdata)
    {
        $this->send_ImportMoneyMovementIn($apiKey, $importdata);
        return $this->recv_ImportMoneyMovementIn();
    }

    public function send_ImportMoneyMovementIn($apiKey, \Workabox\API\MoneyMovementIn $importdata)
    {
        $args = new \Workabox\API\APIService_ImportMoneyMovementIn_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportMoneyMovementIn',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportMoneyMovementIn', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportMoneyMovementIn()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportMoneyMovementIn_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportMoneyMovementIn_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportMoneyMovementIn failed: unknown result");
    }

    public function ExportMoneyMovementIn($apiKey, $date, \Workabox\API\MoneyMovementInFilter $filter)
    {
        $this->send_ExportMoneyMovementIn($apiKey, $date, $filter);
        return $this->recv_ExportMoneyMovementIn();
    }

    public function send_ExportMoneyMovementIn($apiKey, $date, \Workabox\API\MoneyMovementInFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportMoneyMovementIn_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportMoneyMovementIn',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportMoneyMovementIn', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportMoneyMovementIn()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportMoneyMovementIn_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportMoneyMovementIn_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportMoneyMovementIn failed: unknown result");
    }

    public function ImportMoneyMovementOut($apiKey, \Workabox\API\MoneyMovementOut $importdata)
    {
        $this->send_ImportMoneyMovementOut($apiKey, $importdata);
        return $this->recv_ImportMoneyMovementOut();
    }

    public function send_ImportMoneyMovementOut($apiKey, \Workabox\API\MoneyMovementOut $importdata)
    {
        $args = new \Workabox\API\APIService_ImportMoneyMovementOut_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportMoneyMovementOut',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportMoneyMovementOut', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportMoneyMovementOut()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportMoneyMovementOut_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportMoneyMovementOut_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportMoneyMovementOut failed: unknown result");
    }

    public function ExportMoneyMovementOut($apiKey, $date, \Workabox\API\MoneyMovementOutFilter $filter)
    {
        $this->send_ExportMoneyMovementOut($apiKey, $date, $filter);
        return $this->recv_ExportMoneyMovementOut();
    }

    public function send_ExportMoneyMovementOut($apiKey, $date, \Workabox\API\MoneyMovementOutFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportMoneyMovementOut_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportMoneyMovementOut',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportMoneyMovementOut', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportMoneyMovementOut()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportMoneyMovementOut_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportMoneyMovementOut_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportMoneyMovementOut failed: unknown result");
    }

    public function ImportMoneyMovementInner($apiKey, \Workabox\API\MoneyMovementInner $importdata)
    {
        $this->send_ImportMoneyMovementInner($apiKey, $importdata);
        return $this->recv_ImportMoneyMovementInner();
    }

    public function send_ImportMoneyMovementInner($apiKey, \Workabox\API\MoneyMovementInner $importdata)
    {
        $args = new \Workabox\API\APIService_ImportMoneyMovementInner_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportMoneyMovementInner',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportMoneyMovementInner', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportMoneyMovementInner()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportMoneyMovementInner_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportMoneyMovementInner_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportMoneyMovementInner failed: unknown result");
    }

    public function ExportMoneyMovementInner($apiKey, $date, \Workabox\API\MoneyMovementInnerFilter $filter)
    {
        $this->send_ExportMoneyMovementInner($apiKey, $date, $filter);
        return $this->recv_ExportMoneyMovementInner();
    }

    public function send_ExportMoneyMovementInner($apiKey, $date, \Workabox\API\MoneyMovementInnerFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportMoneyMovementInner_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportMoneyMovementInner',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportMoneyMovementInner', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportMoneyMovementInner()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportMoneyMovementInner_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportMoneyMovementInner_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportMoneyMovementInner failed: unknown result");
    }

    public function ImportRoutings($apiKey, \Workabox\API\Routings $importdata)
    {
        $this->send_ImportRoutings($apiKey, $importdata);
        return $this->recv_ImportRoutings();
    }

    public function send_ImportRoutings($apiKey, \Workabox\API\Routings $importdata)
    {
        $args = new \Workabox\API\APIService_ImportRoutings_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportRoutings',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportRoutings', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportRoutings()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportRoutings_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportRoutings_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportRoutings failed: unknown result");
    }

    public function ExportRoutings($apiKey, $date, \Workabox\API\RoutingsFilter $filter)
    {
        $this->send_ExportRoutings($apiKey, $date, $filter);
        return $this->recv_ExportRoutings();
    }

    public function send_ExportRoutings($apiKey, $date, \Workabox\API\RoutingsFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportRoutings_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportRoutings',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportRoutings', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportRoutings()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportRoutings_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportRoutings_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportRoutings failed: unknown result");
    }

    public function ImportProductionOperations($apiKey, \Workabox\API\ProductionOperations $importdata)
    {
        $this->send_ImportProductionOperations($apiKey, $importdata);
        return $this->recv_ImportProductionOperations();
    }

    public function send_ImportProductionOperations($apiKey, \Workabox\API\ProductionOperations $importdata)
    {
        $args = new \Workabox\API\APIService_ImportProductionOperations_args();
        $args->apiKey = $apiKey;
        $args->importdata = $importdata;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ImportProductionOperations',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ImportProductionOperations', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ImportProductionOperations()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ImportProductionOperations_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ImportProductionOperations_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ImportProductionOperations failed: unknown result");
    }

    public function ExportProductionOperations($apiKey, $date, \Workabox\API\ProductionOperationsFilter $filter)
    {
        $this->send_ExportProductionOperations($apiKey, $date, $filter);
        return $this->recv_ExportProductionOperations();
    }

    public function send_ExportProductionOperations($apiKey, $date, \Workabox\API\ProductionOperationsFilter $filter)
    {
        $args = new \Workabox\API\APIService_ExportProductionOperations_args();
        $args->apiKey = $apiKey;
        $args->date = $date;
        $args->filter = $filter;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'ExportProductionOperations',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('ExportProductionOperations', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_ExportProductionOperations()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\Workabox\API\APIService_ExportProductionOperations_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \Workabox\API\APIService_ExportProductionOperations_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->ex !== null) {
            throw $result->ex;
        }
        throw new \Exception("ExportProductionOperations failed: unknown result");
    }
}

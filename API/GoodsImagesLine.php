<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GoodsImagesLine
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'UrlPreview',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'UrlImage',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'Additional',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'ObjectName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'LineCode',
            'isRequired' => false,
            'type' => TType::I32,
        ),
    );

    /**
     * @var string
     */
    public $UrlPreview = null;
    /**
     * @var string
     */
    public $UrlImage = null;
    /**
     * @var string
     */
    public $Additional = null;
    /**
     * @var string
     */
    public $ObjectName = null;
    /**
     * @var int
     */
    public $LineCode = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['UrlPreview'])) {
                $this->UrlPreview = $vals['UrlPreview'];
            }
            if (isset($vals['UrlImage'])) {
                $this->UrlImage = $vals['UrlImage'];
            }
            if (isset($vals['Additional'])) {
                $this->Additional = $vals['Additional'];
            }
            if (isset($vals['ObjectName'])) {
                $this->ObjectName = $vals['ObjectName'];
            }
            if (isset($vals['LineCode'])) {
                $this->LineCode = $vals['LineCode'];
            }
        }
    }

    public function getName()
    {
        return 'GoodsImagesLine';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->UrlPreview);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->UrlImage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Additional);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ObjectName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->LineCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GoodsImagesLine');
        if ($this->UrlPreview !== null) {
            $xfer += $output->writeFieldBegin('UrlPreview', TType::STRING, 1);
            $xfer += $output->writeString($this->UrlPreview);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UrlImage !== null) {
            $xfer += $output->writeFieldBegin('UrlImage', TType::STRING, 2);
            $xfer += $output->writeString($this->UrlImage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Additional !== null) {
            $xfer += $output->writeFieldBegin('Additional', TType::STRING, 3);
            $xfer += $output->writeString($this->Additional);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectName !== null) {
            $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 4);
            $xfer += $output->writeString($this->ObjectName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->LineCode !== null) {
            $xfer += $output->writeFieldBegin('LineCode', TType::I32, 5);
            $xfer += $output->writeI32($this->LineCode);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

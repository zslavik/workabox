<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class EmployeeFilter
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'OuterID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'Role',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        4 => array(
            'var' => 'UserLCID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'ObjectOwner',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        6 => array(
            'var' => 'Login',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'ObjectName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'HierarchyBranch',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'Additional',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'EMail',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'MobilePhone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'HomePhone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'SecondName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'FirstName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'MiddleName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        16 => array(
            'var' => 'BirthDay_Day',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'BirthDay_Month',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        18 => array(
            'var' => 'BirthDay_Year',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        19 => array(
            'var' => 'Sex',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        20 => array(
            'var' => 'EmployeeOfficeMaster',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $OuterID = null;
    /**
     * @var string[]
     */
    public $Role = null;
    /**
     * @var string
     */
    public $UserLCID = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $ObjectOwner = null;
    /**
     * @var string
     */
    public $Login = null;
    /**
     * @var string
     */
    public $ObjectName = null;
    /**
     * @var string
     */
    public $HierarchyBranch = null;
    /**
     * @var string
     */
    public $Additional = null;
    /**
     * @var string
     */
    public $EMail = null;
    /**
     * @var string
     */
    public $MobilePhone = null;
    /**
     * @var string
     */
    public $HomePhone = null;
    /**
     * @var string
     */
    public $SecondName = null;
    /**
     * @var string
     */
    public $FirstName = null;
    /**
     * @var string
     */
    public $MiddleName = null;
    /**
     * @var string
     */
    public $BirthDay_Day = null;
    /**
     * @var string[]
     */
    public $BirthDay_Month = null;
    /**
     * @var string
     */
    public $BirthDay_Year = null;
    /**
     * @var string[]
     */
    public $Sex = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $EmployeeOfficeMaster = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['OuterID'])) {
                $this->OuterID = $vals['OuterID'];
            }
            if (isset($vals['Role'])) {
                $this->Role = $vals['Role'];
            }
            if (isset($vals['UserLCID'])) {
                $this->UserLCID = $vals['UserLCID'];
            }
            if (isset($vals['ObjectOwner'])) {
                $this->ObjectOwner = $vals['ObjectOwner'];
            }
            if (isset($vals['Login'])) {
                $this->Login = $vals['Login'];
            }
            if (isset($vals['ObjectName'])) {
                $this->ObjectName = $vals['ObjectName'];
            }
            if (isset($vals['HierarchyBranch'])) {
                $this->HierarchyBranch = $vals['HierarchyBranch'];
            }
            if (isset($vals['Additional'])) {
                $this->Additional = $vals['Additional'];
            }
            if (isset($vals['EMail'])) {
                $this->EMail = $vals['EMail'];
            }
            if (isset($vals['MobilePhone'])) {
                $this->MobilePhone = $vals['MobilePhone'];
            }
            if (isset($vals['HomePhone'])) {
                $this->HomePhone = $vals['HomePhone'];
            }
            if (isset($vals['SecondName'])) {
                $this->SecondName = $vals['SecondName'];
            }
            if (isset($vals['FirstName'])) {
                $this->FirstName = $vals['FirstName'];
            }
            if (isset($vals['MiddleName'])) {
                $this->MiddleName = $vals['MiddleName'];
            }
            if (isset($vals['BirthDay_Day'])) {
                $this->BirthDay_Day = $vals['BirthDay_Day'];
            }
            if (isset($vals['BirthDay_Month'])) {
                $this->BirthDay_Month = $vals['BirthDay_Month'];
            }
            if (isset($vals['BirthDay_Year'])) {
                $this->BirthDay_Year = $vals['BirthDay_Year'];
            }
            if (isset($vals['Sex'])) {
                $this->Sex = $vals['Sex'];
            }
            if (isset($vals['EmployeeOfficeMaster'])) {
                $this->EmployeeOfficeMaster = $vals['EmployeeOfficeMaster'];
            }
        }
    }

    public function getName()
    {
        return 'EmployeeFilter';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->OuterID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->Role = array();
                        $_size441 = 0;
                        $_etype444 = 0;
                        $xfer += $input->readListBegin($_etype444, $_size441);
                        for ($_i445 = 0; $_i445 < $_size441; ++$_i445) {
                            $elem446 = null;
                            $xfer += $input->readString($elem446);
                            $this->Role []= $elem446;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->UserLCID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->ObjectOwner = new \Workabox\API\ObjectID();
                        $xfer += $this->ObjectOwner->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Login);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ObjectName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->HierarchyBranch);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Additional);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->EMail);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->MobilePhone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->HomePhone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->SecondName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->FirstName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->MiddleName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->BirthDay_Day);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::LST) {
                        $this->BirthDay_Month = array();
                        $_size447 = 0;
                        $_etype450 = 0;
                        $xfer += $input->readListBegin($_etype450, $_size447);
                        for ($_i451 = 0; $_i451 < $_size447; ++$_i451) {
                            $elem452 = null;
                            $xfer += $input->readString($elem452);
                            $this->BirthDay_Month []= $elem452;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->BirthDay_Year);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::LST) {
                        $this->Sex = array();
                        $_size453 = 0;
                        $_etype456 = 0;
                        $xfer += $input->readListBegin($_etype456, $_size453);
                        for ($_i457 = 0; $_i457 < $_size453; ++$_i457) {
                            $elem458 = null;
                            $xfer += $input->readString($elem458);
                            $this->Sex []= $elem458;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRUCT) {
                        $this->EmployeeOfficeMaster = new \Workabox\API\ObjectID();
                        $xfer += $this->EmployeeOfficeMaster->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('EmployeeFilter');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterID !== null) {
            $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
            $xfer += $output->writeString($this->OuterID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Role !== null) {
            if (!is_array($this->Role)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Role', TType::LST, 3);
            $output->writeListBegin(TType::STRING, count($this->Role));
            foreach ($this->Role as $iter459) {
                $xfer += $output->writeString($iter459);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserLCID !== null) {
            $xfer += $output->writeFieldBegin('UserLCID', TType::STRING, 4);
            $xfer += $output->writeString($this->UserLCID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectOwner !== null) {
            if (!is_object($this->ObjectOwner)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 5);
            $xfer += $this->ObjectOwner->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Login !== null) {
            $xfer += $output->writeFieldBegin('Login', TType::STRING, 6);
            $xfer += $output->writeString($this->Login);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectName !== null) {
            $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 7);
            $xfer += $output->writeString($this->ObjectName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->HierarchyBranch !== null) {
            $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 8);
            $xfer += $output->writeString($this->HierarchyBranch);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Additional !== null) {
            $xfer += $output->writeFieldBegin('Additional', TType::STRING, 9);
            $xfer += $output->writeString($this->Additional);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->EMail !== null) {
            $xfer += $output->writeFieldBegin('EMail', TType::STRING, 10);
            $xfer += $output->writeString($this->EMail);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MobilePhone !== null) {
            $xfer += $output->writeFieldBegin('MobilePhone', TType::STRING, 11);
            $xfer += $output->writeString($this->MobilePhone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->HomePhone !== null) {
            $xfer += $output->writeFieldBegin('HomePhone', TType::STRING, 12);
            $xfer += $output->writeString($this->HomePhone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SecondName !== null) {
            $xfer += $output->writeFieldBegin('SecondName', TType::STRING, 13);
            $xfer += $output->writeString($this->SecondName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->FirstName !== null) {
            $xfer += $output->writeFieldBegin('FirstName', TType::STRING, 14);
            $xfer += $output->writeString($this->FirstName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MiddleName !== null) {
            $xfer += $output->writeFieldBegin('MiddleName', TType::STRING, 15);
            $xfer += $output->writeString($this->MiddleName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->BirthDay_Day !== null) {
            $xfer += $output->writeFieldBegin('BirthDay_Day', TType::STRING, 16);
            $xfer += $output->writeString($this->BirthDay_Day);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->BirthDay_Month !== null) {
            if (!is_array($this->BirthDay_Month)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('BirthDay_Month', TType::LST, 17);
            $output->writeListBegin(TType::STRING, count($this->BirthDay_Month));
            foreach ($this->BirthDay_Month as $iter460) {
                $xfer += $output->writeString($iter460);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->BirthDay_Year !== null) {
            $xfer += $output->writeFieldBegin('BirthDay_Year', TType::STRING, 18);
            $xfer += $output->writeString($this->BirthDay_Year);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Sex !== null) {
            if (!is_array($this->Sex)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Sex', TType::LST, 19);
            $output->writeListBegin(TType::STRING, count($this->Sex));
            foreach ($this->Sex as $iter461) {
                $xfer += $output->writeString($iter461);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->EmployeeOfficeMaster !== null) {
            if (!is_object($this->EmployeeOfficeMaster)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('EmployeeOfficeMaster', TType::STRUCT, 20);
            $xfer += $this->EmployeeOfficeMaster->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

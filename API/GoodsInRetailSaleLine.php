<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GoodsInRetailSaleLine
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'GeneralDiscount',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        2 => array(
            'var' => 'ManagerDiscount',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        3 => array(
            'var' => 'SpecialDiscount',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        4 => array(
            'var' => 'TaxSum',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        5 => array(
            'var' => 'TaxName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'SummTotal',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        7 => array(
            'var' => 'Employee',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        8 => array(
            'var' => 'Quantity',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        9 => array(
            'var' => 'Price',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        10 => array(
            'var' => 'MarketingDiscount',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        11 => array(
            'var' => 'PercentDiscount',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        12 => array(
            'var' => 'AbsDiscount',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        13 => array(
            'var' => 'Goods',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
    );

    /**
     * @var double
     */
    public $GeneralDiscount = null;
    /**
     * @var double
     */
    public $ManagerDiscount = null;
    /**
     * @var double
     */
    public $SpecialDiscount = null;
    /**
     * @var double
     */
    public $TaxSum = null;
    /**
     * @var string
     */
    public $TaxName = null;
    /**
     * @var double
     */
    public $SummTotal = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $Employee = null;
    /**
     * @var double
     */
    public $Quantity = null;
    /**
     * @var double
     */
    public $Price = null;
    /**
     * @var double
     */
    public $MarketingDiscount = null;
    /**
     * @var double
     */
    public $PercentDiscount = null;
    /**
     * @var double
     */
    public $AbsDiscount = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $Goods = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['GeneralDiscount'])) {
                $this->GeneralDiscount = $vals['GeneralDiscount'];
            }
            if (isset($vals['ManagerDiscount'])) {
                $this->ManagerDiscount = $vals['ManagerDiscount'];
            }
            if (isset($vals['SpecialDiscount'])) {
                $this->SpecialDiscount = $vals['SpecialDiscount'];
            }
            if (isset($vals['TaxSum'])) {
                $this->TaxSum = $vals['TaxSum'];
            }
            if (isset($vals['TaxName'])) {
                $this->TaxName = $vals['TaxName'];
            }
            if (isset($vals['SummTotal'])) {
                $this->SummTotal = $vals['SummTotal'];
            }
            if (isset($vals['Employee'])) {
                $this->Employee = $vals['Employee'];
            }
            if (isset($vals['Quantity'])) {
                $this->Quantity = $vals['Quantity'];
            }
            if (isset($vals['Price'])) {
                $this->Price = $vals['Price'];
            }
            if (isset($vals['MarketingDiscount'])) {
                $this->MarketingDiscount = $vals['MarketingDiscount'];
            }
            if (isset($vals['PercentDiscount'])) {
                $this->PercentDiscount = $vals['PercentDiscount'];
            }
            if (isset($vals['AbsDiscount'])) {
                $this->AbsDiscount = $vals['AbsDiscount'];
            }
            if (isset($vals['Goods'])) {
                $this->Goods = $vals['Goods'];
            }
        }
    }

    public function getName()
    {
        return 'GoodsInRetailSaleLine';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->GeneralDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->ManagerDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->SpecialDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->TaxSum);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->TaxName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->SummTotal);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->Employee = new \Workabox\API\ObjectID();
                        $xfer += $this->Employee->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->Quantity);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->Price);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->MarketingDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->PercentDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->AbsDiscount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRUCT) {
                        $this->Goods = new \Workabox\API\ObjectID();
                        $xfer += $this->Goods->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GoodsInRetailSaleLine');
        if ($this->GeneralDiscount !== null) {
            $xfer += $output->writeFieldBegin('GeneralDiscount', TType::DOUBLE, 1);
            $xfer += $output->writeDouble($this->GeneralDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ManagerDiscount !== null) {
            $xfer += $output->writeFieldBegin('ManagerDiscount', TType::DOUBLE, 2);
            $xfer += $output->writeDouble($this->ManagerDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SpecialDiscount !== null) {
            $xfer += $output->writeFieldBegin('SpecialDiscount', TType::DOUBLE, 3);
            $xfer += $output->writeDouble($this->SpecialDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->TaxSum !== null) {
            $xfer += $output->writeFieldBegin('TaxSum', TType::DOUBLE, 4);
            $xfer += $output->writeDouble($this->TaxSum);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->TaxName !== null) {
            $xfer += $output->writeFieldBegin('TaxName', TType::STRING, 5);
            $xfer += $output->writeString($this->TaxName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SummTotal !== null) {
            $xfer += $output->writeFieldBegin('SummTotal', TType::DOUBLE, 6);
            $xfer += $output->writeDouble($this->SummTotal);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Employee !== null) {
            if (!is_object($this->Employee)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Employee', TType::STRUCT, 7);
            $xfer += $this->Employee->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Quantity !== null) {
            $xfer += $output->writeFieldBegin('Quantity', TType::DOUBLE, 8);
            $xfer += $output->writeDouble($this->Quantity);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Price !== null) {
            $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 9);
            $xfer += $output->writeDouble($this->Price);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MarketingDiscount !== null) {
            $xfer += $output->writeFieldBegin('MarketingDiscount', TType::DOUBLE, 10);
            $xfer += $output->writeDouble($this->MarketingDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PercentDiscount !== null) {
            $xfer += $output->writeFieldBegin('PercentDiscount', TType::DOUBLE, 11);
            $xfer += $output->writeDouble($this->PercentDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->AbsDiscount !== null) {
            $xfer += $output->writeFieldBegin('AbsDiscount', TType::DOUBLE, 12);
            $xfer += $output->writeDouble($this->AbsDiscount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Goods !== null) {
            if (!is_object($this->Goods)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 13);
            $xfer += $this->Goods->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

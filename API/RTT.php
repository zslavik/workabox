<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class RTT
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'OuterID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'ObjectName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'IsFranchising',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'DefaultAccount',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        6 => array(
            'var' => 'WorkTimeFrom',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'WorkTimeTo',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'WorkingDays',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        9 => array(
            'var' => 'HierarchyBranch',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'ObjectOwner',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        11 => array(
            'var' => 'OuterCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\OuterCodesLine',
                ),
        ),
        12 => array(
            'var' => 'Settlement',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'PostAddress',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'Phone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'StateMain',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        16 => array(
            'var' => 'EmployeeOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        17 => array(
            'var' => 'RTTPricesSlave',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        18 => array(
            'var' => 'CashDescInRTTSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        19 => array(
            'var' => 'CashDeskOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        20 => array(
            'var' => 'StoreOfficeMaster',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $OuterID = null;
    /**
     * @var string
     */
    public $ObjectName = null;
    /**
     * @var bool
     */
    public $IsFranchising = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $DefaultAccount = null;
    /**
     * @var string
     */
    public $WorkTimeFrom = null;
    /**
     * @var string
     */
    public $WorkTimeTo = null;
    /**
     * @var int
     */
    public $WorkingDays = null;
    /**
     * @var string
     */
    public $HierarchyBranch = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $ObjectOwner = null;
    /**
     * @var \Workabox\API\OuterCodesLine[]
     */
    public $OuterCodes = null;
    /**
     * @var string
     */
    public $Settlement = null;
    /**
     * @var string
     */
    public $PostAddress = null;
    /**
     * @var string
     */
    public $Phone = null;
    /**
     * @var string
     */
    public $StateMain = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $EmployeeOfficeSlave = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $RTTPricesSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $CashDescInRTTSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $CashDeskOfficeSlave = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $StoreOfficeMaster = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['OuterID'])) {
                $this->OuterID = $vals['OuterID'];
            }
            if (isset($vals['ObjectName'])) {
                $this->ObjectName = $vals['ObjectName'];
            }
            if (isset($vals['IsFranchising'])) {
                $this->IsFranchising = $vals['IsFranchising'];
            }
            if (isset($vals['DefaultAccount'])) {
                $this->DefaultAccount = $vals['DefaultAccount'];
            }
            if (isset($vals['WorkTimeFrom'])) {
                $this->WorkTimeFrom = $vals['WorkTimeFrom'];
            }
            if (isset($vals['WorkTimeTo'])) {
                $this->WorkTimeTo = $vals['WorkTimeTo'];
            }
            if (isset($vals['WorkingDays'])) {
                $this->WorkingDays = $vals['WorkingDays'];
            }
            if (isset($vals['HierarchyBranch'])) {
                $this->HierarchyBranch = $vals['HierarchyBranch'];
            }
            if (isset($vals['ObjectOwner'])) {
                $this->ObjectOwner = $vals['ObjectOwner'];
            }
            if (isset($vals['OuterCodes'])) {
                $this->OuterCodes = $vals['OuterCodes'];
            }
            if (isset($vals['Settlement'])) {
                $this->Settlement = $vals['Settlement'];
            }
            if (isset($vals['PostAddress'])) {
                $this->PostAddress = $vals['PostAddress'];
            }
            if (isset($vals['Phone'])) {
                $this->Phone = $vals['Phone'];
            }
            if (isset($vals['StateMain'])) {
                $this->StateMain = $vals['StateMain'];
            }
            if (isset($vals['EmployeeOfficeSlave'])) {
                $this->EmployeeOfficeSlave = $vals['EmployeeOfficeSlave'];
            }
            if (isset($vals['RTTPricesSlave'])) {
                $this->RTTPricesSlave = $vals['RTTPricesSlave'];
            }
            if (isset($vals['CashDescInRTTSlave'])) {
                $this->CashDescInRTTSlave = $vals['CashDescInRTTSlave'];
            }
            if (isset($vals['CashDeskOfficeSlave'])) {
                $this->CashDeskOfficeSlave = $vals['CashDeskOfficeSlave'];
            }
            if (isset($vals['StoreOfficeMaster'])) {
                $this->StoreOfficeMaster = $vals['StoreOfficeMaster'];
            }
        }
    }

    public function getName()
    {
        return 'RTT';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->OuterID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ObjectName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->IsFranchising);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->DefaultAccount = new \Workabox\API\ObjectID();
                        $xfer += $this->DefaultAccount->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->WorkTimeFrom);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->WorkTimeTo);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->WorkingDays);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->HierarchyBranch);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRUCT) {
                        $this->ObjectOwner = new \Workabox\API\ObjectID();
                        $xfer += $this->ObjectOwner->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::LST) {
                        $this->OuterCodes = array();
                        $_size378 = 0;
                        $_etype381 = 0;
                        $xfer += $input->readListBegin($_etype381, $_size378);
                        for ($_i382 = 0; $_i382 < $_size378; ++$_i382) {
                            $elem383 = null;
                            $elem383 = new \Workabox\API\OuterCodesLine();
                            $xfer += $elem383->read($input);
                            $this->OuterCodes []= $elem383;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Settlement);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->PostAddress);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Phone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->StateMain);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::LST) {
                        $this->EmployeeOfficeSlave = array();
                        $_size384 = 0;
                        $_etype387 = 0;
                        $xfer += $input->readListBegin($_etype387, $_size384);
                        for ($_i388 = 0; $_i388 < $_size384; ++$_i388) {
                            $elem389 = null;
                            $elem389 = new \Workabox\API\ObjectID();
                            $xfer += $elem389->read($input);
                            $this->EmployeeOfficeSlave []= $elem389;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRUCT) {
                        $this->RTTPricesSlave = new \Workabox\API\ObjectID();
                        $xfer += $this->RTTPricesSlave->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::LST) {
                        $this->CashDescInRTTSlave = array();
                        $_size390 = 0;
                        $_etype393 = 0;
                        $xfer += $input->readListBegin($_etype393, $_size390);
                        for ($_i394 = 0; $_i394 < $_size390; ++$_i394) {
                            $elem395 = null;
                            $elem395 = new \Workabox\API\ObjectID();
                            $xfer += $elem395->read($input);
                            $this->CashDescInRTTSlave []= $elem395;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::LST) {
                        $this->CashDeskOfficeSlave = array();
                        $_size396 = 0;
                        $_etype399 = 0;
                        $xfer += $input->readListBegin($_etype399, $_size396);
                        for ($_i400 = 0; $_i400 < $_size396; ++$_i400) {
                            $elem401 = null;
                            $elem401 = new \Workabox\API\ObjectID();
                            $xfer += $elem401->read($input);
                            $this->CashDeskOfficeSlave []= $elem401;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRUCT) {
                        $this->StoreOfficeMaster = new \Workabox\API\ObjectID();
                        $xfer += $this->StoreOfficeMaster->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('RTT');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterID !== null) {
            $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
            $xfer += $output->writeString($this->OuterID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectName !== null) {
            $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
            $xfer += $output->writeString($this->ObjectName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->IsFranchising !== null) {
            $xfer += $output->writeFieldBegin('IsFranchising', TType::BOOL, 4);
            $xfer += $output->writeBool($this->IsFranchising);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->DefaultAccount !== null) {
            if (!is_object($this->DefaultAccount)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('DefaultAccount', TType::STRUCT, 5);
            $xfer += $this->DefaultAccount->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->WorkTimeFrom !== null) {
            $xfer += $output->writeFieldBegin('WorkTimeFrom', TType::STRING, 6);
            $xfer += $output->writeString($this->WorkTimeFrom);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->WorkTimeTo !== null) {
            $xfer += $output->writeFieldBegin('WorkTimeTo', TType::STRING, 7);
            $xfer += $output->writeString($this->WorkTimeTo);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->WorkingDays !== null) {
            $xfer += $output->writeFieldBegin('WorkingDays', TType::I32, 8);
            $xfer += $output->writeI32($this->WorkingDays);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->HierarchyBranch !== null) {
            $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 9);
            $xfer += $output->writeString($this->HierarchyBranch);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectOwner !== null) {
            if (!is_object($this->ObjectOwner)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 10);
            $xfer += $this->ObjectOwner->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterCodes !== null) {
            if (!is_array($this->OuterCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 11);
            $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
            foreach ($this->OuterCodes as $iter402) {
                $xfer += $iter402->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Settlement !== null) {
            $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 12);
            $xfer += $output->writeString($this->Settlement);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PostAddress !== null) {
            $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 13);
            $xfer += $output->writeString($this->PostAddress);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Phone !== null) {
            $xfer += $output->writeFieldBegin('Phone', TType::STRING, 14);
            $xfer += $output->writeString($this->Phone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StateMain !== null) {
            $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 15);
            $xfer += $output->writeString($this->StateMain);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->EmployeeOfficeSlave !== null) {
            if (!is_array($this->EmployeeOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('EmployeeOfficeSlave', TType::LST, 16);
            $output->writeListBegin(TType::STRUCT, count($this->EmployeeOfficeSlave));
            foreach ($this->EmployeeOfficeSlave as $iter403) {
                $xfer += $iter403->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->RTTPricesSlave !== null) {
            if (!is_object($this->RTTPricesSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('RTTPricesSlave', TType::STRUCT, 17);
            $xfer += $this->RTTPricesSlave->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CashDescInRTTSlave !== null) {
            if (!is_array($this->CashDescInRTTSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('CashDescInRTTSlave', TType::LST, 18);
            $output->writeListBegin(TType::STRUCT, count($this->CashDescInRTTSlave));
            foreach ($this->CashDescInRTTSlave as $iter404) {
                $xfer += $iter404->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CashDeskOfficeSlave !== null) {
            if (!is_array($this->CashDeskOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('CashDeskOfficeSlave', TType::LST, 19);
            $output->writeListBegin(TType::STRUCT, count($this->CashDeskOfficeSlave));
            foreach ($this->CashDeskOfficeSlave as $iter405) {
                $xfer += $iter405->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StoreOfficeMaster !== null) {
            if (!is_object($this->StoreOfficeMaster)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('StoreOfficeMaster', TType::STRUCT, 20);
            $xfer += $this->StoreOfficeMaster->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Service
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'OuterID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'Duration',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'ObjectName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'Ref',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        6 => array(
            'var' => 'Fraction',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'BarCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        8 => array(
            'var' => 'GoodsGroup',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        9 => array(
            'var' => 'ModelName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'PLU',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        11 => array(
            'var' => 'GoodsFullName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'ObjectOwner',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        13 => array(
            'var' => 'CodesSuppliers',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\CodesSuppliersLine',
                ),
        ),
        14 => array(
            'var' => 'TaxRate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'QRLink',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        16 => array(
            'var' => 'RelatedGoods',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        17 => array(
            'var' => 'Modificators',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        18 => array(
            'var' => 'GoodsPrices',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\GoodsPricesLine',
                ),
        ),
        19 => array(
            'var' => 'GoodsImages',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\GoodsImagesLine',
                ),
        ),
        20 => array(
            'var' => 'UrlPreview',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        21 => array(
            'var' => 'OuterCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\OuterCodesLine',
                ),
        ),
        22 => array(
            'var' => 'UserStrings',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserStringsLine',
                ),
        ),
        23 => array(
            'var' => 'UserLongStrings',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserLongStringsLine',
                ),
        ),
        24 => array(
            'var' => 'UserDates',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserDatesLine',
                ),
        ),
        25 => array(
            'var' => 'UserNumbers',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserNumbersLine',
                ),
        ),
        26 => array(
            'var' => 'UserCatalogs',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserCatalogsLine',
                ),
        ),
        27 => array(
            'var' => 'UserCatalogsView',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserCatalogsViewLine',
                ),
        ),
        28 => array(
            'var' => 'StateGoods',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $OuterID = null;
    /**
     * @var int
     */
    public $Duration = null;
    /**
     * @var string
     */
    public $ObjectName = null;
    /**
     * @var string[]
     */
    public $Ref = null;
    /**
     * @var string
     */
    public $Fraction = null;
    /**
     * @var string[]
     */
    public $BarCodes = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $GoodsGroup = null;
    /**
     * @var string
     */
    public $ModelName = null;
    /**
     * @var int
     */
    public $PLU = null;
    /**
     * @var string
     */
    public $GoodsFullName = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $ObjectOwner = null;
    /**
     * @var \Workabox\API\CodesSuppliersLine[]
     */
    public $CodesSuppliers = null;
    /**
     * @var string
     */
    public $TaxRate = null;
    /**
     * @var string
     */
    public $QRLink = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $RelatedGoods = null;
    /**
     * @var string
     */
    public $Modificators = null;
    /**
     * @var \Workabox\API\GoodsPricesLine[]
     */
    public $GoodsPrices = null;
    /**
     * @var \Workabox\API\GoodsImagesLine[]
     */
    public $GoodsImages = null;
    /**
     * @var string
     */
    public $UrlPreview = null;
    /**
     * @var \Workabox\API\OuterCodesLine[]
     */
    public $OuterCodes = null;
    /**
     * @var \Workabox\API\UserStringsLine[]
     */
    public $UserStrings = null;
    /**
     * @var \Workabox\API\UserLongStringsLine[]
     */
    public $UserLongStrings = null;
    /**
     * @var \Workabox\API\UserDatesLine[]
     */
    public $UserDates = null;
    /**
     * @var \Workabox\API\UserNumbersLine[]
     */
    public $UserNumbers = null;
    /**
     * @var \Workabox\API\UserCatalogsLine[]
     */
    public $UserCatalogs = null;
    /**
     * @var \Workabox\API\UserCatalogsViewLine[]
     */
    public $UserCatalogsView = null;
    /**
     * @var string
     */
    public $StateGoods = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['OuterID'])) {
                $this->OuterID = $vals['OuterID'];
            }
            if (isset($vals['Duration'])) {
                $this->Duration = $vals['Duration'];
            }
            if (isset($vals['ObjectName'])) {
                $this->ObjectName = $vals['ObjectName'];
            }
            if (isset($vals['Ref'])) {
                $this->Ref = $vals['Ref'];
            }
            if (isset($vals['Fraction'])) {
                $this->Fraction = $vals['Fraction'];
            }
            if (isset($vals['BarCodes'])) {
                $this->BarCodes = $vals['BarCodes'];
            }
            if (isset($vals['GoodsGroup'])) {
                $this->GoodsGroup = $vals['GoodsGroup'];
            }
            if (isset($vals['ModelName'])) {
                $this->ModelName = $vals['ModelName'];
            }
            if (isset($vals['PLU'])) {
                $this->PLU = $vals['PLU'];
            }
            if (isset($vals['GoodsFullName'])) {
                $this->GoodsFullName = $vals['GoodsFullName'];
            }
            if (isset($vals['ObjectOwner'])) {
                $this->ObjectOwner = $vals['ObjectOwner'];
            }
            if (isset($vals['CodesSuppliers'])) {
                $this->CodesSuppliers = $vals['CodesSuppliers'];
            }
            if (isset($vals['TaxRate'])) {
                $this->TaxRate = $vals['TaxRate'];
            }
            if (isset($vals['QRLink'])) {
                $this->QRLink = $vals['QRLink'];
            }
            if (isset($vals['RelatedGoods'])) {
                $this->RelatedGoods = $vals['RelatedGoods'];
            }
            if (isset($vals['Modificators'])) {
                $this->Modificators = $vals['Modificators'];
            }
            if (isset($vals['GoodsPrices'])) {
                $this->GoodsPrices = $vals['GoodsPrices'];
            }
            if (isset($vals['GoodsImages'])) {
                $this->GoodsImages = $vals['GoodsImages'];
            }
            if (isset($vals['UrlPreview'])) {
                $this->UrlPreview = $vals['UrlPreview'];
            }
            if (isset($vals['OuterCodes'])) {
                $this->OuterCodes = $vals['OuterCodes'];
            }
            if (isset($vals['UserStrings'])) {
                $this->UserStrings = $vals['UserStrings'];
            }
            if (isset($vals['UserLongStrings'])) {
                $this->UserLongStrings = $vals['UserLongStrings'];
            }
            if (isset($vals['UserDates'])) {
                $this->UserDates = $vals['UserDates'];
            }
            if (isset($vals['UserNumbers'])) {
                $this->UserNumbers = $vals['UserNumbers'];
            }
            if (isset($vals['UserCatalogs'])) {
                $this->UserCatalogs = $vals['UserCatalogs'];
            }
            if (isset($vals['UserCatalogsView'])) {
                $this->UserCatalogsView = $vals['UserCatalogsView'];
            }
            if (isset($vals['StateGoods'])) {
                $this->StateGoods = $vals['StateGoods'];
            }
        }
    }

    public function getName()
    {
        return 'Service';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->OuterID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->Duration);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ObjectName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->Ref = array();
                        $_size154 = 0;
                        $_etype157 = 0;
                        $xfer += $input->readListBegin($_etype157, $_size154);
                        for ($_i158 = 0; $_i158 < $_size154; ++$_i158) {
                            $elem159 = null;
                            $xfer += $input->readString($elem159);
                            $this->Ref []= $elem159;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Fraction);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->BarCodes = array();
                        $_size160 = 0;
                        $_etype163 = 0;
                        $xfer += $input->readListBegin($_etype163, $_size160);
                        for ($_i164 = 0; $_i164 < $_size160; ++$_i164) {
                            $elem165 = null;
                            $xfer += $input->readString($elem165);
                            $this->BarCodes []= $elem165;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->GoodsGroup = new \Workabox\API\ObjectID();
                        $xfer += $this->GoodsGroup->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ModelName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->PLU);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->GoodsFullName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRUCT) {
                        $this->ObjectOwner = new \Workabox\API\ObjectID();
                        $xfer += $this->ObjectOwner->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::LST) {
                        $this->CodesSuppliers = array();
                        $_size166 = 0;
                        $_etype169 = 0;
                        $xfer += $input->readListBegin($_etype169, $_size166);
                        for ($_i170 = 0; $_i170 < $_size166; ++$_i170) {
                            $elem171 = null;
                            $elem171 = new \Workabox\API\CodesSuppliersLine();
                            $xfer += $elem171->read($input);
                            $this->CodesSuppliers []= $elem171;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->TaxRate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->QRLink);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::LST) {
                        $this->RelatedGoods = array();
                        $_size172 = 0;
                        $_etype175 = 0;
                        $xfer += $input->readListBegin($_etype175, $_size172);
                        for ($_i176 = 0; $_i176 < $_size172; ++$_i176) {
                            $elem177 = null;
                            $elem177 = new \Workabox\API\ObjectID();
                            $xfer += $elem177->read($input);
                            $this->RelatedGoods []= $elem177;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Modificators);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::LST) {
                        $this->GoodsPrices = array();
                        $_size178 = 0;
                        $_etype181 = 0;
                        $xfer += $input->readListBegin($_etype181, $_size178);
                        for ($_i182 = 0; $_i182 < $_size178; ++$_i182) {
                            $elem183 = null;
                            $elem183 = new \Workabox\API\GoodsPricesLine();
                            $xfer += $elem183->read($input);
                            $this->GoodsPrices []= $elem183;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::LST) {
                        $this->GoodsImages = array();
                        $_size184 = 0;
                        $_etype187 = 0;
                        $xfer += $input->readListBegin($_etype187, $_size184);
                        for ($_i188 = 0; $_i188 < $_size184; ++$_i188) {
                            $elem189 = null;
                            $elem189 = new \Workabox\API\GoodsImagesLine();
                            $xfer += $elem189->read($input);
                            $this->GoodsImages []= $elem189;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->UrlPreview);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::LST) {
                        $this->OuterCodes = array();
                        $_size190 = 0;
                        $_etype193 = 0;
                        $xfer += $input->readListBegin($_etype193, $_size190);
                        for ($_i194 = 0; $_i194 < $_size190; ++$_i194) {
                            $elem195 = null;
                            $elem195 = new \Workabox\API\OuterCodesLine();
                            $xfer += $elem195->read($input);
                            $this->OuterCodes []= $elem195;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::LST) {
                        $this->UserStrings = array();
                        $_size196 = 0;
                        $_etype199 = 0;
                        $xfer += $input->readListBegin($_etype199, $_size196);
                        for ($_i200 = 0; $_i200 < $_size196; ++$_i200) {
                            $elem201 = null;
                            $elem201 = new \Workabox\API\UserStringsLine();
                            $xfer += $elem201->read($input);
                            $this->UserStrings []= $elem201;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::LST) {
                        $this->UserLongStrings = array();
                        $_size202 = 0;
                        $_etype205 = 0;
                        $xfer += $input->readListBegin($_etype205, $_size202);
                        for ($_i206 = 0; $_i206 < $_size202; ++$_i206) {
                            $elem207 = null;
                            $elem207 = new \Workabox\API\UserLongStringsLine();
                            $xfer += $elem207->read($input);
                            $this->UserLongStrings []= $elem207;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::LST) {
                        $this->UserDates = array();
                        $_size208 = 0;
                        $_etype211 = 0;
                        $xfer += $input->readListBegin($_etype211, $_size208);
                        for ($_i212 = 0; $_i212 < $_size208; ++$_i212) {
                            $elem213 = null;
                            $elem213 = new \Workabox\API\UserDatesLine();
                            $xfer += $elem213->read($input);
                            $this->UserDates []= $elem213;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::LST) {
                        $this->UserNumbers = array();
                        $_size214 = 0;
                        $_etype217 = 0;
                        $xfer += $input->readListBegin($_etype217, $_size214);
                        for ($_i218 = 0; $_i218 < $_size214; ++$_i218) {
                            $elem219 = null;
                            $elem219 = new \Workabox\API\UserNumbersLine();
                            $xfer += $elem219->read($input);
                            $this->UserNumbers []= $elem219;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::LST) {
                        $this->UserCatalogs = array();
                        $_size220 = 0;
                        $_etype223 = 0;
                        $xfer += $input->readListBegin($_etype223, $_size220);
                        for ($_i224 = 0; $_i224 < $_size220; ++$_i224) {
                            $elem225 = null;
                            $elem225 = new \Workabox\API\UserCatalogsLine();
                            $xfer += $elem225->read($input);
                            $this->UserCatalogs []= $elem225;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::LST) {
                        $this->UserCatalogsView = array();
                        $_size226 = 0;
                        $_etype229 = 0;
                        $xfer += $input->readListBegin($_etype229, $_size226);
                        for ($_i230 = 0; $_i230 < $_size226; ++$_i230) {
                            $elem231 = null;
                            $elem231 = new \Workabox\API\UserCatalogsViewLine();
                            $xfer += $elem231->read($input);
                            $this->UserCatalogsView []= $elem231;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->StateGoods);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Service');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterID !== null) {
            $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
            $xfer += $output->writeString($this->OuterID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Duration !== null) {
            $xfer += $output->writeFieldBegin('Duration', TType::I32, 3);
            $xfer += $output->writeI32($this->Duration);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectName !== null) {
            $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 4);
            $xfer += $output->writeString($this->ObjectName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Ref !== null) {
            if (!is_array($this->Ref)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Ref', TType::LST, 5);
            $output->writeListBegin(TType::STRING, count($this->Ref));
            foreach ($this->Ref as $iter232) {
                $xfer += $output->writeString($iter232);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Fraction !== null) {
            $xfer += $output->writeFieldBegin('Fraction', TType::STRING, 6);
            $xfer += $output->writeString($this->Fraction);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->BarCodes !== null) {
            if (!is_array($this->BarCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('BarCodes', TType::LST, 7);
            $output->writeListBegin(TType::STRING, count($this->BarCodes));
            foreach ($this->BarCodes as $iter233) {
                $xfer += $output->writeString($iter233);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsGroup !== null) {
            if (!is_object($this->GoodsGroup)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('GoodsGroup', TType::STRUCT, 8);
            $xfer += $this->GoodsGroup->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ModelName !== null) {
            $xfer += $output->writeFieldBegin('ModelName', TType::STRING, 9);
            $xfer += $output->writeString($this->ModelName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PLU !== null) {
            $xfer += $output->writeFieldBegin('PLU', TType::I32, 10);
            $xfer += $output->writeI32($this->PLU);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsFullName !== null) {
            $xfer += $output->writeFieldBegin('GoodsFullName', TType::STRING, 11);
            $xfer += $output->writeString($this->GoodsFullName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectOwner !== null) {
            if (!is_object($this->ObjectOwner)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 12);
            $xfer += $this->ObjectOwner->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CodesSuppliers !== null) {
            if (!is_array($this->CodesSuppliers)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('CodesSuppliers', TType::LST, 13);
            $output->writeListBegin(TType::STRUCT, count($this->CodesSuppliers));
            foreach ($this->CodesSuppliers as $iter234) {
                $xfer += $iter234->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->TaxRate !== null) {
            $xfer += $output->writeFieldBegin('TaxRate', TType::STRING, 14);
            $xfer += $output->writeString($this->TaxRate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->QRLink !== null) {
            $xfer += $output->writeFieldBegin('QRLink', TType::STRING, 15);
            $xfer += $output->writeString($this->QRLink);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->RelatedGoods !== null) {
            if (!is_array($this->RelatedGoods)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('RelatedGoods', TType::LST, 16);
            $output->writeListBegin(TType::STRUCT, count($this->RelatedGoods));
            foreach ($this->RelatedGoods as $iter235) {
                $xfer += $iter235->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Modificators !== null) {
            $xfer += $output->writeFieldBegin('Modificators', TType::STRING, 17);
            $xfer += $output->writeString($this->Modificators);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsPrices !== null) {
            if (!is_array($this->GoodsPrices)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('GoodsPrices', TType::LST, 18);
            $output->writeListBegin(TType::STRUCT, count($this->GoodsPrices));
            foreach ($this->GoodsPrices as $iter236) {
                $xfer += $iter236->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsImages !== null) {
            if (!is_array($this->GoodsImages)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('GoodsImages', TType::LST, 19);
            $output->writeListBegin(TType::STRUCT, count($this->GoodsImages));
            foreach ($this->GoodsImages as $iter237) {
                $xfer += $iter237->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UrlPreview !== null) {
            $xfer += $output->writeFieldBegin('UrlPreview', TType::STRING, 20);
            $xfer += $output->writeString($this->UrlPreview);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterCodes !== null) {
            if (!is_array($this->OuterCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 21);
            $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
            foreach ($this->OuterCodes as $iter238) {
                $xfer += $iter238->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserStrings !== null) {
            if (!is_array($this->UserStrings)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserStrings', TType::LST, 22);
            $output->writeListBegin(TType::STRUCT, count($this->UserStrings));
            foreach ($this->UserStrings as $iter239) {
                $xfer += $iter239->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserLongStrings !== null) {
            if (!is_array($this->UserLongStrings)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserLongStrings', TType::LST, 23);
            $output->writeListBegin(TType::STRUCT, count($this->UserLongStrings));
            foreach ($this->UserLongStrings as $iter240) {
                $xfer += $iter240->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserDates !== null) {
            if (!is_array($this->UserDates)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserDates', TType::LST, 24);
            $output->writeListBegin(TType::STRUCT, count($this->UserDates));
            foreach ($this->UserDates as $iter241) {
                $xfer += $iter241->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserNumbers !== null) {
            if (!is_array($this->UserNumbers)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserNumbers', TType::LST, 25);
            $output->writeListBegin(TType::STRUCT, count($this->UserNumbers));
            foreach ($this->UserNumbers as $iter242) {
                $xfer += $iter242->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserCatalogs !== null) {
            if (!is_array($this->UserCatalogs)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserCatalogs', TType::LST, 26);
            $output->writeListBegin(TType::STRUCT, count($this->UserCatalogs));
            foreach ($this->UserCatalogs as $iter243) {
                $xfer += $iter243->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserCatalogsView !== null) {
            if (!is_array($this->UserCatalogsView)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserCatalogsView', TType::LST, 27);
            $output->writeListBegin(TType::STRUCT, count($this->UserCatalogsView));
            foreach ($this->UserCatalogsView as $iter244) {
                $xfer += $iter244->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StateGoods !== null) {
            $xfer += $output->writeFieldBegin('StateGoods', TType::STRING, 28);
            $xfer += $output->writeString($this->StateGoods);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class MoneyMovementInFilter
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'OuterID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'ResponsibleReceiver',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        4 => array(
            'var' => 'PayType',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        5 => array(
            'var' => 'SummaVAT',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'PayDetails',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'OutSender',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        8 => array(
            'var' => 'MoneyMovementInReceiver',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        9 => array(
            'var' => 'ReceiverMoneyStorage',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        10 => array(
            'var' => 'Additional',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'DocumentSumm',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'GUID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'DocNumber',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'DocumentDate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'StateMoney',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $OuterID = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $ResponsibleReceiver = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $PayType = null;
    /**
     * @var string
     */
    public $SummaVAT = null;
    /**
     * @var string
     */
    public $PayDetails = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $OutSender = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $MoneyMovementInReceiver = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $ReceiverMoneyStorage = null;
    /**
     * @var string
     */
    public $Additional = null;
    /**
     * @var string
     */
    public $DocumentSumm = null;
    /**
     * @var string
     */
    public $GUID = null;
    /**
     * @var string
     */
    public $DocNumber = null;
    /**
     * @var string
     */
    public $DocumentDate = null;
    /**
     * @var string[]
     */
    public $StateMoney = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['OuterID'])) {
                $this->OuterID = $vals['OuterID'];
            }
            if (isset($vals['ResponsibleReceiver'])) {
                $this->ResponsibleReceiver = $vals['ResponsibleReceiver'];
            }
            if (isset($vals['PayType'])) {
                $this->PayType = $vals['PayType'];
            }
            if (isset($vals['SummaVAT'])) {
                $this->SummaVAT = $vals['SummaVAT'];
            }
            if (isset($vals['PayDetails'])) {
                $this->PayDetails = $vals['PayDetails'];
            }
            if (isset($vals['OutSender'])) {
                $this->OutSender = $vals['OutSender'];
            }
            if (isset($vals['MoneyMovementInReceiver'])) {
                $this->MoneyMovementInReceiver = $vals['MoneyMovementInReceiver'];
            }
            if (isset($vals['ReceiverMoneyStorage'])) {
                $this->ReceiverMoneyStorage = $vals['ReceiverMoneyStorage'];
            }
            if (isset($vals['Additional'])) {
                $this->Additional = $vals['Additional'];
            }
            if (isset($vals['DocumentSumm'])) {
                $this->DocumentSumm = $vals['DocumentSumm'];
            }
            if (isset($vals['GUID'])) {
                $this->GUID = $vals['GUID'];
            }
            if (isset($vals['DocNumber'])) {
                $this->DocNumber = $vals['DocNumber'];
            }
            if (isset($vals['DocumentDate'])) {
                $this->DocumentDate = $vals['DocumentDate'];
            }
            if (isset($vals['StateMoney'])) {
                $this->StateMoney = $vals['StateMoney'];
            }
        }
    }

    public function getName()
    {
        return 'MoneyMovementInFilter';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->OuterID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->ResponsibleReceiver = new \Workabox\API\ObjectID();
                        $xfer += $this->ResponsibleReceiver->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->PayType = new \Workabox\API\ObjectID();
                        $xfer += $this->PayType->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->SummaVAT);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->PayDetails);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->OutSender = new \Workabox\API\ObjectID();
                        $xfer += $this->OutSender->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRUCT) {
                        $this->MoneyMovementInReceiver = new \Workabox\API\ObjectID();
                        $xfer += $this->MoneyMovementInReceiver->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRUCT) {
                        $this->ReceiverMoneyStorage = new \Workabox\API\ObjectID();
                        $xfer += $this->ReceiverMoneyStorage->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Additional);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->DocumentSumm);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->GUID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->DocNumber);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->DocumentDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::LST) {
                        $this->StateMoney = array();
                        $_size882 = 0;
                        $_etype885 = 0;
                        $xfer += $input->readListBegin($_etype885, $_size882);
                        for ($_i886 = 0; $_i886 < $_size882; ++$_i886) {
                            $elem887 = null;
                            $xfer += $input->readString($elem887);
                            $this->StateMoney []= $elem887;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('MoneyMovementInFilter');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterID !== null) {
            $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
            $xfer += $output->writeString($this->OuterID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ResponsibleReceiver !== null) {
            if (!is_object($this->ResponsibleReceiver)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ResponsibleReceiver', TType::STRUCT, 3);
            $xfer += $this->ResponsibleReceiver->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PayType !== null) {
            if (!is_object($this->PayType)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('PayType', TType::STRUCT, 4);
            $xfer += $this->PayType->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SummaVAT !== null) {
            $xfer += $output->writeFieldBegin('SummaVAT', TType::STRING, 5);
            $xfer += $output->writeString($this->SummaVAT);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PayDetails !== null) {
            $xfer += $output->writeFieldBegin('PayDetails', TType::STRING, 6);
            $xfer += $output->writeString($this->PayDetails);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OutSender !== null) {
            if (!is_object($this->OutSender)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('OutSender', TType::STRUCT, 7);
            $xfer += $this->OutSender->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MoneyMovementInReceiver !== null) {
            if (!is_object($this->MoneyMovementInReceiver)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('MoneyMovementInReceiver', TType::STRUCT, 8);
            $xfer += $this->MoneyMovementInReceiver->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ReceiverMoneyStorage !== null) {
            if (!is_object($this->ReceiverMoneyStorage)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ReceiverMoneyStorage', TType::STRUCT, 9);
            $xfer += $this->ReceiverMoneyStorage->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Additional !== null) {
            $xfer += $output->writeFieldBegin('Additional', TType::STRING, 10);
            $xfer += $output->writeString($this->Additional);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->DocumentSumm !== null) {
            $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 11);
            $xfer += $output->writeString($this->DocumentSumm);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GUID !== null) {
            $xfer += $output->writeFieldBegin('GUID', TType::STRING, 12);
            $xfer += $output->writeString($this->GUID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->DocNumber !== null) {
            $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 13);
            $xfer += $output->writeString($this->DocNumber);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->DocumentDate !== null) {
            $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 14);
            $xfer += $output->writeString($this->DocumentDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StateMoney !== null) {
            if (!is_array($this->StateMoney)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('StateMoney', TType::LST, 15);
            $output->writeListBegin(TType::STRING, count($this->StateMoney));
            foreach ($this->StateMoney as $iter888) {
                $xfer += $output->writeString($iter888);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class Exceptions {
  const AuthenticationFail = 0;
  const ApplicationException = 1;
  const Permissions = 2;
  const Protocol = 3;
  const RequiredData = 4;
  static public $__names = array(
    0 => 'AuthenticationFail',
    1 => 'ApplicationException',
    2 => 'Permissions',
    3 => 'Protocol',
    4 => 'RequiredData',
  );
}

final class DataTypes {
  const StringType = 0;
  const NumericType = 1;
  const Numeric2Type = 2;
  const Numeric3Type = 3;
  const SystemEnumType = 4;
  const DateType = 5;
  const TextType = 6;
  const Catalog = 7;
  static public $__names = array(
    0 => 'StringType',
    1 => 'NumericType',
    2 => 'Numeric2Type',
    3 => 'Numeric3Type',
    4 => 'SystemEnumType',
    5 => 'DateType',
    6 => 'TextType',
    7 => 'Catalog',
  );
}

class APIException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ExceptionType = null;
  /**
   * @var string
   */
  public $Text = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ExceptionType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'Text',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ExceptionType'])) {
        $this->ExceptionType = $vals['ExceptionType'];
      }
      if (isset($vals['Text'])) {
        $this->Text = $vals['Text'];
      }
    }
  }

  public function getName() {
    return 'APIException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ExceptionType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIException');
    if ($this->ExceptionType !== null) {
      $xfer += $output->writeFieldBegin('ExceptionType', TType::I32, 1);
      $xfer += $output->writeI32($this->ExceptionType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Text !== null) {
      $xfer += $output->writeFieldBegin('Text', TType::STRING, 2);
      $xfer += $output->writeString($this->Text);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsProperty {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $Name = null;
  /**
   * @var int
   */
  public $PropertyType = null;
  /**
   * @var int
   */
  public $Catalog = null;
  /**
   * @var bool
   */
  public $IsRequired = null;
  /**
   * @var bool
   */
  public $IsShow = null;
  /**
   * @var bool
   */
  public $IsFilter = null;
  /**
   * @var bool
   */
  public $IsExtended = null;
  /**
   * @var bool
   */
  public $IsModificator = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I16,
          ),
        2 => array(
          'var' => 'Name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'PropertyType',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'Catalog',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'IsRequired',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'IsShow',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'IsFilter',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'IsExtended',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'IsModificator',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['Name'])) {
        $this->Name = $vals['Name'];
      }
      if (isset($vals['PropertyType'])) {
        $this->PropertyType = $vals['PropertyType'];
      }
      if (isset($vals['Catalog'])) {
        $this->Catalog = $vals['Catalog'];
      }
      if (isset($vals['IsRequired'])) {
        $this->IsRequired = $vals['IsRequired'];
      }
      if (isset($vals['IsShow'])) {
        $this->IsShow = $vals['IsShow'];
      }
      if (isset($vals['IsFilter'])) {
        $this->IsFilter = $vals['IsFilter'];
      }
      if (isset($vals['IsExtended'])) {
        $this->IsExtended = $vals['IsExtended'];
      }
      if (isset($vals['IsModificator'])) {
        $this->IsModificator = $vals['IsModificator'];
      }
    }
  }

  public function getName() {
    return 'GoodsProperty';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PropertyType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Catalog);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsRequired);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsShow);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsFilter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsExtended);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsModificator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsProperty');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I16, 1);
      $xfer += $output->writeI16($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Name !== null) {
      $xfer += $output->writeFieldBegin('Name', TType::STRING, 2);
      $xfer += $output->writeString($this->Name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PropertyType !== null) {
      $xfer += $output->writeFieldBegin('PropertyType', TType::I32, 3);
      $xfer += $output->writeI32($this->PropertyType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Catalog !== null) {
      $xfer += $output->writeFieldBegin('Catalog', TType::I32, 4);
      $xfer += $output->writeI32($this->Catalog);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsRequired !== null) {
      $xfer += $output->writeFieldBegin('IsRequired', TType::BOOL, 5);
      $xfer += $output->writeBool($this->IsRequired);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsShow !== null) {
      $xfer += $output->writeFieldBegin('IsShow', TType::BOOL, 6);
      $xfer += $output->writeBool($this->IsShow);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsFilter !== null) {
      $xfer += $output->writeFieldBegin('IsFilter', TType::BOOL, 7);
      $xfer += $output->writeBool($this->IsFilter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsExtended !== null) {
      $xfer += $output->writeFieldBegin('IsExtended', TType::BOOL, 8);
      $xfer += $output->writeBool($this->IsExtended);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsModificator !== null) {
      $xfer += $output->writeFieldBegin('IsModificator', TType::BOOL, 9);
      $xfer += $output->writeBool($this->IsModificator);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ObjectID {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
    }
  }

  public function getName() {
    return 'ObjectID';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ObjectID');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CatalogEntryLine {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var int
   */
  public $CatalogID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'CatalogID',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['CatalogID'])) {
        $this->CatalogID = $vals['CatalogID'];
      }
    }
  }

  public function getName() {
    return 'CatalogEntryLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->CatalogID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CatalogEntryLine');
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 1);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CatalogID !== null) {
      $xfer += $output->writeFieldBegin('CatalogID', TType::I32, 2);
      $xfer += $output->writeI32($this->CatalogID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OuterCodesLine {
  static $_TSPEC;

  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $OuterPlugin = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'OuterPlugin',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['OuterPlugin'])) {
        $this->OuterPlugin = $vals['OuterPlugin'];
      }
    }
  }

  public function getName() {
    return 'OuterCodesLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterPlugin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OuterCodesLine');
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 1);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterPlugin !== null) {
      $xfer += $output->writeFieldBegin('OuterPlugin', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterPlugin);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserCatalog {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\CatalogEntryLine[]
   */
  public $CatalogEntry = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'CatalogEntry',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\CatalogEntryLine',
            ),
          ),
        4 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        6 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['CatalogEntry'])) {
        $this->CatalogEntry = $vals['CatalogEntry'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'UserCatalog';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->CatalogEntry = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Workabox\API\CatalogEntryLine();
              $xfer += $elem5->read($input);
              $this->CatalogEntry []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem11->read($input);
              $this->OuterCodes []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserCatalog');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CatalogEntry !== null) {
      if (!is_array($this->CatalogEntry)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CatalogEntry', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->CatalogEntry));
        {
          foreach ($this->CatalogEntry as $iter12)
          {
            $xfer += $iter12->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 4);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 6);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserCatalogFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string[]
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'UserCatalogFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $xfer += $input->readString($elem19);
              $this->StateMain []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserCatalogFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter20)
          {
            $xfer += $output->writeString($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CodesSuppliersLine {
  static $_TSPEC;

  /**
   * @var string
   */
  public $SupplierGoodsCode = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Supplier = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'SupplierGoodsCode',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'Supplier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['SupplierGoodsCode'])) {
        $this->SupplierGoodsCode = $vals['SupplierGoodsCode'];
      }
      if (isset($vals['Supplier'])) {
        $this->Supplier = $vals['Supplier'];
      }
    }
  }

  public function getName() {
    return 'CodesSuppliersLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SupplierGoodsCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->Supplier = new \Workabox\API\ObjectID();
            $xfer += $this->Supplier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CodesSuppliersLine');
    if ($this->SupplierGoodsCode !== null) {
      $xfer += $output->writeFieldBegin('SupplierGoodsCode', TType::STRING, 1);
      $xfer += $output->writeString($this->SupplierGoodsCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Supplier !== null) {
      if (!is_object($this->Supplier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Supplier', TType::STRUCT, 2);
      $xfer += $this->Supplier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsPricesLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $Rest = null;
  /**
   * @var double
   */
  public $Price = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $PricesOwner = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Rest',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'Price',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'PricesOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Rest'])) {
        $this->Rest = $vals['Rest'];
      }
      if (isset($vals['Price'])) {
        $this->Price = $vals['Price'];
      }
      if (isset($vals['PricesOwner'])) {
        $this->PricesOwner = $vals['PricesOwner'];
      }
    }
  }

  public function getName() {
    return 'GoodsPricesLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Rest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->PricesOwner = new \Workabox\API\ObjectID();
            $xfer += $this->PricesOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsPricesLine');
    if ($this->Rest !== null) {
      $xfer += $output->writeFieldBegin('Rest', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->Rest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Price !== null) {
      $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->Price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PricesOwner !== null) {
      if (!is_object($this->PricesOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('PricesOwner', TType::STRUCT, 3);
      $xfer += $this->PricesOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsImagesLine {
  static $_TSPEC;

  /**
   * @var string
   */
  public $UrlPreview = null;
  /**
   * @var string
   */
  public $UrlImage = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var int
   */
  public $LineCode = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'UrlPreview',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'UrlImage',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'LineCode',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['UrlPreview'])) {
        $this->UrlPreview = $vals['UrlPreview'];
      }
      if (isset($vals['UrlImage'])) {
        $this->UrlImage = $vals['UrlImage'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['LineCode'])) {
        $this->LineCode = $vals['LineCode'];
      }
    }
  }

  public function getName() {
    return 'GoodsImagesLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->UrlPreview);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->UrlImage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->LineCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsImagesLine');
    if ($this->UrlPreview !== null) {
      $xfer += $output->writeFieldBegin('UrlPreview', TType::STRING, 1);
      $xfer += $output->writeString($this->UrlPreview);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UrlImage !== null) {
      $xfer += $output->writeFieldBegin('UrlImage', TType::STRING, 2);
      $xfer += $output->writeString($this->UrlImage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 3);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 4);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LineCode !== null) {
      $xfer += $output->writeFieldBegin('LineCode', TType::I32, 5);
      $xfer += $output->writeI32($this->LineCode);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserStringsLine {
  static $_TSPEC;

  /**
   * @var string
   */
  public $String = null;
  /**
   * @var int
   */
  public $UserPropertyId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'String',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'UserPropertyId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['String'])) {
        $this->String = $vals['String'];
      }
      if (isset($vals['UserPropertyId'])) {
        $this->UserPropertyId = $vals['UserPropertyId'];
      }
    }
  }

  public function getName() {
    return 'UserStringsLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->String);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->UserPropertyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserStringsLine');
    if ($this->String !== null) {
      $xfer += $output->writeFieldBegin('String', TType::STRING, 1);
      $xfer += $output->writeString($this->String);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserPropertyId !== null) {
      $xfer += $output->writeFieldBegin('UserPropertyId', TType::I32, 2);
      $xfer += $output->writeI32($this->UserPropertyId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserLongStringsLine {
  static $_TSPEC;

  /**
   * @var string
   */
  public $LongString = null;
  /**
   * @var int
   */
  public $UserPropertyId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'LongString',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'UserPropertyId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['LongString'])) {
        $this->LongString = $vals['LongString'];
      }
      if (isset($vals['UserPropertyId'])) {
        $this->UserPropertyId = $vals['UserPropertyId'];
      }
    }
  }

  public function getName() {
    return 'UserLongStringsLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->LongString);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->UserPropertyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserLongStringsLine');
    if ($this->LongString !== null) {
      $xfer += $output->writeFieldBegin('LongString', TType::STRING, 1);
      $xfer += $output->writeString($this->LongString);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserPropertyId !== null) {
      $xfer += $output->writeFieldBegin('UserPropertyId', TType::I32, 2);
      $xfer += $output->writeI32($this->UserPropertyId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserDatesLine {
  static $_TSPEC;

  /**
   * @var string
   */
  public $DateAndTime = null;
  /**
   * @var int
   */
  public $UserPropertyId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'DateAndTime',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'UserPropertyId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['DateAndTime'])) {
        $this->DateAndTime = $vals['DateAndTime'];
      }
      if (isset($vals['UserPropertyId'])) {
        $this->UserPropertyId = $vals['UserPropertyId'];
      }
    }
  }

  public function getName() {
    return 'UserDatesLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DateAndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->UserPropertyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserDatesLine');
    if ($this->DateAndTime !== null) {
      $xfer += $output->writeFieldBegin('DateAndTime', TType::STRING, 1);
      $xfer += $output->writeString($this->DateAndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserPropertyId !== null) {
      $xfer += $output->writeFieldBegin('UserPropertyId', TType::I32, 2);
      $xfer += $output->writeI32($this->UserPropertyId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserNumbersLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $Numeric = null;
  /**
   * @var int
   */
  public $UserPropertyId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Numeric',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'UserPropertyId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Numeric'])) {
        $this->Numeric = $vals['Numeric'];
      }
      if (isset($vals['UserPropertyId'])) {
        $this->UserPropertyId = $vals['UserPropertyId'];
      }
    }
  }

  public function getName() {
    return 'UserNumbersLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Numeric);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->UserPropertyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserNumbersLine');
    if ($this->Numeric !== null) {
      $xfer += $output->writeFieldBegin('Numeric', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->Numeric);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserPropertyId !== null) {
      $xfer += $output->writeFieldBegin('UserPropertyId', TType::I32, 2);
      $xfer += $output->writeI32($this->UserPropertyId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserCatalogsLine {
  static $_TSPEC;

  /**
   * @var int
   */
  public $CatalogID = null;
  /**
   * @var int
   */
  public $UserPropertyId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'CatalogID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'UserPropertyId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['CatalogID'])) {
        $this->CatalogID = $vals['CatalogID'];
      }
      if (isset($vals['UserPropertyId'])) {
        $this->UserPropertyId = $vals['UserPropertyId'];
      }
    }
  }

  public function getName() {
    return 'UserCatalogsLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->CatalogID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->UserPropertyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserCatalogsLine');
    if ($this->CatalogID !== null) {
      $xfer += $output->writeFieldBegin('CatalogID', TType::I32, 1);
      $xfer += $output->writeI32($this->CatalogID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserPropertyId !== null) {
      $xfer += $output->writeFieldBegin('UserPropertyId', TType::I32, 2);
      $xfer += $output->writeI32($this->UserPropertyId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class UserCatalogsViewLine {
  static $_TSPEC;

  /**
   * @var int
   */
  public $CatalogID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var int
   */
  public $UserPropertyId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'CatalogID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'UserPropertyId',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['CatalogID'])) {
        $this->CatalogID = $vals['CatalogID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['UserPropertyId'])) {
        $this->UserPropertyId = $vals['UserPropertyId'];
      }
    }
  }

  public function getName() {
    return 'UserCatalogsViewLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->CatalogID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->UserPropertyId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserCatalogsViewLine');
    if ($this->CatalogID !== null) {
      $xfer += $output->writeFieldBegin('CatalogID', TType::I32, 1);
      $xfer += $output->writeI32($this->CatalogID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 2);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserPropertyId !== null) {
      $xfer += $output->writeFieldBegin('UserPropertyId', TType::I32, 3);
      $xfer += $output->writeI32($this->UserPropertyId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Goods {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var double
   */
  public $MinQty = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string[]
   */
  public $Ref = null;
  /**
   * @var string
   */
  public $Fraction = null;
  /**
   * @var string[]
   */
  public $BarCodes = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $GoodsGroup = null;
  /**
   * @var string
   */
  public $ModelName = null;
  /**
   * @var int
   */
  public $PLU = null;
  /**
   * @var string
   */
  public $GoodsFullName = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var \Workabox\API\CodesSuppliersLine[]
   */
  public $CodesSuppliers = null;
  /**
   * @var string
   */
  public $TaxRate = null;
  /**
   * @var string
   */
  public $QRLink = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $RelatedGoods = null;
  /**
   * @var string
   */
  public $Modificators = null;
  /**
   * @var \Workabox\API\GoodsPricesLine[]
   */
  public $GoodsPrices = null;
  /**
   * @var \Workabox\API\GoodsImagesLine[]
   */
  public $GoodsImages = null;
  /**
   * @var string
   */
  public $UrlPreview = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var \Workabox\API\UserStringsLine[]
   */
  public $UserStrings = null;
  /**
   * @var \Workabox\API\UserLongStringsLine[]
   */
  public $UserLongStrings = null;
  /**
   * @var \Workabox\API\UserDatesLine[]
   */
  public $UserDates = null;
  /**
   * @var \Workabox\API\UserNumbersLine[]
   */
  public $UserNumbers = null;
  /**
   * @var \Workabox\API\UserCatalogsLine[]
   */
  public $UserCatalogs = null;
  /**
   * @var \Workabox\API\UserCatalogsViewLine[]
   */
  public $UserCatalogsView = null;
  /**
   * @var string
   */
  public $StateGoods = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $GoodsModelsSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $AnalogsGoodsSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $GoodsModelsMaster = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $AnalogsGoodsMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'MinQty',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'Ref',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'Fraction',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'BarCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        8 => array(
          'var' => 'GoodsGroup',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'ModelName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'PLU',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'GoodsFullName',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        13 => array(
          'var' => 'CodesSuppliers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\CodesSuppliersLine',
            ),
          ),
        14 => array(
          'var' => 'TaxRate',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'QRLink',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'RelatedGoods',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        17 => array(
          'var' => 'Modificators',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'GoodsPrices',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsPricesLine',
            ),
          ),
        19 => array(
          'var' => 'GoodsImages',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsImagesLine',
            ),
          ),
        20 => array(
          'var' => 'UrlPreview',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        22 => array(
          'var' => 'UserStrings',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserStringsLine',
            ),
          ),
        23 => array(
          'var' => 'UserLongStrings',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserLongStringsLine',
            ),
          ),
        24 => array(
          'var' => 'UserDates',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserDatesLine',
            ),
          ),
        25 => array(
          'var' => 'UserNumbers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserNumbersLine',
            ),
          ),
        26 => array(
          'var' => 'UserCatalogs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserCatalogsLine',
            ),
          ),
        27 => array(
          'var' => 'UserCatalogsView',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserCatalogsViewLine',
            ),
          ),
        28 => array(
          'var' => 'StateGoods',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'GoodsModelsSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        30 => array(
          'var' => 'AnalogsGoodsSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        31 => array(
          'var' => 'GoodsModelsMaster',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        32 => array(
          'var' => 'AnalogsGoodsMaster',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['MinQty'])) {
        $this->MinQty = $vals['MinQty'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['Ref'])) {
        $this->Ref = $vals['Ref'];
      }
      if (isset($vals['Fraction'])) {
        $this->Fraction = $vals['Fraction'];
      }
      if (isset($vals['BarCodes'])) {
        $this->BarCodes = $vals['BarCodes'];
      }
      if (isset($vals['GoodsGroup'])) {
        $this->GoodsGroup = $vals['GoodsGroup'];
      }
      if (isset($vals['ModelName'])) {
        $this->ModelName = $vals['ModelName'];
      }
      if (isset($vals['PLU'])) {
        $this->PLU = $vals['PLU'];
      }
      if (isset($vals['GoodsFullName'])) {
        $this->GoodsFullName = $vals['GoodsFullName'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['CodesSuppliers'])) {
        $this->CodesSuppliers = $vals['CodesSuppliers'];
      }
      if (isset($vals['TaxRate'])) {
        $this->TaxRate = $vals['TaxRate'];
      }
      if (isset($vals['QRLink'])) {
        $this->QRLink = $vals['QRLink'];
      }
      if (isset($vals['RelatedGoods'])) {
        $this->RelatedGoods = $vals['RelatedGoods'];
      }
      if (isset($vals['Modificators'])) {
        $this->Modificators = $vals['Modificators'];
      }
      if (isset($vals['GoodsPrices'])) {
        $this->GoodsPrices = $vals['GoodsPrices'];
      }
      if (isset($vals['GoodsImages'])) {
        $this->GoodsImages = $vals['GoodsImages'];
      }
      if (isset($vals['UrlPreview'])) {
        $this->UrlPreview = $vals['UrlPreview'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['UserStrings'])) {
        $this->UserStrings = $vals['UserStrings'];
      }
      if (isset($vals['UserLongStrings'])) {
        $this->UserLongStrings = $vals['UserLongStrings'];
      }
      if (isset($vals['UserDates'])) {
        $this->UserDates = $vals['UserDates'];
      }
      if (isset($vals['UserNumbers'])) {
        $this->UserNumbers = $vals['UserNumbers'];
      }
      if (isset($vals['UserCatalogs'])) {
        $this->UserCatalogs = $vals['UserCatalogs'];
      }
      if (isset($vals['UserCatalogsView'])) {
        $this->UserCatalogsView = $vals['UserCatalogsView'];
      }
      if (isset($vals['StateGoods'])) {
        $this->StateGoods = $vals['StateGoods'];
      }
      if (isset($vals['GoodsModelsSlave'])) {
        $this->GoodsModelsSlave = $vals['GoodsModelsSlave'];
      }
      if (isset($vals['AnalogsGoodsSlave'])) {
        $this->AnalogsGoodsSlave = $vals['AnalogsGoodsSlave'];
      }
      if (isset($vals['GoodsModelsMaster'])) {
        $this->GoodsModelsMaster = $vals['GoodsModelsMaster'];
      }
      if (isset($vals['AnalogsGoodsMaster'])) {
        $this->AnalogsGoodsMaster = $vals['AnalogsGoodsMaster'];
      }
    }
  }

  public function getName() {
    return 'Goods';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->MinQty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->Ref = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $xfer += $input->readString($elem26);
              $this->Ref []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Fraction);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->BarCodes = array();
            $_size27 = 0;
            $_etype30 = 0;
            $xfer += $input->readListBegin($_etype30, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $elem32 = null;
              $xfer += $input->readString($elem32);
              $this->BarCodes []= $elem32;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->GoodsGroup = new \Workabox\API\ObjectID();
            $xfer += $this->GoodsGroup->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ModelName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PLU);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GoodsFullName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->CodesSuppliers = array();
            $_size33 = 0;
            $_etype36 = 0;
            $xfer += $input->readListBegin($_etype36, $_size33);
            for ($_i37 = 0; $_i37 < $_size33; ++$_i37)
            {
              $elem38 = null;
              $elem38 = new \Workabox\API\CodesSuppliersLine();
              $xfer += $elem38->read($input);
              $this->CodesSuppliers []= $elem38;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TaxRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->QRLink);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::LST) {
            $this->RelatedGoods = array();
            $_size39 = 0;
            $_etype42 = 0;
            $xfer += $input->readListBegin($_etype42, $_size39);
            for ($_i43 = 0; $_i43 < $_size39; ++$_i43)
            {
              $elem44 = null;
              $elem44 = new \Workabox\API\ObjectID();
              $xfer += $elem44->read($input);
              $this->RelatedGoods []= $elem44;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Modificators);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::LST) {
            $this->GoodsPrices = array();
            $_size45 = 0;
            $_etype48 = 0;
            $xfer += $input->readListBegin($_etype48, $_size45);
            for ($_i49 = 0; $_i49 < $_size45; ++$_i49)
            {
              $elem50 = null;
              $elem50 = new \Workabox\API\GoodsPricesLine();
              $xfer += $elem50->read($input);
              $this->GoodsPrices []= $elem50;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->GoodsImages = array();
            $_size51 = 0;
            $_etype54 = 0;
            $xfer += $input->readListBegin($_etype54, $_size51);
            for ($_i55 = 0; $_i55 < $_size51; ++$_i55)
            {
              $elem56 = null;
              $elem56 = new \Workabox\API\GoodsImagesLine();
              $xfer += $elem56->read($input);
              $this->GoodsImages []= $elem56;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->UrlPreview);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size57 = 0;
            $_etype60 = 0;
            $xfer += $input->readListBegin($_etype60, $_size57);
            for ($_i61 = 0; $_i61 < $_size57; ++$_i61)
            {
              $elem62 = null;
              $elem62 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem62->read($input);
              $this->OuterCodes []= $elem62;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::LST) {
            $this->UserStrings = array();
            $_size63 = 0;
            $_etype66 = 0;
            $xfer += $input->readListBegin($_etype66, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $elem68 = null;
              $elem68 = new \Workabox\API\UserStringsLine();
              $xfer += $elem68->read($input);
              $this->UserStrings []= $elem68;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::LST) {
            $this->UserLongStrings = array();
            $_size69 = 0;
            $_etype72 = 0;
            $xfer += $input->readListBegin($_etype72, $_size69);
            for ($_i73 = 0; $_i73 < $_size69; ++$_i73)
            {
              $elem74 = null;
              $elem74 = new \Workabox\API\UserLongStringsLine();
              $xfer += $elem74->read($input);
              $this->UserLongStrings []= $elem74;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::LST) {
            $this->UserDates = array();
            $_size75 = 0;
            $_etype78 = 0;
            $xfer += $input->readListBegin($_etype78, $_size75);
            for ($_i79 = 0; $_i79 < $_size75; ++$_i79)
            {
              $elem80 = null;
              $elem80 = new \Workabox\API\UserDatesLine();
              $xfer += $elem80->read($input);
              $this->UserDates []= $elem80;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::LST) {
            $this->UserNumbers = array();
            $_size81 = 0;
            $_etype84 = 0;
            $xfer += $input->readListBegin($_etype84, $_size81);
            for ($_i85 = 0; $_i85 < $_size81; ++$_i85)
            {
              $elem86 = null;
              $elem86 = new \Workabox\API\UserNumbersLine();
              $xfer += $elem86->read($input);
              $this->UserNumbers []= $elem86;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::LST) {
            $this->UserCatalogs = array();
            $_size87 = 0;
            $_etype90 = 0;
            $xfer += $input->readListBegin($_etype90, $_size87);
            for ($_i91 = 0; $_i91 < $_size87; ++$_i91)
            {
              $elem92 = null;
              $elem92 = new \Workabox\API\UserCatalogsLine();
              $xfer += $elem92->read($input);
              $this->UserCatalogs []= $elem92;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::LST) {
            $this->UserCatalogsView = array();
            $_size93 = 0;
            $_etype96 = 0;
            $xfer += $input->readListBegin($_etype96, $_size93);
            for ($_i97 = 0; $_i97 < $_size93; ++$_i97)
            {
              $elem98 = null;
              $elem98 = new \Workabox\API\UserCatalogsViewLine();
              $xfer += $elem98->read($input);
              $this->UserCatalogsView []= $elem98;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateGoods);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::LST) {
            $this->GoodsModelsSlave = array();
            $_size99 = 0;
            $_etype102 = 0;
            $xfer += $input->readListBegin($_etype102, $_size99);
            for ($_i103 = 0; $_i103 < $_size99; ++$_i103)
            {
              $elem104 = null;
              $elem104 = new \Workabox\API\ObjectID();
              $xfer += $elem104->read($input);
              $this->GoodsModelsSlave []= $elem104;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::LST) {
            $this->AnalogsGoodsSlave = array();
            $_size105 = 0;
            $_etype108 = 0;
            $xfer += $input->readListBegin($_etype108, $_size105);
            for ($_i109 = 0; $_i109 < $_size105; ++$_i109)
            {
              $elem110 = null;
              $elem110 = new \Workabox\API\ObjectID();
              $xfer += $elem110->read($input);
              $this->AnalogsGoodsSlave []= $elem110;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::LST) {
            $this->GoodsModelsMaster = array();
            $_size111 = 0;
            $_etype114 = 0;
            $xfer += $input->readListBegin($_etype114, $_size111);
            for ($_i115 = 0; $_i115 < $_size111; ++$_i115)
            {
              $elem116 = null;
              $elem116 = new \Workabox\API\ObjectID();
              $xfer += $elem116->read($input);
              $this->GoodsModelsMaster []= $elem116;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::LST) {
            $this->AnalogsGoodsMaster = array();
            $_size117 = 0;
            $_etype120 = 0;
            $xfer += $input->readListBegin($_etype120, $_size117);
            for ($_i121 = 0; $_i121 < $_size117; ++$_i121)
            {
              $elem122 = null;
              $elem122 = new \Workabox\API\ObjectID();
              $xfer += $elem122->read($input);
              $this->AnalogsGoodsMaster []= $elem122;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Goods');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MinQty !== null) {
      $xfer += $output->writeFieldBegin('MinQty', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->MinQty);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 4);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Ref !== null) {
      if (!is_array($this->Ref)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Ref', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->Ref));
        {
          foreach ($this->Ref as $iter123)
          {
            $xfer += $output->writeString($iter123);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Fraction !== null) {
      $xfer += $output->writeFieldBegin('Fraction', TType::STRING, 6);
      $xfer += $output->writeString($this->Fraction);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BarCodes !== null) {
      if (!is_array($this->BarCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('BarCodes', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRING, count($this->BarCodes));
        {
          foreach ($this->BarCodes as $iter124)
          {
            $xfer += $output->writeString($iter124);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsGroup !== null) {
      if (!is_object($this->GoodsGroup)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsGroup', TType::STRUCT, 8);
      $xfer += $this->GoodsGroup->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ModelName !== null) {
      $xfer += $output->writeFieldBegin('ModelName', TType::STRING, 9);
      $xfer += $output->writeString($this->ModelName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PLU !== null) {
      $xfer += $output->writeFieldBegin('PLU', TType::I32, 10);
      $xfer += $output->writeI32($this->PLU);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsFullName !== null) {
      $xfer += $output->writeFieldBegin('GoodsFullName', TType::STRING, 11);
      $xfer += $output->writeString($this->GoodsFullName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 12);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CodesSuppliers !== null) {
      if (!is_array($this->CodesSuppliers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CodesSuppliers', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRUCT, count($this->CodesSuppliers));
        {
          foreach ($this->CodesSuppliers as $iter125)
          {
            $xfer += $iter125->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TaxRate !== null) {
      $xfer += $output->writeFieldBegin('TaxRate', TType::STRING, 14);
      $xfer += $output->writeString($this->TaxRate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->QRLink !== null) {
      $xfer += $output->writeFieldBegin('QRLink', TType::STRING, 15);
      $xfer += $output->writeString($this->QRLink);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RelatedGoods !== null) {
      if (!is_array($this->RelatedGoods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RelatedGoods', TType::LST, 16);
      {
        $output->writeListBegin(TType::STRUCT, count($this->RelatedGoods));
        {
          foreach ($this->RelatedGoods as $iter126)
          {
            $xfer += $iter126->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Modificators !== null) {
      $xfer += $output->writeFieldBegin('Modificators', TType::STRING, 17);
      $xfer += $output->writeString($this->Modificators);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsPrices !== null) {
      if (!is_array($this->GoodsPrices)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsPrices', TType::LST, 18);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsPrices));
        {
          foreach ($this->GoodsPrices as $iter127)
          {
            $xfer += $iter127->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsImages !== null) {
      if (!is_array($this->GoodsImages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsImages', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsImages));
        {
          foreach ($this->GoodsImages as $iter128)
          {
            $xfer += $iter128->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UrlPreview !== null) {
      $xfer += $output->writeFieldBegin('UrlPreview', TType::STRING, 20);
      $xfer += $output->writeString($this->UrlPreview);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 21);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter129)
          {
            $xfer += $iter129->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserStrings !== null) {
      if (!is_array($this->UserStrings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserStrings', TType::LST, 22);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserStrings));
        {
          foreach ($this->UserStrings as $iter130)
          {
            $xfer += $iter130->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserLongStrings !== null) {
      if (!is_array($this->UserLongStrings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserLongStrings', TType::LST, 23);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserLongStrings));
        {
          foreach ($this->UserLongStrings as $iter131)
          {
            $xfer += $iter131->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserDates !== null) {
      if (!is_array($this->UserDates)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserDates', TType::LST, 24);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserDates));
        {
          foreach ($this->UserDates as $iter132)
          {
            $xfer += $iter132->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserNumbers !== null) {
      if (!is_array($this->UserNumbers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserNumbers', TType::LST, 25);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserNumbers));
        {
          foreach ($this->UserNumbers as $iter133)
          {
            $xfer += $iter133->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserCatalogs !== null) {
      if (!is_array($this->UserCatalogs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserCatalogs', TType::LST, 26);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserCatalogs));
        {
          foreach ($this->UserCatalogs as $iter134)
          {
            $xfer += $iter134->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserCatalogsView !== null) {
      if (!is_array($this->UserCatalogsView)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserCatalogsView', TType::LST, 27);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserCatalogsView));
        {
          foreach ($this->UserCatalogsView as $iter135)
          {
            $xfer += $iter135->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoods !== null) {
      $xfer += $output->writeFieldBegin('StateGoods', TType::STRING, 28);
      $xfer += $output->writeString($this->StateGoods);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsModelsSlave !== null) {
      if (!is_array($this->GoodsModelsSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsModelsSlave', TType::LST, 29);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsModelsSlave));
        {
          foreach ($this->GoodsModelsSlave as $iter136)
          {
            $xfer += $iter136->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AnalogsGoodsSlave !== null) {
      if (!is_array($this->AnalogsGoodsSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('AnalogsGoodsSlave', TType::LST, 30);
      {
        $output->writeListBegin(TType::STRUCT, count($this->AnalogsGoodsSlave));
        {
          foreach ($this->AnalogsGoodsSlave as $iter137)
          {
            $xfer += $iter137->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsModelsMaster !== null) {
      if (!is_array($this->GoodsModelsMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsModelsMaster', TType::LST, 31);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsModelsMaster));
        {
          foreach ($this->GoodsModelsMaster as $iter138)
          {
            $xfer += $iter138->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AnalogsGoodsMaster !== null) {
      if (!is_array($this->AnalogsGoodsMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('AnalogsGoodsMaster', TType::LST, 32);
      {
        $output->writeListBegin(TType::STRUCT, count($this->AnalogsGoodsMaster));
        {
          foreach ($this->AnalogsGoodsMaster as $iter139)
          {
            $xfer += $iter139->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $MinQty = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string[]
   */
  public $Fraction = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $GoodsGroup = null;
  /**
   * @var string
   */
  public $ModelName = null;
  /**
   * @var string
   */
  public $PLU = null;
  /**
   * @var string
   */
  public $GoodsFullName = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $TaxRate = null;
  /**
   * @var string
   */
  public $QRLink = null;
  /**
   * @var string
   */
  public $Modificators = null;
  /**
   * @var string
   */
  public $UrlPreview = null;
  /**
   * @var string[]
   */
  public $StateGoods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'MinQty',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'Fraction',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'GoodsGroup',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'ModelName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'PLU',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'GoodsFullName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        11 => array(
          'var' => 'TaxRate',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'QRLink',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'Modificators',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'UrlPreview',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'StateGoods',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['MinQty'])) {
        $this->MinQty = $vals['MinQty'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['Fraction'])) {
        $this->Fraction = $vals['Fraction'];
      }
      if (isset($vals['GoodsGroup'])) {
        $this->GoodsGroup = $vals['GoodsGroup'];
      }
      if (isset($vals['ModelName'])) {
        $this->ModelName = $vals['ModelName'];
      }
      if (isset($vals['PLU'])) {
        $this->PLU = $vals['PLU'];
      }
      if (isset($vals['GoodsFullName'])) {
        $this->GoodsFullName = $vals['GoodsFullName'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['TaxRate'])) {
        $this->TaxRate = $vals['TaxRate'];
      }
      if (isset($vals['QRLink'])) {
        $this->QRLink = $vals['QRLink'];
      }
      if (isset($vals['Modificators'])) {
        $this->Modificators = $vals['Modificators'];
      }
      if (isset($vals['UrlPreview'])) {
        $this->UrlPreview = $vals['UrlPreview'];
      }
      if (isset($vals['StateGoods'])) {
        $this->StateGoods = $vals['StateGoods'];
      }
    }
  }

  public function getName() {
    return 'GoodsFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MinQty);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->Fraction = array();
            $_size140 = 0;
            $_etype143 = 0;
            $xfer += $input->readListBegin($_etype143, $_size140);
            for ($_i144 = 0; $_i144 < $_size140; ++$_i144)
            {
              $elem145 = null;
              $xfer += $input->readString($elem145);
              $this->Fraction []= $elem145;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->GoodsGroup = new \Workabox\API\ObjectID();
            $xfer += $this->GoodsGroup->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ModelName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PLU);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GoodsFullName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TaxRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->QRLink);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Modificators);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->UrlPreview);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->StateGoods = array();
            $_size146 = 0;
            $_etype149 = 0;
            $xfer += $input->readListBegin($_etype149, $_size146);
            for ($_i150 = 0; $_i150 < $_size146; ++$_i150)
            {
              $elem151 = null;
              $xfer += $input->readString($elem151);
              $this->StateGoods []= $elem151;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MinQty !== null) {
      $xfer += $output->writeFieldBegin('MinQty', TType::STRING, 3);
      $xfer += $output->writeString($this->MinQty);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 4);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Fraction !== null) {
      if (!is_array($this->Fraction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Fraction', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->Fraction));
        {
          foreach ($this->Fraction as $iter152)
          {
            $xfer += $output->writeString($iter152);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsGroup !== null) {
      if (!is_object($this->GoodsGroup)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsGroup', TType::STRUCT, 6);
      $xfer += $this->GoodsGroup->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ModelName !== null) {
      $xfer += $output->writeFieldBegin('ModelName', TType::STRING, 7);
      $xfer += $output->writeString($this->ModelName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PLU !== null) {
      $xfer += $output->writeFieldBegin('PLU', TType::STRING, 8);
      $xfer += $output->writeString($this->PLU);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsFullName !== null) {
      $xfer += $output->writeFieldBegin('GoodsFullName', TType::STRING, 9);
      $xfer += $output->writeString($this->GoodsFullName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 10);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TaxRate !== null) {
      $xfer += $output->writeFieldBegin('TaxRate', TType::STRING, 11);
      $xfer += $output->writeString($this->TaxRate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->QRLink !== null) {
      $xfer += $output->writeFieldBegin('QRLink', TType::STRING, 12);
      $xfer += $output->writeString($this->QRLink);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Modificators !== null) {
      $xfer += $output->writeFieldBegin('Modificators', TType::STRING, 13);
      $xfer += $output->writeString($this->Modificators);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UrlPreview !== null) {
      $xfer += $output->writeFieldBegin('UrlPreview', TType::STRING, 14);
      $xfer += $output->writeString($this->UrlPreview);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoods !== null) {
      if (!is_array($this->StateGoods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateGoods', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRING, count($this->StateGoods));
        {
          foreach ($this->StateGoods as $iter153)
          {
            $xfer += $output->writeString($iter153);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Service {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var int
   */
  public $Duration = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string[]
   */
  public $Ref = null;
  /**
   * @var string
   */
  public $Fraction = null;
  /**
   * @var string[]
   */
  public $BarCodes = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $GoodsGroup = null;
  /**
   * @var string
   */
  public $ModelName = null;
  /**
   * @var int
   */
  public $PLU = null;
  /**
   * @var string
   */
  public $GoodsFullName = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var \Workabox\API\CodesSuppliersLine[]
   */
  public $CodesSuppliers = null;
  /**
   * @var string
   */
  public $TaxRate = null;
  /**
   * @var string
   */
  public $QRLink = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $RelatedGoods = null;
  /**
   * @var string
   */
  public $Modificators = null;
  /**
   * @var \Workabox\API\GoodsPricesLine[]
   */
  public $GoodsPrices = null;
  /**
   * @var \Workabox\API\GoodsImagesLine[]
   */
  public $GoodsImages = null;
  /**
   * @var string
   */
  public $UrlPreview = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var \Workabox\API\UserStringsLine[]
   */
  public $UserStrings = null;
  /**
   * @var \Workabox\API\UserLongStringsLine[]
   */
  public $UserLongStrings = null;
  /**
   * @var \Workabox\API\UserDatesLine[]
   */
  public $UserDates = null;
  /**
   * @var \Workabox\API\UserNumbersLine[]
   */
  public $UserNumbers = null;
  /**
   * @var \Workabox\API\UserCatalogsLine[]
   */
  public $UserCatalogs = null;
  /**
   * @var \Workabox\API\UserCatalogsViewLine[]
   */
  public $UserCatalogsView = null;
  /**
   * @var string
   */
  public $StateGoods = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $GoodsModelsSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $AnalogsGoodsSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $GoodsModelsMaster = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $AnalogsGoodsMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Duration',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'Ref',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'Fraction',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'BarCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        8 => array(
          'var' => 'GoodsGroup',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'ModelName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'PLU',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'GoodsFullName',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        13 => array(
          'var' => 'CodesSuppliers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\CodesSuppliersLine',
            ),
          ),
        14 => array(
          'var' => 'TaxRate',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'QRLink',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'RelatedGoods',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        17 => array(
          'var' => 'Modificators',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'GoodsPrices',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsPricesLine',
            ),
          ),
        19 => array(
          'var' => 'GoodsImages',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsImagesLine',
            ),
          ),
        20 => array(
          'var' => 'UrlPreview',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        22 => array(
          'var' => 'UserStrings',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserStringsLine',
            ),
          ),
        23 => array(
          'var' => 'UserLongStrings',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserLongStringsLine',
            ),
          ),
        24 => array(
          'var' => 'UserDates',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserDatesLine',
            ),
          ),
        25 => array(
          'var' => 'UserNumbers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserNumbersLine',
            ),
          ),
        26 => array(
          'var' => 'UserCatalogs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserCatalogsLine',
            ),
          ),
        27 => array(
          'var' => 'UserCatalogsView',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserCatalogsViewLine',
            ),
          ),
        28 => array(
          'var' => 'StateGoods',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'GoodsModelsSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        30 => array(
          'var' => 'AnalogsGoodsSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        31 => array(
          'var' => 'GoodsModelsMaster',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        32 => array(
          'var' => 'AnalogsGoodsMaster',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Duration'])) {
        $this->Duration = $vals['Duration'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['Ref'])) {
        $this->Ref = $vals['Ref'];
      }
      if (isset($vals['Fraction'])) {
        $this->Fraction = $vals['Fraction'];
      }
      if (isset($vals['BarCodes'])) {
        $this->BarCodes = $vals['BarCodes'];
      }
      if (isset($vals['GoodsGroup'])) {
        $this->GoodsGroup = $vals['GoodsGroup'];
      }
      if (isset($vals['ModelName'])) {
        $this->ModelName = $vals['ModelName'];
      }
      if (isset($vals['PLU'])) {
        $this->PLU = $vals['PLU'];
      }
      if (isset($vals['GoodsFullName'])) {
        $this->GoodsFullName = $vals['GoodsFullName'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['CodesSuppliers'])) {
        $this->CodesSuppliers = $vals['CodesSuppliers'];
      }
      if (isset($vals['TaxRate'])) {
        $this->TaxRate = $vals['TaxRate'];
      }
      if (isset($vals['QRLink'])) {
        $this->QRLink = $vals['QRLink'];
      }
      if (isset($vals['RelatedGoods'])) {
        $this->RelatedGoods = $vals['RelatedGoods'];
      }
      if (isset($vals['Modificators'])) {
        $this->Modificators = $vals['Modificators'];
      }
      if (isset($vals['GoodsPrices'])) {
        $this->GoodsPrices = $vals['GoodsPrices'];
      }
      if (isset($vals['GoodsImages'])) {
        $this->GoodsImages = $vals['GoodsImages'];
      }
      if (isset($vals['UrlPreview'])) {
        $this->UrlPreview = $vals['UrlPreview'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['UserStrings'])) {
        $this->UserStrings = $vals['UserStrings'];
      }
      if (isset($vals['UserLongStrings'])) {
        $this->UserLongStrings = $vals['UserLongStrings'];
      }
      if (isset($vals['UserDates'])) {
        $this->UserDates = $vals['UserDates'];
      }
      if (isset($vals['UserNumbers'])) {
        $this->UserNumbers = $vals['UserNumbers'];
      }
      if (isset($vals['UserCatalogs'])) {
        $this->UserCatalogs = $vals['UserCatalogs'];
      }
      if (isset($vals['UserCatalogsView'])) {
        $this->UserCatalogsView = $vals['UserCatalogsView'];
      }
      if (isset($vals['StateGoods'])) {
        $this->StateGoods = $vals['StateGoods'];
      }
      if (isset($vals['GoodsModelsSlave'])) {
        $this->GoodsModelsSlave = $vals['GoodsModelsSlave'];
      }
      if (isset($vals['AnalogsGoodsSlave'])) {
        $this->AnalogsGoodsSlave = $vals['AnalogsGoodsSlave'];
      }
      if (isset($vals['GoodsModelsMaster'])) {
        $this->GoodsModelsMaster = $vals['GoodsModelsMaster'];
      }
      if (isset($vals['AnalogsGoodsMaster'])) {
        $this->AnalogsGoodsMaster = $vals['AnalogsGoodsMaster'];
      }
    }
  }

  public function getName() {
    return 'Service';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->Ref = array();
            $_size154 = 0;
            $_etype157 = 0;
            $xfer += $input->readListBegin($_etype157, $_size154);
            for ($_i158 = 0; $_i158 < $_size154; ++$_i158)
            {
              $elem159 = null;
              $xfer += $input->readString($elem159);
              $this->Ref []= $elem159;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Fraction);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->BarCodes = array();
            $_size160 = 0;
            $_etype163 = 0;
            $xfer += $input->readListBegin($_etype163, $_size160);
            for ($_i164 = 0; $_i164 < $_size160; ++$_i164)
            {
              $elem165 = null;
              $xfer += $input->readString($elem165);
              $this->BarCodes []= $elem165;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->GoodsGroup = new \Workabox\API\ObjectID();
            $xfer += $this->GoodsGroup->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ModelName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->PLU);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GoodsFullName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->CodesSuppliers = array();
            $_size166 = 0;
            $_etype169 = 0;
            $xfer += $input->readListBegin($_etype169, $_size166);
            for ($_i170 = 0; $_i170 < $_size166; ++$_i170)
            {
              $elem171 = null;
              $elem171 = new \Workabox\API\CodesSuppliersLine();
              $xfer += $elem171->read($input);
              $this->CodesSuppliers []= $elem171;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TaxRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->QRLink);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::LST) {
            $this->RelatedGoods = array();
            $_size172 = 0;
            $_etype175 = 0;
            $xfer += $input->readListBegin($_etype175, $_size172);
            for ($_i176 = 0; $_i176 < $_size172; ++$_i176)
            {
              $elem177 = null;
              $elem177 = new \Workabox\API\ObjectID();
              $xfer += $elem177->read($input);
              $this->RelatedGoods []= $elem177;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Modificators);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::LST) {
            $this->GoodsPrices = array();
            $_size178 = 0;
            $_etype181 = 0;
            $xfer += $input->readListBegin($_etype181, $_size178);
            for ($_i182 = 0; $_i182 < $_size178; ++$_i182)
            {
              $elem183 = null;
              $elem183 = new \Workabox\API\GoodsPricesLine();
              $xfer += $elem183->read($input);
              $this->GoodsPrices []= $elem183;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->GoodsImages = array();
            $_size184 = 0;
            $_etype187 = 0;
            $xfer += $input->readListBegin($_etype187, $_size184);
            for ($_i188 = 0; $_i188 < $_size184; ++$_i188)
            {
              $elem189 = null;
              $elem189 = new \Workabox\API\GoodsImagesLine();
              $xfer += $elem189->read($input);
              $this->GoodsImages []= $elem189;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->UrlPreview);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size190 = 0;
            $_etype193 = 0;
            $xfer += $input->readListBegin($_etype193, $_size190);
            for ($_i194 = 0; $_i194 < $_size190; ++$_i194)
            {
              $elem195 = null;
              $elem195 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem195->read($input);
              $this->OuterCodes []= $elem195;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::LST) {
            $this->UserStrings = array();
            $_size196 = 0;
            $_etype199 = 0;
            $xfer += $input->readListBegin($_etype199, $_size196);
            for ($_i200 = 0; $_i200 < $_size196; ++$_i200)
            {
              $elem201 = null;
              $elem201 = new \Workabox\API\UserStringsLine();
              $xfer += $elem201->read($input);
              $this->UserStrings []= $elem201;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::LST) {
            $this->UserLongStrings = array();
            $_size202 = 0;
            $_etype205 = 0;
            $xfer += $input->readListBegin($_etype205, $_size202);
            for ($_i206 = 0; $_i206 < $_size202; ++$_i206)
            {
              $elem207 = null;
              $elem207 = new \Workabox\API\UserLongStringsLine();
              $xfer += $elem207->read($input);
              $this->UserLongStrings []= $elem207;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::LST) {
            $this->UserDates = array();
            $_size208 = 0;
            $_etype211 = 0;
            $xfer += $input->readListBegin($_etype211, $_size208);
            for ($_i212 = 0; $_i212 < $_size208; ++$_i212)
            {
              $elem213 = null;
              $elem213 = new \Workabox\API\UserDatesLine();
              $xfer += $elem213->read($input);
              $this->UserDates []= $elem213;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::LST) {
            $this->UserNumbers = array();
            $_size214 = 0;
            $_etype217 = 0;
            $xfer += $input->readListBegin($_etype217, $_size214);
            for ($_i218 = 0; $_i218 < $_size214; ++$_i218)
            {
              $elem219 = null;
              $elem219 = new \Workabox\API\UserNumbersLine();
              $xfer += $elem219->read($input);
              $this->UserNumbers []= $elem219;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::LST) {
            $this->UserCatalogs = array();
            $_size220 = 0;
            $_etype223 = 0;
            $xfer += $input->readListBegin($_etype223, $_size220);
            for ($_i224 = 0; $_i224 < $_size220; ++$_i224)
            {
              $elem225 = null;
              $elem225 = new \Workabox\API\UserCatalogsLine();
              $xfer += $elem225->read($input);
              $this->UserCatalogs []= $elem225;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::LST) {
            $this->UserCatalogsView = array();
            $_size226 = 0;
            $_etype229 = 0;
            $xfer += $input->readListBegin($_etype229, $_size226);
            for ($_i230 = 0; $_i230 < $_size226; ++$_i230)
            {
              $elem231 = null;
              $elem231 = new \Workabox\API\UserCatalogsViewLine();
              $xfer += $elem231->read($input);
              $this->UserCatalogsView []= $elem231;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateGoods);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::LST) {
            $this->GoodsModelsSlave = array();
            $_size232 = 0;
            $_etype235 = 0;
            $xfer += $input->readListBegin($_etype235, $_size232);
            for ($_i236 = 0; $_i236 < $_size232; ++$_i236)
            {
              $elem237 = null;
              $elem237 = new \Workabox\API\ObjectID();
              $xfer += $elem237->read($input);
              $this->GoodsModelsSlave []= $elem237;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::LST) {
            $this->AnalogsGoodsSlave = array();
            $_size238 = 0;
            $_etype241 = 0;
            $xfer += $input->readListBegin($_etype241, $_size238);
            for ($_i242 = 0; $_i242 < $_size238; ++$_i242)
            {
              $elem243 = null;
              $elem243 = new \Workabox\API\ObjectID();
              $xfer += $elem243->read($input);
              $this->AnalogsGoodsSlave []= $elem243;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::LST) {
            $this->GoodsModelsMaster = array();
            $_size244 = 0;
            $_etype247 = 0;
            $xfer += $input->readListBegin($_etype247, $_size244);
            for ($_i248 = 0; $_i248 < $_size244; ++$_i248)
            {
              $elem249 = null;
              $elem249 = new \Workabox\API\ObjectID();
              $xfer += $elem249->read($input);
              $this->GoodsModelsMaster []= $elem249;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::LST) {
            $this->AnalogsGoodsMaster = array();
            $_size250 = 0;
            $_etype253 = 0;
            $xfer += $input->readListBegin($_etype253, $_size250);
            for ($_i254 = 0; $_i254 < $_size250; ++$_i254)
            {
              $elem255 = null;
              $elem255 = new \Workabox\API\ObjectID();
              $xfer += $elem255->read($input);
              $this->AnalogsGoodsMaster []= $elem255;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Service');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Duration !== null) {
      $xfer += $output->writeFieldBegin('Duration', TType::I32, 3);
      $xfer += $output->writeI32($this->Duration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 4);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Ref !== null) {
      if (!is_array($this->Ref)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Ref', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->Ref));
        {
          foreach ($this->Ref as $iter256)
          {
            $xfer += $output->writeString($iter256);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Fraction !== null) {
      $xfer += $output->writeFieldBegin('Fraction', TType::STRING, 6);
      $xfer += $output->writeString($this->Fraction);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BarCodes !== null) {
      if (!is_array($this->BarCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('BarCodes', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRING, count($this->BarCodes));
        {
          foreach ($this->BarCodes as $iter257)
          {
            $xfer += $output->writeString($iter257);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsGroup !== null) {
      if (!is_object($this->GoodsGroup)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsGroup', TType::STRUCT, 8);
      $xfer += $this->GoodsGroup->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ModelName !== null) {
      $xfer += $output->writeFieldBegin('ModelName', TType::STRING, 9);
      $xfer += $output->writeString($this->ModelName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PLU !== null) {
      $xfer += $output->writeFieldBegin('PLU', TType::I32, 10);
      $xfer += $output->writeI32($this->PLU);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsFullName !== null) {
      $xfer += $output->writeFieldBegin('GoodsFullName', TType::STRING, 11);
      $xfer += $output->writeString($this->GoodsFullName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 12);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CodesSuppliers !== null) {
      if (!is_array($this->CodesSuppliers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CodesSuppliers', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRUCT, count($this->CodesSuppliers));
        {
          foreach ($this->CodesSuppliers as $iter258)
          {
            $xfer += $iter258->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TaxRate !== null) {
      $xfer += $output->writeFieldBegin('TaxRate', TType::STRING, 14);
      $xfer += $output->writeString($this->TaxRate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->QRLink !== null) {
      $xfer += $output->writeFieldBegin('QRLink', TType::STRING, 15);
      $xfer += $output->writeString($this->QRLink);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RelatedGoods !== null) {
      if (!is_array($this->RelatedGoods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RelatedGoods', TType::LST, 16);
      {
        $output->writeListBegin(TType::STRUCT, count($this->RelatedGoods));
        {
          foreach ($this->RelatedGoods as $iter259)
          {
            $xfer += $iter259->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Modificators !== null) {
      $xfer += $output->writeFieldBegin('Modificators', TType::STRING, 17);
      $xfer += $output->writeString($this->Modificators);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsPrices !== null) {
      if (!is_array($this->GoodsPrices)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsPrices', TType::LST, 18);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsPrices));
        {
          foreach ($this->GoodsPrices as $iter260)
          {
            $xfer += $iter260->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsImages !== null) {
      if (!is_array($this->GoodsImages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsImages', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsImages));
        {
          foreach ($this->GoodsImages as $iter261)
          {
            $xfer += $iter261->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UrlPreview !== null) {
      $xfer += $output->writeFieldBegin('UrlPreview', TType::STRING, 20);
      $xfer += $output->writeString($this->UrlPreview);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 21);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter262)
          {
            $xfer += $iter262->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserStrings !== null) {
      if (!is_array($this->UserStrings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserStrings', TType::LST, 22);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserStrings));
        {
          foreach ($this->UserStrings as $iter263)
          {
            $xfer += $iter263->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserLongStrings !== null) {
      if (!is_array($this->UserLongStrings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserLongStrings', TType::LST, 23);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserLongStrings));
        {
          foreach ($this->UserLongStrings as $iter264)
          {
            $xfer += $iter264->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserDates !== null) {
      if (!is_array($this->UserDates)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserDates', TType::LST, 24);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserDates));
        {
          foreach ($this->UserDates as $iter265)
          {
            $xfer += $iter265->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserNumbers !== null) {
      if (!is_array($this->UserNumbers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserNumbers', TType::LST, 25);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserNumbers));
        {
          foreach ($this->UserNumbers as $iter266)
          {
            $xfer += $iter266->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserCatalogs !== null) {
      if (!is_array($this->UserCatalogs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserCatalogs', TType::LST, 26);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserCatalogs));
        {
          foreach ($this->UserCatalogs as $iter267)
          {
            $xfer += $iter267->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserCatalogsView !== null) {
      if (!is_array($this->UserCatalogsView)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserCatalogsView', TType::LST, 27);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserCatalogsView));
        {
          foreach ($this->UserCatalogsView as $iter268)
          {
            $xfer += $iter268->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoods !== null) {
      $xfer += $output->writeFieldBegin('StateGoods', TType::STRING, 28);
      $xfer += $output->writeString($this->StateGoods);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsModelsSlave !== null) {
      if (!is_array($this->GoodsModelsSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsModelsSlave', TType::LST, 29);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsModelsSlave));
        {
          foreach ($this->GoodsModelsSlave as $iter269)
          {
            $xfer += $iter269->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AnalogsGoodsSlave !== null) {
      if (!is_array($this->AnalogsGoodsSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('AnalogsGoodsSlave', TType::LST, 30);
      {
        $output->writeListBegin(TType::STRUCT, count($this->AnalogsGoodsSlave));
        {
          foreach ($this->AnalogsGoodsSlave as $iter270)
          {
            $xfer += $iter270->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsModelsMaster !== null) {
      if (!is_array($this->GoodsModelsMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsModelsMaster', TType::LST, 31);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsModelsMaster));
        {
          foreach ($this->GoodsModelsMaster as $iter271)
          {
            $xfer += $iter271->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AnalogsGoodsMaster !== null) {
      if (!is_array($this->AnalogsGoodsMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('AnalogsGoodsMaster', TType::LST, 32);
      {
        $output->writeListBegin(TType::STRUCT, count($this->AnalogsGoodsMaster));
        {
          foreach ($this->AnalogsGoodsMaster as $iter272)
          {
            $xfer += $iter272->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ServiceFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Duration = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string[]
   */
  public $Fraction = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $GoodsGroup = null;
  /**
   * @var string
   */
  public $ModelName = null;
  /**
   * @var string
   */
  public $PLU = null;
  /**
   * @var string
   */
  public $GoodsFullName = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $TaxRate = null;
  /**
   * @var string
   */
  public $QRLink = null;
  /**
   * @var string
   */
  public $Modificators = null;
  /**
   * @var string
   */
  public $UrlPreview = null;
  /**
   * @var string[]
   */
  public $StateGoods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Duration',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'Fraction',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        6 => array(
          'var' => 'GoodsGroup',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'ModelName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'PLU',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'GoodsFullName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        11 => array(
          'var' => 'TaxRate',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'QRLink',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'Modificators',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'UrlPreview',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'StateGoods',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Duration'])) {
        $this->Duration = $vals['Duration'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['Fraction'])) {
        $this->Fraction = $vals['Fraction'];
      }
      if (isset($vals['GoodsGroup'])) {
        $this->GoodsGroup = $vals['GoodsGroup'];
      }
      if (isset($vals['ModelName'])) {
        $this->ModelName = $vals['ModelName'];
      }
      if (isset($vals['PLU'])) {
        $this->PLU = $vals['PLU'];
      }
      if (isset($vals['GoodsFullName'])) {
        $this->GoodsFullName = $vals['GoodsFullName'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['TaxRate'])) {
        $this->TaxRate = $vals['TaxRate'];
      }
      if (isset($vals['QRLink'])) {
        $this->QRLink = $vals['QRLink'];
      }
      if (isset($vals['Modificators'])) {
        $this->Modificators = $vals['Modificators'];
      }
      if (isset($vals['UrlPreview'])) {
        $this->UrlPreview = $vals['UrlPreview'];
      }
      if (isset($vals['StateGoods'])) {
        $this->StateGoods = $vals['StateGoods'];
      }
    }
  }

  public function getName() {
    return 'ServiceFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->Fraction = array();
            $_size273 = 0;
            $_etype276 = 0;
            $xfer += $input->readListBegin($_etype276, $_size273);
            for ($_i277 = 0; $_i277 < $_size273; ++$_i277)
            {
              $elem278 = null;
              $xfer += $input->readString($elem278);
              $this->Fraction []= $elem278;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->GoodsGroup = new \Workabox\API\ObjectID();
            $xfer += $this->GoodsGroup->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ModelName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PLU);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GoodsFullName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TaxRate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->QRLink);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Modificators);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->UrlPreview);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->StateGoods = array();
            $_size279 = 0;
            $_etype282 = 0;
            $xfer += $input->readListBegin($_etype282, $_size279);
            for ($_i283 = 0; $_i283 < $_size279; ++$_i283)
            {
              $elem284 = null;
              $xfer += $input->readString($elem284);
              $this->StateGoods []= $elem284;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ServiceFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Duration !== null) {
      $xfer += $output->writeFieldBegin('Duration', TType::STRING, 3);
      $xfer += $output->writeString($this->Duration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 4);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Fraction !== null) {
      if (!is_array($this->Fraction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Fraction', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRING, count($this->Fraction));
        {
          foreach ($this->Fraction as $iter285)
          {
            $xfer += $output->writeString($iter285);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsGroup !== null) {
      if (!is_object($this->GoodsGroup)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsGroup', TType::STRUCT, 6);
      $xfer += $this->GoodsGroup->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ModelName !== null) {
      $xfer += $output->writeFieldBegin('ModelName', TType::STRING, 7);
      $xfer += $output->writeString($this->ModelName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PLU !== null) {
      $xfer += $output->writeFieldBegin('PLU', TType::STRING, 8);
      $xfer += $output->writeString($this->PLU);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsFullName !== null) {
      $xfer += $output->writeFieldBegin('GoodsFullName', TType::STRING, 9);
      $xfer += $output->writeString($this->GoodsFullName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 10);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TaxRate !== null) {
      $xfer += $output->writeFieldBegin('TaxRate', TType::STRING, 11);
      $xfer += $output->writeString($this->TaxRate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->QRLink !== null) {
      $xfer += $output->writeFieldBegin('QRLink', TType::STRING, 12);
      $xfer += $output->writeString($this->QRLink);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Modificators !== null) {
      $xfer += $output->writeFieldBegin('Modificators', TType::STRING, 13);
      $xfer += $output->writeString($this->Modificators);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UrlPreview !== null) {
      $xfer += $output->writeFieldBegin('UrlPreview', TType::STRING, 14);
      $xfer += $output->writeString($this->UrlPreview);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoods !== null) {
      if (!is_array($this->StateGoods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateGoods', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRING, count($this->StateGoods));
        {
          foreach ($this->StateGoods as $iter286)
          {
            $xfer += $output->writeString($iter286);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MoneyFacilitiesType {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        5 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'MoneyFacilitiesType';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size287 = 0;
            $_etype290 = 0;
            $xfer += $input->readListBegin($_etype290, $_size287);
            for ($_i291 = 0; $_i291 < $_size287; ++$_i291)
            {
              $elem292 = null;
              $elem292 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem292->read($input);
              $this->OuterCodes []= $elem292;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MoneyFacilitiesType');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter293)
          {
            $xfer += $iter293->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 5);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MoneyFacilitiesTypeFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string[]
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'MoneyFacilitiesTypeFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size294 = 0;
            $_etype297 = 0;
            $xfer += $input->readListBegin($_etype297, $_size294);
            for ($_i298 = 0; $_i298 < $_size294; ++$_i298)
            {
              $elem299 = null;
              $xfer += $input->readString($elem299);
              $this->StateMain []= $elem299;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MoneyFacilitiesTypeFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter300)
          {
            $xfer += $output->writeString($iter300);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PricesListLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $Price = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Price',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Price'])) {
        $this->Price = $vals['Price'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'PricesListLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PricesListLine');
    if ($this->Price !== null) {
      $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->Price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 2);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PriceList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $PriceListInfoDate = null;
  /**
   * @var \Workabox\API\PricesListLine[]
   */
  public $PricesList = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $RTTPricesMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'PriceListInfoDate',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'PricesList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\PricesListLine',
            ),
          ),
        5 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        8 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'RTTPricesMaster',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['PriceListInfoDate'])) {
        $this->PriceListInfoDate = $vals['PriceListInfoDate'];
      }
      if (isset($vals['PricesList'])) {
        $this->PricesList = $vals['PricesList'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['RTTPricesMaster'])) {
        $this->RTTPricesMaster = $vals['RTTPricesMaster'];
      }
    }
  }

  public function getName() {
    return 'PriceList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PriceListInfoDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->PricesList = array();
            $_size301 = 0;
            $_etype304 = 0;
            $xfer += $input->readListBegin($_etype304, $_size301);
            for ($_i305 = 0; $_i305 < $_size301; ++$_i305)
            {
              $elem306 = null;
              $elem306 = new \Workabox\API\PricesListLine();
              $xfer += $elem306->read($input);
              $this->PricesList []= $elem306;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size307 = 0;
            $_etype310 = 0;
            $xfer += $input->readListBegin($_etype310, $_size307);
            for ($_i311 = 0; $_i311 < $_size307; ++$_i311)
            {
              $elem312 = null;
              $elem312 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem312->read($input);
              $this->OuterCodes []= $elem312;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->RTTPricesMaster = array();
            $_size313 = 0;
            $_etype316 = 0;
            $xfer += $input->readListBegin($_etype316, $_size313);
            for ($_i317 = 0; $_i317 < $_size313; ++$_i317)
            {
              $elem318 = null;
              $elem318 = new \Workabox\API\ObjectID();
              $xfer += $elem318->read($input);
              $this->RTTPricesMaster []= $elem318;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PriceList');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PriceListInfoDate !== null) {
      $xfer += $output->writeFieldBegin('PriceListInfoDate', TType::STRING, 3);
      $xfer += $output->writeString($this->PriceListInfoDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PricesList !== null) {
      if (!is_array($this->PricesList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('PricesList', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->PricesList));
        {
          foreach ($this->PricesList as $iter319)
          {
            $xfer += $iter319->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 5);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 6);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter320)
          {
            $xfer += $iter320->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 8);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RTTPricesMaster !== null) {
      if (!is_array($this->RTTPricesMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RTTPricesMaster', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->RTTPricesMaster));
        {
          foreach ($this->RTTPricesMaster as $iter321)
          {
            $xfer += $iter321->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PriceListFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $PriceListInfoDate = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string[]
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'PriceListInfoDate',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['PriceListInfoDate'])) {
        $this->PriceListInfoDate = $vals['PriceListInfoDate'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'PriceListFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PriceListInfoDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size322 = 0;
            $_etype325 = 0;
            $xfer += $input->readListBegin($_etype325, $_size322);
            for ($_i326 = 0; $_i326 < $_size322; ++$_i326)
            {
              $elem327 = null;
              $xfer += $input->readString($elem327);
              $this->StateMain []= $elem327;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PriceListFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PriceListInfoDate !== null) {
      $xfer += $output->writeFieldBegin('PriceListInfoDate', TType::STRING, 3);
      $xfer += $output->writeString($this->PriceListInfoDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 4);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 5);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter328)
          {
            $xfer += $output->writeString($iter328);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Supplier {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string
   */
  public $Settlement = null;
  /**
   * @var string
   */
  public $PostAddress = null;
  /**
   * @var string
   */
  public $Phone = null;
  /**
   * @var string
   */
  public $ContactPerson = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Bank = null;
  /**
   * @var string
   */
  public $AccountNumber = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'Settlement',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'PostAddress',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'Phone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ContactPerson',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'Bank',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'AccountNumber',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        11 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        12 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['Settlement'])) {
        $this->Settlement = $vals['Settlement'];
      }
      if (isset($vals['PostAddress'])) {
        $this->PostAddress = $vals['PostAddress'];
      }
      if (isset($vals['Phone'])) {
        $this->Phone = $vals['Phone'];
      }
      if (isset($vals['ContactPerson'])) {
        $this->ContactPerson = $vals['ContactPerson'];
      }
      if (isset($vals['Bank'])) {
        $this->Bank = $vals['Bank'];
      }
      if (isset($vals['AccountNumber'])) {
        $this->AccountNumber = $vals['AccountNumber'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'Supplier';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Settlement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PostAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ContactPerson);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->Bank = new \Workabox\API\ObjectID();
            $xfer += $this->Bank->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->AccountNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size329 = 0;
            $_etype332 = 0;
            $xfer += $input->readListBegin($_etype332, $_size329);
            for ($_i333 = 0; $_i333 < $_size329; ++$_i333)
            {
              $elem334 = null;
              $elem334 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem334->read($input);
              $this->OuterCodes []= $elem334;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Supplier');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Settlement !== null) {
      $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 4);
      $xfer += $output->writeString($this->Settlement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PostAddress !== null) {
      $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 5);
      $xfer += $output->writeString($this->PostAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Phone !== null) {
      $xfer += $output->writeFieldBegin('Phone', TType::STRING, 6);
      $xfer += $output->writeString($this->Phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ContactPerson !== null) {
      $xfer += $output->writeFieldBegin('ContactPerson', TType::STRING, 7);
      $xfer += $output->writeString($this->ContactPerson);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Bank !== null) {
      if (!is_object($this->Bank)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Bank', TType::STRUCT, 8);
      $xfer += $this->Bank->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AccountNumber !== null) {
      $xfer += $output->writeFieldBegin('AccountNumber', TType::STRING, 9);
      $xfer += $output->writeString($this->AccountNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 10);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter335)
          {
            $xfer += $iter335->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 12);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SupplierFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string
   */
  public $Settlement = null;
  /**
   * @var string
   */
  public $PostAddress = null;
  /**
   * @var string
   */
  public $Phone = null;
  /**
   * @var string
   */
  public $ContactPerson = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Bank = null;
  /**
   * @var string
   */
  public $AccountNumber = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string[]
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'Settlement',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'PostAddress',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'Phone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ContactPerson',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'Bank',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'AccountNumber',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        11 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['Settlement'])) {
        $this->Settlement = $vals['Settlement'];
      }
      if (isset($vals['PostAddress'])) {
        $this->PostAddress = $vals['PostAddress'];
      }
      if (isset($vals['Phone'])) {
        $this->Phone = $vals['Phone'];
      }
      if (isset($vals['ContactPerson'])) {
        $this->ContactPerson = $vals['ContactPerson'];
      }
      if (isset($vals['Bank'])) {
        $this->Bank = $vals['Bank'];
      }
      if (isset($vals['AccountNumber'])) {
        $this->AccountNumber = $vals['AccountNumber'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'SupplierFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Settlement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PostAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ContactPerson);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->Bank = new \Workabox\API\ObjectID();
            $xfer += $this->Bank->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->AccountNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size336 = 0;
            $_etype339 = 0;
            $xfer += $input->readListBegin($_etype339, $_size336);
            for ($_i340 = 0; $_i340 < $_size336; ++$_i340)
            {
              $elem341 = null;
              $xfer += $input->readString($elem341);
              $this->StateMain []= $elem341;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SupplierFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Settlement !== null) {
      $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 4);
      $xfer += $output->writeString($this->Settlement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PostAddress !== null) {
      $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 5);
      $xfer += $output->writeString($this->PostAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Phone !== null) {
      $xfer += $output->writeFieldBegin('Phone', TType::STRING, 6);
      $xfer += $output->writeString($this->Phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ContactPerson !== null) {
      $xfer += $output->writeFieldBegin('ContactPerson', TType::STRING, 7);
      $xfer += $output->writeString($this->ContactPerson);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Bank !== null) {
      if (!is_object($this->Bank)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Bank', TType::STRUCT, 8);
      $xfer += $this->Bank->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AccountNumber !== null) {
      $xfer += $output->writeFieldBegin('AccountNumber', TType::STRING, 9);
      $xfer += $output->writeString($this->AccountNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 10);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter342)
          {
            $xfer += $output->writeString($iter342);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Office {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string
   */
  public $CodeOKPO = null;
  /**
   * @var string
   */
  public $RegistrationCode = null;
  /**
   * @var bool
   */
  public $IsFranchising = null;
  /**
   * @var bool
   */
  public $AllowOfflineLogin = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $Settlement = null;
  /**
   * @var string
   */
  public $PostAddress = null;
  /**
   * @var string
   */
  public $Phone = null;
  /**
   * @var string
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $EmployeeOfficeSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $StoreOfficeSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $SubOfficeSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $CashDeskOfficeSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $AccountOfficeSlave = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $SubOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'CodeOKPO',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'RegistrationCode',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'IsFranchising',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'AllowOfflineLogin',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        10 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        11 => array(
          'var' => 'Settlement',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'PostAddress',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'Phone',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'EmployeeOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        16 => array(
          'var' => 'StoreOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        17 => array(
          'var' => 'SubOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        18 => array(
          'var' => 'CashDeskOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        19 => array(
          'var' => 'AccountOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        20 => array(
          'var' => 'SubOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['CodeOKPO'])) {
        $this->CodeOKPO = $vals['CodeOKPO'];
      }
      if (isset($vals['RegistrationCode'])) {
        $this->RegistrationCode = $vals['RegistrationCode'];
      }
      if (isset($vals['IsFranchising'])) {
        $this->IsFranchising = $vals['IsFranchising'];
      }
      if (isset($vals['AllowOfflineLogin'])) {
        $this->AllowOfflineLogin = $vals['AllowOfflineLogin'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['Settlement'])) {
        $this->Settlement = $vals['Settlement'];
      }
      if (isset($vals['PostAddress'])) {
        $this->PostAddress = $vals['PostAddress'];
      }
      if (isset($vals['Phone'])) {
        $this->Phone = $vals['Phone'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['EmployeeOfficeSlave'])) {
        $this->EmployeeOfficeSlave = $vals['EmployeeOfficeSlave'];
      }
      if (isset($vals['StoreOfficeSlave'])) {
        $this->StoreOfficeSlave = $vals['StoreOfficeSlave'];
      }
      if (isset($vals['SubOfficeSlave'])) {
        $this->SubOfficeSlave = $vals['SubOfficeSlave'];
      }
      if (isset($vals['CashDeskOfficeSlave'])) {
        $this->CashDeskOfficeSlave = $vals['CashDeskOfficeSlave'];
      }
      if (isset($vals['AccountOfficeSlave'])) {
        $this->AccountOfficeSlave = $vals['AccountOfficeSlave'];
      }
      if (isset($vals['SubOfficeMaster'])) {
        $this->SubOfficeMaster = $vals['SubOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'Office';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CodeOKPO);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->RegistrationCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsFranchising);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->AllowOfflineLogin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size343 = 0;
            $_etype346 = 0;
            $xfer += $input->readListBegin($_etype346, $_size343);
            for ($_i347 = 0; $_i347 < $_size343; ++$_i347)
            {
              $elem348 = null;
              $elem348 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem348->read($input);
              $this->OuterCodes []= $elem348;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Settlement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PostAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->EmployeeOfficeSlave = array();
            $_size349 = 0;
            $_etype352 = 0;
            $xfer += $input->readListBegin($_etype352, $_size349);
            for ($_i353 = 0; $_i353 < $_size349; ++$_i353)
            {
              $elem354 = null;
              $elem354 = new \Workabox\API\ObjectID();
              $xfer += $elem354->read($input);
              $this->EmployeeOfficeSlave []= $elem354;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::LST) {
            $this->StoreOfficeSlave = array();
            $_size355 = 0;
            $_etype358 = 0;
            $xfer += $input->readListBegin($_etype358, $_size355);
            for ($_i359 = 0; $_i359 < $_size355; ++$_i359)
            {
              $elem360 = null;
              $elem360 = new \Workabox\API\ObjectID();
              $xfer += $elem360->read($input);
              $this->StoreOfficeSlave []= $elem360;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::LST) {
            $this->SubOfficeSlave = array();
            $_size361 = 0;
            $_etype364 = 0;
            $xfer += $input->readListBegin($_etype364, $_size361);
            for ($_i365 = 0; $_i365 < $_size361; ++$_i365)
            {
              $elem366 = null;
              $elem366 = new \Workabox\API\ObjectID();
              $xfer += $elem366->read($input);
              $this->SubOfficeSlave []= $elem366;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::LST) {
            $this->CashDeskOfficeSlave = array();
            $_size367 = 0;
            $_etype370 = 0;
            $xfer += $input->readListBegin($_etype370, $_size367);
            for ($_i371 = 0; $_i371 < $_size367; ++$_i371)
            {
              $elem372 = null;
              $elem372 = new \Workabox\API\ObjectID();
              $xfer += $elem372->read($input);
              $this->CashDeskOfficeSlave []= $elem372;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->AccountOfficeSlave = array();
            $_size373 = 0;
            $_etype376 = 0;
            $xfer += $input->readListBegin($_etype376, $_size373);
            for ($_i377 = 0; $_i377 < $_size373; ++$_i377)
            {
              $elem378 = null;
              $elem378 = new \Workabox\API\ObjectID();
              $xfer += $elem378->read($input);
              $this->AccountOfficeSlave []= $elem378;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->SubOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->SubOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Office');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CodeOKPO !== null) {
      $xfer += $output->writeFieldBegin('CodeOKPO', TType::STRING, 4);
      $xfer += $output->writeString($this->CodeOKPO);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RegistrationCode !== null) {
      $xfer += $output->writeFieldBegin('RegistrationCode', TType::STRING, 5);
      $xfer += $output->writeString($this->RegistrationCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsFranchising !== null) {
      $xfer += $output->writeFieldBegin('IsFranchising', TType::BOOL, 6);
      $xfer += $output->writeBool($this->IsFranchising);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AllowOfflineLogin !== null) {
      $xfer += $output->writeFieldBegin('AllowOfflineLogin', TType::BOOL, 7);
      $xfer += $output->writeBool($this->AllowOfflineLogin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 8);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 9);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter379)
          {
            $xfer += $iter379->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Settlement !== null) {
      $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 11);
      $xfer += $output->writeString($this->Settlement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PostAddress !== null) {
      $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 12);
      $xfer += $output->writeString($this->PostAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Phone !== null) {
      $xfer += $output->writeFieldBegin('Phone', TType::STRING, 13);
      $xfer += $output->writeString($this->Phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 14);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->EmployeeOfficeSlave !== null) {
      if (!is_array($this->EmployeeOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('EmployeeOfficeSlave', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRUCT, count($this->EmployeeOfficeSlave));
        {
          foreach ($this->EmployeeOfficeSlave as $iter380)
          {
            $xfer += $iter380->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreOfficeSlave !== null) {
      if (!is_array($this->StoreOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreOfficeSlave', TType::LST, 16);
      {
        $output->writeListBegin(TType::STRUCT, count($this->StoreOfficeSlave));
        {
          foreach ($this->StoreOfficeSlave as $iter381)
          {
            $xfer += $iter381->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SubOfficeSlave !== null) {
      if (!is_array($this->SubOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('SubOfficeSlave', TType::LST, 17);
      {
        $output->writeListBegin(TType::STRUCT, count($this->SubOfficeSlave));
        {
          foreach ($this->SubOfficeSlave as $iter382)
          {
            $xfer += $iter382->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDeskOfficeSlave !== null) {
      if (!is_array($this->CashDeskOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDeskOfficeSlave', TType::LST, 18);
      {
        $output->writeListBegin(TType::STRUCT, count($this->CashDeskOfficeSlave));
        {
          foreach ($this->CashDeskOfficeSlave as $iter383)
          {
            $xfer += $iter383->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AccountOfficeSlave !== null) {
      if (!is_array($this->AccountOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('AccountOfficeSlave', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRUCT, count($this->AccountOfficeSlave));
        {
          foreach ($this->AccountOfficeSlave as $iter384)
          {
            $xfer += $iter384->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SubOfficeMaster !== null) {
      if (!is_object($this->SubOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('SubOfficeMaster', TType::STRUCT, 20);
      $xfer += $this->SubOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OfficeFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string
   */
  public $CodeOKPO = null;
  /**
   * @var string
   */
  public $RegistrationCode = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $Settlement = null;
  /**
   * @var string
   */
  public $PostAddress = null;
  /**
   * @var string
   */
  public $Phone = null;
  /**
   * @var string[]
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $SubOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'CodeOKPO',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'RegistrationCode',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'Settlement',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'PostAddress',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'Phone',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        12 => array(
          'var' => 'SubOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['CodeOKPO'])) {
        $this->CodeOKPO = $vals['CodeOKPO'];
      }
      if (isset($vals['RegistrationCode'])) {
        $this->RegistrationCode = $vals['RegistrationCode'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['Settlement'])) {
        $this->Settlement = $vals['Settlement'];
      }
      if (isset($vals['PostAddress'])) {
        $this->PostAddress = $vals['PostAddress'];
      }
      if (isset($vals['Phone'])) {
        $this->Phone = $vals['Phone'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['SubOfficeMaster'])) {
        $this->SubOfficeMaster = $vals['SubOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'OfficeFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CodeOKPO);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->RegistrationCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Settlement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PostAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size385 = 0;
            $_etype388 = 0;
            $xfer += $input->readListBegin($_etype388, $_size385);
            for ($_i389 = 0; $_i389 < $_size385; ++$_i389)
            {
              $elem390 = null;
              $xfer += $input->readString($elem390);
              $this->StateMain []= $elem390;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->SubOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->SubOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OfficeFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CodeOKPO !== null) {
      $xfer += $output->writeFieldBegin('CodeOKPO', TType::STRING, 4);
      $xfer += $output->writeString($this->CodeOKPO);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RegistrationCode !== null) {
      $xfer += $output->writeFieldBegin('RegistrationCode', TType::STRING, 5);
      $xfer += $output->writeString($this->RegistrationCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 6);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 7);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Settlement !== null) {
      $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 8);
      $xfer += $output->writeString($this->Settlement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PostAddress !== null) {
      $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 9);
      $xfer += $output->writeString($this->PostAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Phone !== null) {
      $xfer += $output->writeFieldBegin('Phone', TType::STRING, 10);
      $xfer += $output->writeString($this->Phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter391)
          {
            $xfer += $output->writeString($iter391);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SubOfficeMaster !== null) {
      if (!is_object($this->SubOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('SubOfficeMaster', TType::STRUCT, 12);
      $xfer += $this->SubOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Stock {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var bool
   */
  public $IsFranchising = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $Settlement = null;
  /**
   * @var string
   */
  public $PostAddress = null;
  /**
   * @var string
   */
  public $Phone = null;
  /**
   * @var string
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'IsFranchising',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        8 => array(
          'var' => 'Settlement',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'PostAddress',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'Phone',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'StoreOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['IsFranchising'])) {
        $this->IsFranchising = $vals['IsFranchising'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['Settlement'])) {
        $this->Settlement = $vals['Settlement'];
      }
      if (isset($vals['PostAddress'])) {
        $this->PostAddress = $vals['PostAddress'];
      }
      if (isset($vals['Phone'])) {
        $this->Phone = $vals['Phone'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['StoreOfficeMaster'])) {
        $this->StoreOfficeMaster = $vals['StoreOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'Stock';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsFranchising);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size392 = 0;
            $_etype395 = 0;
            $xfer += $input->readListBegin($_etype395, $_size392);
            for ($_i396 = 0; $_i396 < $_size392; ++$_i396)
            {
              $elem397 = null;
              $elem397 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem397->read($input);
              $this->OuterCodes []= $elem397;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Settlement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PostAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->StoreOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->StoreOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Stock');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsFranchising !== null) {
      $xfer += $output->writeFieldBegin('IsFranchising', TType::BOOL, 4);
      $xfer += $output->writeBool($this->IsFranchising);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 5);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 6);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter398)
          {
            $xfer += $iter398->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Settlement !== null) {
      $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 8);
      $xfer += $output->writeString($this->Settlement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PostAddress !== null) {
      $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 9);
      $xfer += $output->writeString($this->PostAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Phone !== null) {
      $xfer += $output->writeFieldBegin('Phone', TType::STRING, 10);
      $xfer += $output->writeString($this->Phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 11);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreOfficeMaster !== null) {
      if (!is_object($this->StoreOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreOfficeMaster', TType::STRUCT, 12);
      $xfer += $this->StoreOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class StockFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $Settlement = null;
  /**
   * @var string
   */
  public $PostAddress = null;
  /**
   * @var string
   */
  public $Phone = null;
  /**
   * @var string[]
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'Settlement',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'PostAddress',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'Phone',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        10 => array(
          'var' => 'StoreOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['Settlement'])) {
        $this->Settlement = $vals['Settlement'];
      }
      if (isset($vals['PostAddress'])) {
        $this->PostAddress = $vals['PostAddress'];
      }
      if (isset($vals['Phone'])) {
        $this->Phone = $vals['Phone'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['StoreOfficeMaster'])) {
        $this->StoreOfficeMaster = $vals['StoreOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'StockFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Settlement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PostAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size399 = 0;
            $_etype402 = 0;
            $xfer += $input->readListBegin($_etype402, $_size399);
            for ($_i403 = 0; $_i403 < $_size399; ++$_i403)
            {
              $elem404 = null;
              $xfer += $input->readString($elem404);
              $this->StateMain []= $elem404;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->StoreOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->StoreOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('StockFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 4);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 5);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Settlement !== null) {
      $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 6);
      $xfer += $output->writeString($this->Settlement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PostAddress !== null) {
      $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 7);
      $xfer += $output->writeString($this->PostAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Phone !== null) {
      $xfer += $output->writeFieldBegin('Phone', TType::STRING, 8);
      $xfer += $output->writeString($this->Phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter405)
          {
            $xfer += $output->writeString($iter405);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreOfficeMaster !== null) {
      if (!is_object($this->StoreOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreOfficeMaster', TType::STRUCT, 10);
      $xfer += $this->StoreOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RTT {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var bool
   */
  public $IsFranchising = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $DefaultAccount = null;
  /**
   * @var string
   */
  public $WorkTimeFrom = null;
  /**
   * @var string
   */
  public $WorkTimeTo = null;
  /**
   * @var int
   */
  public $WorkingDays = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $Settlement = null;
  /**
   * @var string
   */
  public $PostAddress = null;
  /**
   * @var string
   */
  public $Phone = null;
  /**
   * @var string
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $EmployeeOfficeSlave = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RTTPricesSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $CashDescInRTTSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $CashDeskOfficeSlave = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'IsFranchising',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'DefaultAccount',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'WorkTimeFrom',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'WorkTimeTo',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'WorkingDays',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        11 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        12 => array(
          'var' => 'Settlement',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'PostAddress',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'Phone',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'EmployeeOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        17 => array(
          'var' => 'RTTPricesSlave',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        18 => array(
          'var' => 'CashDescInRTTSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        19 => array(
          'var' => 'CashDeskOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        20 => array(
          'var' => 'StoreOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['IsFranchising'])) {
        $this->IsFranchising = $vals['IsFranchising'];
      }
      if (isset($vals['DefaultAccount'])) {
        $this->DefaultAccount = $vals['DefaultAccount'];
      }
      if (isset($vals['WorkTimeFrom'])) {
        $this->WorkTimeFrom = $vals['WorkTimeFrom'];
      }
      if (isset($vals['WorkTimeTo'])) {
        $this->WorkTimeTo = $vals['WorkTimeTo'];
      }
      if (isset($vals['WorkingDays'])) {
        $this->WorkingDays = $vals['WorkingDays'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['Settlement'])) {
        $this->Settlement = $vals['Settlement'];
      }
      if (isset($vals['PostAddress'])) {
        $this->PostAddress = $vals['PostAddress'];
      }
      if (isset($vals['Phone'])) {
        $this->Phone = $vals['Phone'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['EmployeeOfficeSlave'])) {
        $this->EmployeeOfficeSlave = $vals['EmployeeOfficeSlave'];
      }
      if (isset($vals['RTTPricesSlave'])) {
        $this->RTTPricesSlave = $vals['RTTPricesSlave'];
      }
      if (isset($vals['CashDescInRTTSlave'])) {
        $this->CashDescInRTTSlave = $vals['CashDescInRTTSlave'];
      }
      if (isset($vals['CashDeskOfficeSlave'])) {
        $this->CashDeskOfficeSlave = $vals['CashDeskOfficeSlave'];
      }
      if (isset($vals['StoreOfficeMaster'])) {
        $this->StoreOfficeMaster = $vals['StoreOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'RTT';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsFranchising);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->DefaultAccount = new \Workabox\API\ObjectID();
            $xfer += $this->DefaultAccount->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->WorkTimeFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->WorkTimeTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->WorkingDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size406 = 0;
            $_etype409 = 0;
            $xfer += $input->readListBegin($_etype409, $_size406);
            for ($_i410 = 0; $_i410 < $_size406; ++$_i410)
            {
              $elem411 = null;
              $elem411 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem411->read($input);
              $this->OuterCodes []= $elem411;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Settlement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PostAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::LST) {
            $this->EmployeeOfficeSlave = array();
            $_size412 = 0;
            $_etype415 = 0;
            $xfer += $input->readListBegin($_etype415, $_size412);
            for ($_i416 = 0; $_i416 < $_size412; ++$_i416)
            {
              $elem417 = null;
              $elem417 = new \Workabox\API\ObjectID();
              $xfer += $elem417->read($input);
              $this->EmployeeOfficeSlave []= $elem417;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRUCT) {
            $this->RTTPricesSlave = new \Workabox\API\ObjectID();
            $xfer += $this->RTTPricesSlave->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::LST) {
            $this->CashDescInRTTSlave = array();
            $_size418 = 0;
            $_etype421 = 0;
            $xfer += $input->readListBegin($_etype421, $_size418);
            for ($_i422 = 0; $_i422 < $_size418; ++$_i422)
            {
              $elem423 = null;
              $elem423 = new \Workabox\API\ObjectID();
              $xfer += $elem423->read($input);
              $this->CashDescInRTTSlave []= $elem423;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->CashDeskOfficeSlave = array();
            $_size424 = 0;
            $_etype427 = 0;
            $xfer += $input->readListBegin($_etype427, $_size424);
            for ($_i428 = 0; $_i428 < $_size424; ++$_i428)
            {
              $elem429 = null;
              $elem429 = new \Workabox\API\ObjectID();
              $xfer += $elem429->read($input);
              $this->CashDeskOfficeSlave []= $elem429;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->StoreOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->StoreOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RTT');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsFranchising !== null) {
      $xfer += $output->writeFieldBegin('IsFranchising', TType::BOOL, 4);
      $xfer += $output->writeBool($this->IsFranchising);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DefaultAccount !== null) {
      if (!is_object($this->DefaultAccount)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('DefaultAccount', TType::STRUCT, 5);
      $xfer += $this->DefaultAccount->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WorkTimeFrom !== null) {
      $xfer += $output->writeFieldBegin('WorkTimeFrom', TType::STRING, 6);
      $xfer += $output->writeString($this->WorkTimeFrom);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WorkTimeTo !== null) {
      $xfer += $output->writeFieldBegin('WorkTimeTo', TType::STRING, 7);
      $xfer += $output->writeString($this->WorkTimeTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WorkingDays !== null) {
      $xfer += $output->writeFieldBegin('WorkingDays', TType::I32, 8);
      $xfer += $output->writeI32($this->WorkingDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 9);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 10);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter430)
          {
            $xfer += $iter430->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Settlement !== null) {
      $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 12);
      $xfer += $output->writeString($this->Settlement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PostAddress !== null) {
      $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 13);
      $xfer += $output->writeString($this->PostAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Phone !== null) {
      $xfer += $output->writeFieldBegin('Phone', TType::STRING, 14);
      $xfer += $output->writeString($this->Phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 15);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->EmployeeOfficeSlave !== null) {
      if (!is_array($this->EmployeeOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('EmployeeOfficeSlave', TType::LST, 16);
      {
        $output->writeListBegin(TType::STRUCT, count($this->EmployeeOfficeSlave));
        {
          foreach ($this->EmployeeOfficeSlave as $iter431)
          {
            $xfer += $iter431->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RTTPricesSlave !== null) {
      if (!is_object($this->RTTPricesSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RTTPricesSlave', TType::STRUCT, 17);
      $xfer += $this->RTTPricesSlave->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDescInRTTSlave !== null) {
      if (!is_array($this->CashDescInRTTSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDescInRTTSlave', TType::LST, 18);
      {
        $output->writeListBegin(TType::STRUCT, count($this->CashDescInRTTSlave));
        {
          foreach ($this->CashDescInRTTSlave as $iter432)
          {
            $xfer += $iter432->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDeskOfficeSlave !== null) {
      if (!is_array($this->CashDeskOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDeskOfficeSlave', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRUCT, count($this->CashDeskOfficeSlave));
        {
          foreach ($this->CashDeskOfficeSlave as $iter433)
          {
            $xfer += $iter433->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreOfficeMaster !== null) {
      if (!is_object($this->StoreOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreOfficeMaster', TType::STRUCT, 20);
      $xfer += $this->StoreOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RTTFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $DefaultAccount = null;
  /**
   * @var string
   */
  public $WorkingDays = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $Settlement = null;
  /**
   * @var string
   */
  public $PostAddress = null;
  /**
   * @var string
   */
  public $Phone = null;
  /**
   * @var string[]
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RTTPricesSlave = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'DefaultAccount',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'WorkingDays',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'Settlement',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'PostAddress',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'Phone',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        12 => array(
          'var' => 'RTTPricesSlave',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        13 => array(
          'var' => 'StoreOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['DefaultAccount'])) {
        $this->DefaultAccount = $vals['DefaultAccount'];
      }
      if (isset($vals['WorkingDays'])) {
        $this->WorkingDays = $vals['WorkingDays'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['Settlement'])) {
        $this->Settlement = $vals['Settlement'];
      }
      if (isset($vals['PostAddress'])) {
        $this->PostAddress = $vals['PostAddress'];
      }
      if (isset($vals['Phone'])) {
        $this->Phone = $vals['Phone'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['RTTPricesSlave'])) {
        $this->RTTPricesSlave = $vals['RTTPricesSlave'];
      }
      if (isset($vals['StoreOfficeMaster'])) {
        $this->StoreOfficeMaster = $vals['StoreOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'RTTFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->DefaultAccount = new \Workabox\API\ObjectID();
            $xfer += $this->DefaultAccount->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->WorkingDays);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Settlement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PostAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size434 = 0;
            $_etype437 = 0;
            $xfer += $input->readListBegin($_etype437, $_size434);
            for ($_i438 = 0; $_i438 < $_size434; ++$_i438)
            {
              $elem439 = null;
              $xfer += $input->readString($elem439);
              $this->StateMain []= $elem439;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->RTTPricesSlave = new \Workabox\API\ObjectID();
            $xfer += $this->RTTPricesSlave->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->StoreOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->StoreOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RTTFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DefaultAccount !== null) {
      if (!is_object($this->DefaultAccount)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('DefaultAccount', TType::STRUCT, 4);
      $xfer += $this->DefaultAccount->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WorkingDays !== null) {
      $xfer += $output->writeFieldBegin('WorkingDays', TType::STRING, 5);
      $xfer += $output->writeString($this->WorkingDays);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 6);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 7);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Settlement !== null) {
      $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 8);
      $xfer += $output->writeString($this->Settlement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PostAddress !== null) {
      $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 9);
      $xfer += $output->writeString($this->PostAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Phone !== null) {
      $xfer += $output->writeFieldBegin('Phone', TType::STRING, 10);
      $xfer += $output->writeString($this->Phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter440)
          {
            $xfer += $output->writeString($iter440);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RTTPricesSlave !== null) {
      if (!is_object($this->RTTPricesSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RTTPricesSlave', TType::STRUCT, 12);
      $xfer += $this->RTTPricesSlave->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreOfficeMaster !== null) {
      if (!is_object($this->StoreOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreOfficeMaster', TType::STRUCT, 13);
      $xfer += $this->StoreOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CashDeskRTT {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ErrorMessage = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string
   */
  public $FPNumber = null;
  /**
   * @var string
   */
  public $CashZeroTime = null;
  /**
   * @var int
   */
  public $ECRType = null;
  /**
   * @var string
   */
  public $ECRIP = null;
  /**
   * @var string
   */
  public $SyncSuccessDate = null;
  /**
   * @var string
   */
  public $SyncTryDate = null;
  /**
   * @var bool
   */
  public $SyncResult = null;
  /**
   * @var bool
   */
  public $IsFranchising = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $CashDescInRTTMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ErrorMessage',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'FPNumber',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'CashZeroTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ECRType',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'ECRIP',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'SyncSuccessDate',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'SyncTryDate',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'SyncResult',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'IsFranchising',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        15 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        16 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'CashDescInRTTMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ErrorMessage'])) {
        $this->ErrorMessage = $vals['ErrorMessage'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['FPNumber'])) {
        $this->FPNumber = $vals['FPNumber'];
      }
      if (isset($vals['CashZeroTime'])) {
        $this->CashZeroTime = $vals['CashZeroTime'];
      }
      if (isset($vals['ECRType'])) {
        $this->ECRType = $vals['ECRType'];
      }
      if (isset($vals['ECRIP'])) {
        $this->ECRIP = $vals['ECRIP'];
      }
      if (isset($vals['SyncSuccessDate'])) {
        $this->SyncSuccessDate = $vals['SyncSuccessDate'];
      }
      if (isset($vals['SyncTryDate'])) {
        $this->SyncTryDate = $vals['SyncTryDate'];
      }
      if (isset($vals['SyncResult'])) {
        $this->SyncResult = $vals['SyncResult'];
      }
      if (isset($vals['IsFranchising'])) {
        $this->IsFranchising = $vals['IsFranchising'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['CashDescInRTTMaster'])) {
        $this->CashDescInRTTMaster = $vals['CashDescInRTTMaster'];
      }
    }
  }

  public function getName() {
    return 'CashDeskRTT';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ErrorMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FPNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CashZeroTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ECRType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ECRIP);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SyncSuccessDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SyncTryDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->SyncResult);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsFranchising);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size441 = 0;
            $_etype444 = 0;
            $xfer += $input->readListBegin($_etype444, $_size441);
            for ($_i445 = 0; $_i445 < $_size441; ++$_i445)
            {
              $elem446 = null;
              $elem446 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem446->read($input);
              $this->OuterCodes []= $elem446;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRUCT) {
            $this->CashDescInRTTMaster = new \Workabox\API\ObjectID();
            $xfer += $this->CashDescInRTTMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CashDeskRTT');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ErrorMessage !== null) {
      $xfer += $output->writeFieldBegin('ErrorMessage', TType::STRING, 3);
      $xfer += $output->writeString($this->ErrorMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 4);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FPNumber !== null) {
      $xfer += $output->writeFieldBegin('FPNumber', TType::STRING, 5);
      $xfer += $output->writeString($this->FPNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashZeroTime !== null) {
      $xfer += $output->writeFieldBegin('CashZeroTime', TType::STRING, 6);
      $xfer += $output->writeString($this->CashZeroTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ECRType !== null) {
      $xfer += $output->writeFieldBegin('ECRType', TType::I32, 7);
      $xfer += $output->writeI32($this->ECRType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ECRIP !== null) {
      $xfer += $output->writeFieldBegin('ECRIP', TType::STRING, 8);
      $xfer += $output->writeString($this->ECRIP);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SyncSuccessDate !== null) {
      $xfer += $output->writeFieldBegin('SyncSuccessDate', TType::STRING, 9);
      $xfer += $output->writeString($this->SyncSuccessDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SyncTryDate !== null) {
      $xfer += $output->writeFieldBegin('SyncTryDate', TType::STRING, 10);
      $xfer += $output->writeString($this->SyncTryDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SyncResult !== null) {
      $xfer += $output->writeFieldBegin('SyncResult', TType::BOOL, 11);
      $xfer += $output->writeBool($this->SyncResult);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsFranchising !== null) {
      $xfer += $output->writeFieldBegin('IsFranchising', TType::BOOL, 12);
      $xfer += $output->writeBool($this->IsFranchising);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 13);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 14);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter447)
          {
            $xfer += $iter447->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 16);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDescInRTTMaster !== null) {
      if (!is_object($this->CashDescInRTTMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDescInRTTMaster', TType::STRUCT, 17);
      $xfer += $this->CashDescInRTTMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CashDeskRTTFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ErrorMessage = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string
   */
  public $FPNumber = null;
  /**
   * @var string
   */
  public $CashZeroTime = null;
  /**
   * @var string
   */
  public $ECRType = null;
  /**
   * @var string
   */
  public $ECRIP = null;
  /**
   * @var string
   */
  public $SyncSuccessDate = null;
  /**
   * @var string
   */
  public $SyncTryDate = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string[]
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $CashDescInRTTMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ErrorMessage',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'FPNumber',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'CashZeroTime',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ECRType',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'ECRIP',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'SyncSuccessDate',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'SyncTryDate',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        13 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        14 => array(
          'var' => 'CashDescInRTTMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ErrorMessage'])) {
        $this->ErrorMessage = $vals['ErrorMessage'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['FPNumber'])) {
        $this->FPNumber = $vals['FPNumber'];
      }
      if (isset($vals['CashZeroTime'])) {
        $this->CashZeroTime = $vals['CashZeroTime'];
      }
      if (isset($vals['ECRType'])) {
        $this->ECRType = $vals['ECRType'];
      }
      if (isset($vals['ECRIP'])) {
        $this->ECRIP = $vals['ECRIP'];
      }
      if (isset($vals['SyncSuccessDate'])) {
        $this->SyncSuccessDate = $vals['SyncSuccessDate'];
      }
      if (isset($vals['SyncTryDate'])) {
        $this->SyncTryDate = $vals['SyncTryDate'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['CashDescInRTTMaster'])) {
        $this->CashDescInRTTMaster = $vals['CashDescInRTTMaster'];
      }
    }
  }

  public function getName() {
    return 'CashDeskRTTFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ErrorMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FPNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CashZeroTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ECRType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ECRIP);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SyncSuccessDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SyncTryDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size448 = 0;
            $_etype451 = 0;
            $xfer += $input->readListBegin($_etype451, $_size448);
            for ($_i452 = 0; $_i452 < $_size448; ++$_i452)
            {
              $elem453 = null;
              $xfer += $input->readString($elem453);
              $this->StateMain []= $elem453;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
            $this->CashDescInRTTMaster = new \Workabox\API\ObjectID();
            $xfer += $this->CashDescInRTTMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CashDeskRTTFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ErrorMessage !== null) {
      $xfer += $output->writeFieldBegin('ErrorMessage', TType::STRING, 3);
      $xfer += $output->writeString($this->ErrorMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 4);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FPNumber !== null) {
      $xfer += $output->writeFieldBegin('FPNumber', TType::STRING, 5);
      $xfer += $output->writeString($this->FPNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashZeroTime !== null) {
      $xfer += $output->writeFieldBegin('CashZeroTime', TType::STRING, 6);
      $xfer += $output->writeString($this->CashZeroTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ECRType !== null) {
      $xfer += $output->writeFieldBegin('ECRType', TType::STRING, 7);
      $xfer += $output->writeString($this->ECRType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ECRIP !== null) {
      $xfer += $output->writeFieldBegin('ECRIP', TType::STRING, 8);
      $xfer += $output->writeString($this->ECRIP);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SyncSuccessDate !== null) {
      $xfer += $output->writeFieldBegin('SyncSuccessDate', TType::STRING, 9);
      $xfer += $output->writeString($this->SyncSuccessDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SyncTryDate !== null) {
      $xfer += $output->writeFieldBegin('SyncTryDate', TType::STRING, 10);
      $xfer += $output->writeString($this->SyncTryDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 11);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 12);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter454)
          {
            $xfer += $output->writeString($iter454);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDescInRTTMaster !== null) {
      if (!is_object($this->CashDescInRTTMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDescInRTTMaster', TType::STRUCT, 14);
      $xfer += $this->CashDescInRTTMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FreeTimeLine {
  static $_TSPEC;

  /**
   * @var string
   */
  public $FreeTimeTo = null;
  /**
   * @var string
   */
  public $DDate = null;
  /**
   * @var string
   */
  public $FreeTimeFrom = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'FreeTimeTo',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'DDate',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'FreeTimeFrom',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['FreeTimeTo'])) {
        $this->FreeTimeTo = $vals['FreeTimeTo'];
      }
      if (isset($vals['DDate'])) {
        $this->DDate = $vals['DDate'];
      }
      if (isset($vals['FreeTimeFrom'])) {
        $this->FreeTimeFrom = $vals['FreeTimeFrom'];
      }
    }
  }

  public function getName() {
    return 'FreeTimeLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FreeTimeTo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FreeTimeFrom);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FreeTimeLine');
    if ($this->FreeTimeTo !== null) {
      $xfer += $output->writeFieldBegin('FreeTimeTo', TType::STRING, 1);
      $xfer += $output->writeString($this->FreeTimeTo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DDate !== null) {
      $xfer += $output->writeFieldBegin('DDate', TType::STRING, 2);
      $xfer += $output->writeString($this->DDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FreeTimeFrom !== null) {
      $xfer += $output->writeFieldBegin('FreeTimeFrom', TType::STRING, 3);
      $xfer += $output->writeString($this->FreeTimeFrom);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Employee {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Role = null;
  /**
   * @var \Workabox\API\FreeTimeLine[]
   */
  public $FreeTime = null;
  /**
   * @var bool
   */
  public $IsAdministrator = null;
  /**
   * @var int
   */
  public $UserLCID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $Login = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var bool
   */
  public $Locked = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $EMail = null;
  /**
   * @var string
   */
  public $MobilePhone = null;
  /**
   * @var string
   */
  public $HomePhone = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $SecondName = null;
  /**
   * @var string
   */
  public $FirstName = null;
  /**
   * @var string
   */
  public $MiddleName = null;
  /**
   * @var int
   */
  public $BirthDay_Day = null;
  /**
   * @var string
   */
  public $BirthDay_Month = null;
  /**
   * @var int
   */
  public $BirthDay_Year = null;
  /**
   * @var string
   */
  public $Sex = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $EmployeeOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Role',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'FreeTime',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\FreeTimeLine',
            ),
          ),
        5 => array(
          'var' => 'IsAdministrator',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'UserLCID',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'Login',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'Locked',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'EMail',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'MobilePhone',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'HomePhone',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        17 => array(
          'var' => 'SecondName',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'FirstName',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'MiddleName',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'BirthDay_Day',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'BirthDay_Month',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'BirthDay_Year',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'Sex',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'EmployeeOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Role'])) {
        $this->Role = $vals['Role'];
      }
      if (isset($vals['FreeTime'])) {
        $this->FreeTime = $vals['FreeTime'];
      }
      if (isset($vals['IsAdministrator'])) {
        $this->IsAdministrator = $vals['IsAdministrator'];
      }
      if (isset($vals['UserLCID'])) {
        $this->UserLCID = $vals['UserLCID'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['Login'])) {
        $this->Login = $vals['Login'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['Locked'])) {
        $this->Locked = $vals['Locked'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['EMail'])) {
        $this->EMail = $vals['EMail'];
      }
      if (isset($vals['MobilePhone'])) {
        $this->MobilePhone = $vals['MobilePhone'];
      }
      if (isset($vals['HomePhone'])) {
        $this->HomePhone = $vals['HomePhone'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['SecondName'])) {
        $this->SecondName = $vals['SecondName'];
      }
      if (isset($vals['FirstName'])) {
        $this->FirstName = $vals['FirstName'];
      }
      if (isset($vals['MiddleName'])) {
        $this->MiddleName = $vals['MiddleName'];
      }
      if (isset($vals['BirthDay_Day'])) {
        $this->BirthDay_Day = $vals['BirthDay_Day'];
      }
      if (isset($vals['BirthDay_Month'])) {
        $this->BirthDay_Month = $vals['BirthDay_Month'];
      }
      if (isset($vals['BirthDay_Year'])) {
        $this->BirthDay_Year = $vals['BirthDay_Year'];
      }
      if (isset($vals['Sex'])) {
        $this->Sex = $vals['Sex'];
      }
      if (isset($vals['EmployeeOfficeMaster'])) {
        $this->EmployeeOfficeMaster = $vals['EmployeeOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'Employee';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Role);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->FreeTime = array();
            $_size455 = 0;
            $_etype458 = 0;
            $xfer += $input->readListBegin($_etype458, $_size455);
            for ($_i459 = 0; $_i459 < $_size455; ++$_i459)
            {
              $elem460 = null;
              $elem460 = new \Workabox\API\FreeTimeLine();
              $xfer += $elem460->read($input);
              $this->FreeTime []= $elem460;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsAdministrator);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->UserLCID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Login);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->Locked);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->EMail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MobilePhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HomePhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size461 = 0;
            $_etype464 = 0;
            $xfer += $input->readListBegin($_etype464, $_size461);
            for ($_i465 = 0; $_i465 < $_size461; ++$_i465)
            {
              $elem466 = null;
              $elem466 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem466->read($input);
              $this->OuterCodes []= $elem466;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SecondName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FirstName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MiddleName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->BirthDay_Day);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->BirthDay_Month);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->BirthDay_Year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Sex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRUCT) {
            $this->EmployeeOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->EmployeeOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Employee');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Role !== null) {
      $xfer += $output->writeFieldBegin('Role', TType::STRING, 3);
      $xfer += $output->writeString($this->Role);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FreeTime !== null) {
      if (!is_array($this->FreeTime)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('FreeTime', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->FreeTime));
        {
          foreach ($this->FreeTime as $iter467)
          {
            $xfer += $iter467->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsAdministrator !== null) {
      $xfer += $output->writeFieldBegin('IsAdministrator', TType::BOOL, 5);
      $xfer += $output->writeBool($this->IsAdministrator);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserLCID !== null) {
      $xfer += $output->writeFieldBegin('UserLCID', TType::I32, 6);
      $xfer += $output->writeI32($this->UserLCID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 7);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Login !== null) {
      $xfer += $output->writeFieldBegin('Login', TType::STRING, 8);
      $xfer += $output->writeString($this->Login);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 9);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Locked !== null) {
      $xfer += $output->writeFieldBegin('Locked', TType::BOOL, 10);
      $xfer += $output->writeBool($this->Locked);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 11);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 12);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->EMail !== null) {
      $xfer += $output->writeFieldBegin('EMail', TType::STRING, 13);
      $xfer += $output->writeString($this->EMail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MobilePhone !== null) {
      $xfer += $output->writeFieldBegin('MobilePhone', TType::STRING, 14);
      $xfer += $output->writeString($this->MobilePhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HomePhone !== null) {
      $xfer += $output->writeFieldBegin('HomePhone', TType::STRING, 15);
      $xfer += $output->writeString($this->HomePhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 16);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter468)
          {
            $xfer += $iter468->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SecondName !== null) {
      $xfer += $output->writeFieldBegin('SecondName', TType::STRING, 17);
      $xfer += $output->writeString($this->SecondName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FirstName !== null) {
      $xfer += $output->writeFieldBegin('FirstName', TType::STRING, 18);
      $xfer += $output->writeString($this->FirstName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MiddleName !== null) {
      $xfer += $output->writeFieldBegin('MiddleName', TType::STRING, 19);
      $xfer += $output->writeString($this->MiddleName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Day !== null) {
      $xfer += $output->writeFieldBegin('BirthDay_Day', TType::I32, 20);
      $xfer += $output->writeI32($this->BirthDay_Day);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Month !== null) {
      $xfer += $output->writeFieldBegin('BirthDay_Month', TType::STRING, 21);
      $xfer += $output->writeString($this->BirthDay_Month);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Year !== null) {
      $xfer += $output->writeFieldBegin('BirthDay_Year', TType::I32, 22);
      $xfer += $output->writeI32($this->BirthDay_Year);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sex !== null) {
      $xfer += $output->writeFieldBegin('Sex', TType::STRING, 23);
      $xfer += $output->writeString($this->Sex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->EmployeeOfficeMaster !== null) {
      if (!is_object($this->EmployeeOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('EmployeeOfficeMaster', TType::STRUCT, 24);
      $xfer += $this->EmployeeOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class EmployeeFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string[]
   */
  public $Role = null;
  /**
   * @var string
   */
  public $UserLCID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $Login = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $EMail = null;
  /**
   * @var string
   */
  public $MobilePhone = null;
  /**
   * @var string
   */
  public $HomePhone = null;
  /**
   * @var string
   */
  public $SecondName = null;
  /**
   * @var string
   */
  public $FirstName = null;
  /**
   * @var string
   */
  public $MiddleName = null;
  /**
   * @var string
   */
  public $BirthDay_Day = null;
  /**
   * @var string[]
   */
  public $BirthDay_Month = null;
  /**
   * @var string
   */
  public $BirthDay_Year = null;
  /**
   * @var string[]
   */
  public $Sex = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $EmployeeOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Role',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'UserLCID',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'Login',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'EMail',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'MobilePhone',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'HomePhone',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'SecondName',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'FirstName',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'MiddleName',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'BirthDay_Day',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'BirthDay_Month',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        18 => array(
          'var' => 'BirthDay_Year',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'Sex',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        20 => array(
          'var' => 'EmployeeOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Role'])) {
        $this->Role = $vals['Role'];
      }
      if (isset($vals['UserLCID'])) {
        $this->UserLCID = $vals['UserLCID'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['Login'])) {
        $this->Login = $vals['Login'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['EMail'])) {
        $this->EMail = $vals['EMail'];
      }
      if (isset($vals['MobilePhone'])) {
        $this->MobilePhone = $vals['MobilePhone'];
      }
      if (isset($vals['HomePhone'])) {
        $this->HomePhone = $vals['HomePhone'];
      }
      if (isset($vals['SecondName'])) {
        $this->SecondName = $vals['SecondName'];
      }
      if (isset($vals['FirstName'])) {
        $this->FirstName = $vals['FirstName'];
      }
      if (isset($vals['MiddleName'])) {
        $this->MiddleName = $vals['MiddleName'];
      }
      if (isset($vals['BirthDay_Day'])) {
        $this->BirthDay_Day = $vals['BirthDay_Day'];
      }
      if (isset($vals['BirthDay_Month'])) {
        $this->BirthDay_Month = $vals['BirthDay_Month'];
      }
      if (isset($vals['BirthDay_Year'])) {
        $this->BirthDay_Year = $vals['BirthDay_Year'];
      }
      if (isset($vals['Sex'])) {
        $this->Sex = $vals['Sex'];
      }
      if (isset($vals['EmployeeOfficeMaster'])) {
        $this->EmployeeOfficeMaster = $vals['EmployeeOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'EmployeeFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->Role = array();
            $_size469 = 0;
            $_etype472 = 0;
            $xfer += $input->readListBegin($_etype472, $_size469);
            for ($_i473 = 0; $_i473 < $_size469; ++$_i473)
            {
              $elem474 = null;
              $xfer += $input->readString($elem474);
              $this->Role []= $elem474;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->UserLCID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Login);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->EMail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MobilePhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HomePhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SecondName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FirstName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MiddleName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->BirthDay_Day);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::LST) {
            $this->BirthDay_Month = array();
            $_size475 = 0;
            $_etype478 = 0;
            $xfer += $input->readListBegin($_etype478, $_size475);
            for ($_i479 = 0; $_i479 < $_size475; ++$_i479)
            {
              $elem480 = null;
              $xfer += $input->readString($elem480);
              $this->BirthDay_Month []= $elem480;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->BirthDay_Year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->Sex = array();
            $_size481 = 0;
            $_etype484 = 0;
            $xfer += $input->readListBegin($_etype484, $_size481);
            for ($_i485 = 0; $_i485 < $_size481; ++$_i485)
            {
              $elem486 = null;
              $xfer += $input->readString($elem486);
              $this->Sex []= $elem486;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRUCT) {
            $this->EmployeeOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->EmployeeOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('EmployeeFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Role !== null) {
      if (!is_array($this->Role)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Role', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->Role));
        {
          foreach ($this->Role as $iter487)
          {
            $xfer += $output->writeString($iter487);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserLCID !== null) {
      $xfer += $output->writeFieldBegin('UserLCID', TType::STRING, 4);
      $xfer += $output->writeString($this->UserLCID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 5);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Login !== null) {
      $xfer += $output->writeFieldBegin('Login', TType::STRING, 6);
      $xfer += $output->writeString($this->Login);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 7);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 8);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 9);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->EMail !== null) {
      $xfer += $output->writeFieldBegin('EMail', TType::STRING, 10);
      $xfer += $output->writeString($this->EMail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MobilePhone !== null) {
      $xfer += $output->writeFieldBegin('MobilePhone', TType::STRING, 11);
      $xfer += $output->writeString($this->MobilePhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HomePhone !== null) {
      $xfer += $output->writeFieldBegin('HomePhone', TType::STRING, 12);
      $xfer += $output->writeString($this->HomePhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SecondName !== null) {
      $xfer += $output->writeFieldBegin('SecondName', TType::STRING, 13);
      $xfer += $output->writeString($this->SecondName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FirstName !== null) {
      $xfer += $output->writeFieldBegin('FirstName', TType::STRING, 14);
      $xfer += $output->writeString($this->FirstName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MiddleName !== null) {
      $xfer += $output->writeFieldBegin('MiddleName', TType::STRING, 15);
      $xfer += $output->writeString($this->MiddleName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Day !== null) {
      $xfer += $output->writeFieldBegin('BirthDay_Day', TType::STRING, 16);
      $xfer += $output->writeString($this->BirthDay_Day);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Month !== null) {
      if (!is_array($this->BirthDay_Month)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('BirthDay_Month', TType::LST, 17);
      {
        $output->writeListBegin(TType::STRING, count($this->BirthDay_Month));
        {
          foreach ($this->BirthDay_Month as $iter488)
          {
            $xfer += $output->writeString($iter488);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Year !== null) {
      $xfer += $output->writeFieldBegin('BirthDay_Year', TType::STRING, 18);
      $xfer += $output->writeString($this->BirthDay_Year);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sex !== null) {
      if (!is_array($this->Sex)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Sex', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRING, count($this->Sex));
        {
          foreach ($this->Sex as $iter489)
          {
            $xfer += $output->writeString($iter489);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->EmployeeOfficeMaster !== null) {
      if (!is_object($this->EmployeeOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('EmployeeOfficeMaster', TType::STRUCT, 20);
      $xfer += $this->EmployeeOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Bank {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Settlement = null;
  /**
   * @var string
   */
  public $PostAddress = null;
  /**
   * @var string
   */
  public $Phone = null;
  /**
   * @var string
   */
  public $MFO = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Settlement',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'PostAddress',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'Phone',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'MFO',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        10 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Settlement'])) {
        $this->Settlement = $vals['Settlement'];
      }
      if (isset($vals['PostAddress'])) {
        $this->PostAddress = $vals['PostAddress'];
      }
      if (isset($vals['Phone'])) {
        $this->Phone = $vals['Phone'];
      }
      if (isset($vals['MFO'])) {
        $this->MFO = $vals['MFO'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'Bank';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Settlement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PostAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MFO);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size490 = 0;
            $_etype493 = 0;
            $xfer += $input->readListBegin($_etype493, $_size490);
            for ($_i494 = 0; $_i494 < $_size490; ++$_i494)
            {
              $elem495 = null;
              $elem495 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem495->read($input);
              $this->OuterCodes []= $elem495;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Bank');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Settlement !== null) {
      $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 3);
      $xfer += $output->writeString($this->Settlement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PostAddress !== null) {
      $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 4);
      $xfer += $output->writeString($this->PostAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Phone !== null) {
      $xfer += $output->writeFieldBegin('Phone', TType::STRING, 5);
      $xfer += $output->writeString($this->Phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MFO !== null) {
      $xfer += $output->writeFieldBegin('MFO', TType::STRING, 6);
      $xfer += $output->writeString($this->MFO);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 7);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 8);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter496)
          {
            $xfer += $iter496->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 10);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class BankFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Settlement = null;
  /**
   * @var string
   */
  public $PostAddress = null;
  /**
   * @var string
   */
  public $Phone = null;
  /**
   * @var string
   */
  public $MFO = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string[]
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Settlement',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'PostAddress',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'Phone',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'MFO',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Settlement'])) {
        $this->Settlement = $vals['Settlement'];
      }
      if (isset($vals['PostAddress'])) {
        $this->PostAddress = $vals['PostAddress'];
      }
      if (isset($vals['Phone'])) {
        $this->Phone = $vals['Phone'];
      }
      if (isset($vals['MFO'])) {
        $this->MFO = $vals['MFO'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'BankFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Settlement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PostAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MFO);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size497 = 0;
            $_etype500 = 0;
            $xfer += $input->readListBegin($_etype500, $_size497);
            for ($_i501 = 0; $_i501 < $_size497; ++$_i501)
            {
              $elem502 = null;
              $xfer += $input->readString($elem502);
              $this->StateMain []= $elem502;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('BankFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Settlement !== null) {
      $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 3);
      $xfer += $output->writeString($this->Settlement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PostAddress !== null) {
      $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 4);
      $xfer += $output->writeString($this->PostAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Phone !== null) {
      $xfer += $output->writeFieldBegin('Phone', TType::STRING, 5);
      $xfer += $output->writeString($this->Phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MFO !== null) {
      $xfer += $output->writeFieldBegin('MFO', TType::STRING, 6);
      $xfer += $output->writeString($this->MFO);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 7);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 8);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter503)
          {
            $xfer += $output->writeString($iter503);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Account {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Bank = null;
  /**
   * @var string
   */
  public $AccountNumber = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var bool
   */
  public $IsFranchising = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $AccountOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'Bank',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'AccountNumber',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'IsFranchising',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        10 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'AccountOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['Bank'])) {
        $this->Bank = $vals['Bank'];
      }
      if (isset($vals['AccountNumber'])) {
        $this->AccountNumber = $vals['AccountNumber'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['IsFranchising'])) {
        $this->IsFranchising = $vals['IsFranchising'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['AccountOfficeMaster'])) {
        $this->AccountOfficeMaster = $vals['AccountOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'Account';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Bank = new \Workabox\API\ObjectID();
            $xfer += $this->Bank->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->AccountNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsFranchising);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size504 = 0;
            $_etype507 = 0;
            $xfer += $input->readListBegin($_etype507, $_size504);
            for ($_i508 = 0; $_i508 < $_size504; ++$_i508)
            {
              $elem509 = null;
              $elem509 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem509->read($input);
              $this->OuterCodes []= $elem509;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->AccountOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->AccountOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Account');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Bank !== null) {
      if (!is_object($this->Bank)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Bank', TType::STRUCT, 4);
      $xfer += $this->Bank->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AccountNumber !== null) {
      $xfer += $output->writeFieldBegin('AccountNumber', TType::STRING, 5);
      $xfer += $output->writeString($this->AccountNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 6);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsFranchising !== null) {
      $xfer += $output->writeFieldBegin('IsFranchising', TType::BOOL, 7);
      $xfer += $output->writeBool($this->IsFranchising);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 8);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter510)
          {
            $xfer += $iter510->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 10);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AccountOfficeMaster !== null) {
      if (!is_object($this->AccountOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('AccountOfficeMaster', TType::STRUCT, 11);
      $xfer += $this->AccountOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AccountFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Bank = null;
  /**
   * @var string
   */
  public $AccountNumber = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var string[]
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $AccountOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'Bank',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'AccountNumber',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        9 => array(
          'var' => 'AccountOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['Bank'])) {
        $this->Bank = $vals['Bank'];
      }
      if (isset($vals['AccountNumber'])) {
        $this->AccountNumber = $vals['AccountNumber'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['AccountOfficeMaster'])) {
        $this->AccountOfficeMaster = $vals['AccountOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'AccountFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Bank = new \Workabox\API\ObjectID();
            $xfer += $this->Bank->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->AccountNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size511 = 0;
            $_etype514 = 0;
            $xfer += $input->readListBegin($_etype514, $_size511);
            for ($_i515 = 0; $_i515 < $_size511; ++$_i515)
            {
              $elem516 = null;
              $xfer += $input->readString($elem516);
              $this->StateMain []= $elem516;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->AccountOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->AccountOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AccountFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Bank !== null) {
      if (!is_object($this->Bank)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Bank', TType::STRUCT, 4);
      $xfer += $this->Bank->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AccountNumber !== null) {
      $xfer += $output->writeFieldBegin('AccountNumber', TType::STRING, 5);
      $xfer += $output->writeString($this->AccountNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 6);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 7);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter517)
          {
            $xfer += $output->writeString($iter517);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AccountOfficeMaster !== null) {
      if (!is_object($this->AccountOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('AccountOfficeMaster', TType::STRUCT, 9);
      $xfer += $this->AccountOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CashDesk {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var bool
   */
  public $IsFranchising = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $CashDeskOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'IsFranchising',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        8 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'CashDeskOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['IsFranchising'])) {
        $this->IsFranchising = $vals['IsFranchising'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['CashDeskOfficeMaster'])) {
        $this->CashDeskOfficeMaster = $vals['CashDeskOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'CashDesk';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsFranchising);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size518 = 0;
            $_etype521 = 0;
            $xfer += $input->readListBegin($_etype521, $_size518);
            for ($_i522 = 0; $_i522 < $_size518; ++$_i522)
            {
              $elem523 = null;
              $elem523 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem523->read($input);
              $this->OuterCodes []= $elem523;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->CashDeskOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->CashDeskOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CashDesk');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 4);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IsFranchising !== null) {
      $xfer += $output->writeFieldBegin('IsFranchising', TType::BOOL, 5);
      $xfer += $output->writeBool($this->IsFranchising);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 6);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter524)
          {
            $xfer += $iter524->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 8);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDeskOfficeMaster !== null) {
      if (!is_object($this->CashDeskOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDeskOfficeMaster', TType::STRUCT, 9);
      $xfer += $this->CashDeskOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CashDeskFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $HierarchyBranch = null;
  /**
   * @var string[]
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $CashDeskOfficeMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'HierarchyBranch',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'CashDeskOfficeMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['HierarchyBranch'])) {
        $this->HierarchyBranch = $vals['HierarchyBranch'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['CashDeskOfficeMaster'])) {
        $this->CashDeskOfficeMaster = $vals['CashDeskOfficeMaster'];
      }
    }
  }

  public function getName() {
    return 'CashDeskFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HierarchyBranch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size525 = 0;
            $_etype528 = 0;
            $xfer += $input->readListBegin($_etype528, $_size525);
            for ($_i529 = 0; $_i529 < $_size525; ++$_i529)
            {
              $elem530 = null;
              $xfer += $input->readString($elem530);
              $this->StateMain []= $elem530;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->CashDeskOfficeMaster = new \Workabox\API\ObjectID();
            $xfer += $this->CashDeskOfficeMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CashDeskFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 4);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HierarchyBranch !== null) {
      $xfer += $output->writeFieldBegin('HierarchyBranch', TType::STRING, 5);
      $xfer += $output->writeString($this->HierarchyBranch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter531)
          {
            $xfer += $output->writeString($iter531);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDeskOfficeMaster !== null) {
      if (!is_object($this->CashDeskOfficeMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDeskOfficeMaster', TType::STRUCT, 7);
      $xfer += $this->CashDeskOfficeMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MarketingInstrumentType {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $FPName = null;
  /**
   * @var string
   */
  public $MICategory = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'FPName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'MICategory',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        7 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['FPName'])) {
        $this->FPName = $vals['FPName'];
      }
      if (isset($vals['MICategory'])) {
        $this->MICategory = $vals['MICategory'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'MarketingInstrumentType';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FPName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MICategory);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size532 = 0;
            $_etype535 = 0;
            $xfer += $input->readListBegin($_etype535, $_size532);
            for ($_i536 = 0; $_i536 < $_size532; ++$_i536)
            {
              $elem537 = null;
              $elem537 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem537->read($input);
              $this->OuterCodes []= $elem537;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MarketingInstrumentType');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FPName !== null) {
      $xfer += $output->writeFieldBegin('FPName', TType::STRING, 3);
      $xfer += $output->writeString($this->FPName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MICategory !== null) {
      $xfer += $output->writeFieldBegin('MICategory', TType::STRING, 4);
      $xfer += $output->writeString($this->MICategory);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 5);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter538)
          {
            $xfer += $iter538->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 7);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MarketingInstrumentTypeFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $FPName = null;
  /**
   * @var string[]
   */
  public $MICategory = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string[]
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'FPName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'MICategory',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['FPName'])) {
        $this->FPName = $vals['FPName'];
      }
      if (isset($vals['MICategory'])) {
        $this->MICategory = $vals['MICategory'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'MarketingInstrumentTypeFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FPName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->MICategory = array();
            $_size539 = 0;
            $_etype542 = 0;
            $xfer += $input->readListBegin($_etype542, $_size539);
            for ($_i543 = 0; $_i543 < $_size539; ++$_i543)
            {
              $elem544 = null;
              $xfer += $input->readString($elem544);
              $this->MICategory []= $elem544;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size545 = 0;
            $_etype548 = 0;
            $xfer += $input->readListBegin($_etype548, $_size545);
            for ($_i549 = 0; $_i549 < $_size545; ++$_i549)
            {
              $elem550 = null;
              $xfer += $input->readString($elem550);
              $this->StateMain []= $elem550;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MarketingInstrumentTypeFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FPName !== null) {
      $xfer += $output->writeFieldBegin('FPName', TType::STRING, 3);
      $xfer += $output->writeString($this->FPName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MICategory !== null) {
      if (!is_array($this->MICategory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MICategory', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->MICategory));
        {
          foreach ($this->MICategory as $iter551)
          {
            $xfer += $output->writeString($iter551);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 5);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter552)
          {
            $xfer += $output->writeString($iter552);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HistoryPartnerMILine {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ExpirationDate = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MAWhichAction = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RealizationWhichActualization = null;
  /**
   * @var string
   */
  public $ActualizationDate = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Partner = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ExpirationDate',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'MAWhichAction',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        3 => array(
          'var' => 'RealizationWhichActualization',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'ActualizationDate',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'Partner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ExpirationDate'])) {
        $this->ExpirationDate = $vals['ExpirationDate'];
      }
      if (isset($vals['MAWhichAction'])) {
        $this->MAWhichAction = $vals['MAWhichAction'];
      }
      if (isset($vals['RealizationWhichActualization'])) {
        $this->RealizationWhichActualization = $vals['RealizationWhichActualization'];
      }
      if (isset($vals['ActualizationDate'])) {
        $this->ActualizationDate = $vals['ActualizationDate'];
      }
      if (isset($vals['Partner'])) {
        $this->Partner = $vals['Partner'];
      }
    }
  }

  public function getName() {
    return 'HistoryPartnerMILine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ExpirationDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->MAWhichAction = new \Workabox\API\ObjectID();
            $xfer += $this->MAWhichAction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->RealizationWhichActualization = new \Workabox\API\ObjectID();
            $xfer += $this->RealizationWhichActualization->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ActualizationDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->Partner = new \Workabox\API\ObjectID();
            $xfer += $this->Partner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HistoryPartnerMILine');
    if ($this->ExpirationDate !== null) {
      $xfer += $output->writeFieldBegin('ExpirationDate', TType::STRING, 1);
      $xfer += $output->writeString($this->ExpirationDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MAWhichAction !== null) {
      if (!is_object($this->MAWhichAction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MAWhichAction', TType::STRUCT, 2);
      $xfer += $this->MAWhichAction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RealizationWhichActualization !== null) {
      if (!is_object($this->RealizationWhichActualization)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RealizationWhichActualization', TType::STRUCT, 3);
      $xfer += $this->RealizationWhichActualization->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ActualizationDate !== null) {
      $xfer += $output->writeFieldBegin('ActualizationDate', TType::STRING, 4);
      $xfer += $output->writeString($this->ActualizationDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Partner !== null) {
      if (!is_object($this->Partner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Partner', TType::STRUCT, 5);
      $xfer += $this->Partner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActualizingMI {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $BarCode = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MIType = null;
  /**
   * @var \Workabox\API\HistoryPartnerMILine[]
   */
  public $HistoryPartnerMI = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;
  /**
   * @var string
   */
  public $ActualizationDate = null;
  /**
   * @var string
   */
  public $ActionDateExpiration = null;
  /**
   * @var string
   */
  public $MIInfo = null;
  /**
   * @var string
   */
  public $IssueDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMI = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MIPartnersMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'BarCode',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'MIType',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'HistoryPartnerMI',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\HistoryPartnerMILine',
            ),
          ),
        6 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'ActualizationDate',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'ActionDateExpiration',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'MIInfo',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'IssueDate',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        12 => array(
          'var' => 'StateMI',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'MIPartnersMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['BarCode'])) {
        $this->BarCode = $vals['BarCode'];
      }
      if (isset($vals['MIType'])) {
        $this->MIType = $vals['MIType'];
      }
      if (isset($vals['HistoryPartnerMI'])) {
        $this->HistoryPartnerMI = $vals['HistoryPartnerMI'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
      if (isset($vals['ActualizationDate'])) {
        $this->ActualizationDate = $vals['ActualizationDate'];
      }
      if (isset($vals['ActionDateExpiration'])) {
        $this->ActionDateExpiration = $vals['ActionDateExpiration'];
      }
      if (isset($vals['MIInfo'])) {
        $this->MIInfo = $vals['MIInfo'];
      }
      if (isset($vals['IssueDate'])) {
        $this->IssueDate = $vals['IssueDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMI'])) {
        $this->StateMI = $vals['StateMI'];
      }
      if (isset($vals['MIPartnersMaster'])) {
        $this->MIPartnersMaster = $vals['MIPartnersMaster'];
      }
    }
  }

  public function getName() {
    return 'ActualizingMI';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->BarCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->MIType = new \Workabox\API\ObjectID();
            $xfer += $this->MIType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->HistoryPartnerMI = array();
            $_size553 = 0;
            $_etype556 = 0;
            $xfer += $input->readListBegin($_etype556, $_size553);
            for ($_i557 = 0; $_i557 < $_size553; ++$_i557)
            {
              $elem558 = null;
              $elem558 = new \Workabox\API\HistoryPartnerMILine();
              $xfer += $elem558->read($input);
              $this->HistoryPartnerMI []= $elem558;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ActualizationDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ActionDateExpiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MIInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->IssueDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size559 = 0;
            $_etype562 = 0;
            $xfer += $input->readListBegin($_etype562, $_size559);
            for ($_i563 = 0; $_i563 < $_size559; ++$_i563)
            {
              $elem564 = null;
              $elem564 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem564->read($input);
              $this->OuterCodes []= $elem564;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMI);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->MIPartnersMaster = new \Workabox\API\ObjectID();
            $xfer += $this->MIPartnersMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActualizingMI');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BarCode !== null) {
      $xfer += $output->writeFieldBegin('BarCode', TType::STRING, 3);
      $xfer += $output->writeString($this->BarCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MIType !== null) {
      if (!is_object($this->MIType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MIType', TType::STRUCT, 4);
      $xfer += $this->MIType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HistoryPartnerMI !== null) {
      if (!is_array($this->HistoryPartnerMI)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('HistoryPartnerMI', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->HistoryPartnerMI));
        {
          foreach ($this->HistoryPartnerMI as $iter565)
          {
            $xfer += $iter565->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 6);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ActualizationDate !== null) {
      $xfer += $output->writeFieldBegin('ActualizationDate', TType::STRING, 7);
      $xfer += $output->writeString($this->ActualizationDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ActionDateExpiration !== null) {
      $xfer += $output->writeFieldBegin('ActionDateExpiration', TType::STRING, 8);
      $xfer += $output->writeString($this->ActionDateExpiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MIInfo !== null) {
      $xfer += $output->writeFieldBegin('MIInfo', TType::STRING, 9);
      $xfer += $output->writeString($this->MIInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IssueDate !== null) {
      $xfer += $output->writeFieldBegin('IssueDate', TType::STRING, 10);
      $xfer += $output->writeString($this->IssueDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter566)
          {
            $xfer += $iter566->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMI !== null) {
      $xfer += $output->writeFieldBegin('StateMI', TType::STRING, 12);
      $xfer += $output->writeString($this->StateMI);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MIPartnersMaster !== null) {
      if (!is_object($this->MIPartnersMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MIPartnersMaster', TType::STRUCT, 13);
      $xfer += $this->MIPartnersMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ActualizingMIFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $BarCode = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MIType = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;
  /**
   * @var string
   */
  public $ActualizationDate = null;
  /**
   * @var string
   */
  public $ActionDateExpiration = null;
  /**
   * @var string
   */
  public $MIInfo = null;
  /**
   * @var string
   */
  public $IssueDate = null;
  /**
   * @var string[]
   */
  public $StateMI = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MIPartnersMaster = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'BarCode',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'MIType',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'ActualizationDate',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'ActionDateExpiration',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'MIInfo',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'IssueDate',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'StateMI',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        11 => array(
          'var' => 'MIPartnersMaster',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['BarCode'])) {
        $this->BarCode = $vals['BarCode'];
      }
      if (isset($vals['MIType'])) {
        $this->MIType = $vals['MIType'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
      if (isset($vals['ActualizationDate'])) {
        $this->ActualizationDate = $vals['ActualizationDate'];
      }
      if (isset($vals['ActionDateExpiration'])) {
        $this->ActionDateExpiration = $vals['ActionDateExpiration'];
      }
      if (isset($vals['MIInfo'])) {
        $this->MIInfo = $vals['MIInfo'];
      }
      if (isset($vals['IssueDate'])) {
        $this->IssueDate = $vals['IssueDate'];
      }
      if (isset($vals['StateMI'])) {
        $this->StateMI = $vals['StateMI'];
      }
      if (isset($vals['MIPartnersMaster'])) {
        $this->MIPartnersMaster = $vals['MIPartnersMaster'];
      }
    }
  }

  public function getName() {
    return 'ActualizingMIFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->BarCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->MIType = new \Workabox\API\ObjectID();
            $xfer += $this->MIType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ActualizationDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ActionDateExpiration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MIInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->IssueDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->StateMI = array();
            $_size567 = 0;
            $_etype570 = 0;
            $xfer += $input->readListBegin($_etype570, $_size567);
            for ($_i571 = 0; $_i571 < $_size567; ++$_i571)
            {
              $elem572 = null;
              $xfer += $input->readString($elem572);
              $this->StateMI []= $elem572;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->MIPartnersMaster = new \Workabox\API\ObjectID();
            $xfer += $this->MIPartnersMaster->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ActualizingMIFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BarCode !== null) {
      $xfer += $output->writeFieldBegin('BarCode', TType::STRING, 3);
      $xfer += $output->writeString($this->BarCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MIType !== null) {
      if (!is_object($this->MIType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MIType', TType::STRUCT, 4);
      $xfer += $this->MIType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 5);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ActualizationDate !== null) {
      $xfer += $output->writeFieldBegin('ActualizationDate', TType::STRING, 6);
      $xfer += $output->writeString($this->ActualizationDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ActionDateExpiration !== null) {
      $xfer += $output->writeFieldBegin('ActionDateExpiration', TType::STRING, 7);
      $xfer += $output->writeString($this->ActionDateExpiration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MIInfo !== null) {
      $xfer += $output->writeFieldBegin('MIInfo', TType::STRING, 8);
      $xfer += $output->writeString($this->MIInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IssueDate !== null) {
      $xfer += $output->writeFieldBegin('IssueDate', TType::STRING, 9);
      $xfer += $output->writeString($this->IssueDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMI !== null) {
      if (!is_array($this->StateMI)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMI', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMI));
        {
          foreach ($this->StateMI as $iter573)
          {
            $xfer += $output->writeString($iter573);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MIPartnersMaster !== null) {
      if (!is_object($this->MIPartnersMaster)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MIPartnersMaster', TType::STRUCT, 11);
      $xfer += $this->MIPartnersMaster->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HistoryMIPartnerLine {
  static $_TSPEC;

  /**
   * @var string
   */
  public $ExpirationDate = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RealizationWhichActualization = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MAWhichAction = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MI = null;
  /**
   * @var string
   */
  public $ActualizationDate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ExpirationDate',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'RealizationWhichActualization',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        3 => array(
          'var' => 'MAWhichAction',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'MI',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'ActualizationDate',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ExpirationDate'])) {
        $this->ExpirationDate = $vals['ExpirationDate'];
      }
      if (isset($vals['RealizationWhichActualization'])) {
        $this->RealizationWhichActualization = $vals['RealizationWhichActualization'];
      }
      if (isset($vals['MAWhichAction'])) {
        $this->MAWhichAction = $vals['MAWhichAction'];
      }
      if (isset($vals['MI'])) {
        $this->MI = $vals['MI'];
      }
      if (isset($vals['ActualizationDate'])) {
        $this->ActualizationDate = $vals['ActualizationDate'];
      }
    }
  }

  public function getName() {
    return 'HistoryMIPartnerLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ExpirationDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->RealizationWhichActualization = new \Workabox\API\ObjectID();
            $xfer += $this->RealizationWhichActualization->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->MAWhichAction = new \Workabox\API\ObjectID();
            $xfer += $this->MAWhichAction->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->MI = new \Workabox\API\ObjectID();
            $xfer += $this->MI->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ActualizationDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HistoryMIPartnerLine');
    if ($this->ExpirationDate !== null) {
      $xfer += $output->writeFieldBegin('ExpirationDate', TType::STRING, 1);
      $xfer += $output->writeString($this->ExpirationDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RealizationWhichActualization !== null) {
      if (!is_object($this->RealizationWhichActualization)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RealizationWhichActualization', TType::STRUCT, 2);
      $xfer += $this->RealizationWhichActualization->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MAWhichAction !== null) {
      if (!is_object($this->MAWhichAction)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MAWhichAction', TType::STRUCT, 3);
      $xfer += $this->MAWhichAction->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MI !== null) {
      if (!is_object($this->MI)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MI', TType::STRUCT, 4);
      $xfer += $this->MI->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ActualizationDate !== null) {
      $xfer += $output->writeFieldBegin('ActualizationDate', TType::STRING, 5);
      $xfer += $output->writeString($this->ActualizationDate);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CustomerNaturalPerson {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Birthday = null;
  /**
   * @var string
   */
  public $CanGetAdditionalInfo = null;
  /**
   * @var string
   */
  public $RefreshDate = null;
  /**
   * @var string
   */
  public $LastMovementDate = null;
  /**
   * @var double
   */
  public $AmountAccount = null;
  /**
   * @var double
   */
  public $SumLastMove = null;
  /**
   * @var string
   */
  public $InformationMessage = null;
  /**
   * @var \Workabox\API\HistoryMIPartnerLine[]
   */
  public $HistoryMIPartner = null;
  /**
   * @var string
   */
  public $P425 = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $EMail = null;
  /**
   * @var string
   */
  public $MobilePhone = null;
  /**
   * @var string
   */
  public $HomePhone = null;
  /**
   * @var string
   */
  public $SecondName = null;
  /**
   * @var string
   */
  public $FirstName = null;
  /**
   * @var string
   */
  public $MiddleName = null;
  /**
   * @var int
   */
  public $BirthDay_Day = null;
  /**
   * @var string
   */
  public $BirthDay_Month = null;
  /**
   * @var int
   */
  public $BirthDay_Year = null;
  /**
   * @var string
   */
  public $Sex = null;
  /**
   * @var \Workabox\API\UserStringsLine[]
   */
  public $UserStrings = null;
  /**
   * @var \Workabox\API\UserLongStringsLine[]
   */
  public $UserLongStrings = null;
  /**
   * @var \Workabox\API\UserDatesLine[]
   */
  public $UserDates = null;
  /**
   * @var \Workabox\API\UserNumbersLine[]
   */
  public $UserNumbers = null;
  /**
   * @var \Workabox\API\UserCatalogsLine[]
   */
  public $UserCatalogs = null;
  /**
   * @var \Workabox\API\UserCatalogsViewLine[]
   */
  public $UserCatalogsView = null;
  /**
   * @var string
   */
  public $StateMain = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $MIPartnersSlave = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Birthday',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'CanGetAdditionalInfo',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'RefreshDate',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'LastMovementDate',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'AmountAccount',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'SumLastMove',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'InformationMessage',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'HistoryMIPartner',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\HistoryMIPartnerLine',
            ),
          ),
        11 => array(
          'var' => 'P425',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        13 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'EMail',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'MobilePhone',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'HomePhone',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'SecondName',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'FirstName',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'MiddleName',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'BirthDay_Day',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'BirthDay_Month',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'BirthDay_Year',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'Sex',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'UserStrings',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserStringsLine',
            ),
          ),
        25 => array(
          'var' => 'UserLongStrings',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserLongStringsLine',
            ),
          ),
        26 => array(
          'var' => 'UserDates',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserDatesLine',
            ),
          ),
        27 => array(
          'var' => 'UserNumbers',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserNumbersLine',
            ),
          ),
        28 => array(
          'var' => 'UserCatalogs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserCatalogsLine',
            ),
          ),
        29 => array(
          'var' => 'UserCatalogsView',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserCatalogsViewLine',
            ),
          ),
        30 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'MIPartnersSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Birthday'])) {
        $this->Birthday = $vals['Birthday'];
      }
      if (isset($vals['CanGetAdditionalInfo'])) {
        $this->CanGetAdditionalInfo = $vals['CanGetAdditionalInfo'];
      }
      if (isset($vals['RefreshDate'])) {
        $this->RefreshDate = $vals['RefreshDate'];
      }
      if (isset($vals['LastMovementDate'])) {
        $this->LastMovementDate = $vals['LastMovementDate'];
      }
      if (isset($vals['AmountAccount'])) {
        $this->AmountAccount = $vals['AmountAccount'];
      }
      if (isset($vals['SumLastMove'])) {
        $this->SumLastMove = $vals['SumLastMove'];
      }
      if (isset($vals['InformationMessage'])) {
        $this->InformationMessage = $vals['InformationMessage'];
      }
      if (isset($vals['HistoryMIPartner'])) {
        $this->HistoryMIPartner = $vals['HistoryMIPartner'];
      }
      if (isset($vals['P425'])) {
        $this->P425 = $vals['P425'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['EMail'])) {
        $this->EMail = $vals['EMail'];
      }
      if (isset($vals['MobilePhone'])) {
        $this->MobilePhone = $vals['MobilePhone'];
      }
      if (isset($vals['HomePhone'])) {
        $this->HomePhone = $vals['HomePhone'];
      }
      if (isset($vals['SecondName'])) {
        $this->SecondName = $vals['SecondName'];
      }
      if (isset($vals['FirstName'])) {
        $this->FirstName = $vals['FirstName'];
      }
      if (isset($vals['MiddleName'])) {
        $this->MiddleName = $vals['MiddleName'];
      }
      if (isset($vals['BirthDay_Day'])) {
        $this->BirthDay_Day = $vals['BirthDay_Day'];
      }
      if (isset($vals['BirthDay_Month'])) {
        $this->BirthDay_Month = $vals['BirthDay_Month'];
      }
      if (isset($vals['BirthDay_Year'])) {
        $this->BirthDay_Year = $vals['BirthDay_Year'];
      }
      if (isset($vals['Sex'])) {
        $this->Sex = $vals['Sex'];
      }
      if (isset($vals['UserStrings'])) {
        $this->UserStrings = $vals['UserStrings'];
      }
      if (isset($vals['UserLongStrings'])) {
        $this->UserLongStrings = $vals['UserLongStrings'];
      }
      if (isset($vals['UserDates'])) {
        $this->UserDates = $vals['UserDates'];
      }
      if (isset($vals['UserNumbers'])) {
        $this->UserNumbers = $vals['UserNumbers'];
      }
      if (isset($vals['UserCatalogs'])) {
        $this->UserCatalogs = $vals['UserCatalogs'];
      }
      if (isset($vals['UserCatalogsView'])) {
        $this->UserCatalogsView = $vals['UserCatalogsView'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
      if (isset($vals['MIPartnersSlave'])) {
        $this->MIPartnersSlave = $vals['MIPartnersSlave'];
      }
    }
  }

  public function getName() {
    return 'CustomerNaturalPerson';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Birthday);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CanGetAdditionalInfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->RefreshDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->LastMovementDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->AmountAccount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SumLastMove);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->InformationMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->HistoryMIPartner = array();
            $_size574 = 0;
            $_etype577 = 0;
            $xfer += $input->readListBegin($_etype577, $_size574);
            for ($_i578 = 0; $_i578 < $_size574; ++$_i578)
            {
              $elem579 = null;
              $elem579 = new \Workabox\API\HistoryMIPartnerLine();
              $xfer += $elem579->read($input);
              $this->HistoryMIPartner []= $elem579;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->P425);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size580 = 0;
            $_etype583 = 0;
            $xfer += $input->readListBegin($_etype583, $_size580);
            for ($_i584 = 0; $_i584 < $_size580; ++$_i584)
            {
              $elem585 = null;
              $elem585 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem585->read($input);
              $this->OuterCodes []= $elem585;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->EMail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MobilePhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HomePhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SecondName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FirstName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MiddleName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->BirthDay_Day);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->BirthDay_Month);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->BirthDay_Year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Sex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::LST) {
            $this->UserStrings = array();
            $_size586 = 0;
            $_etype589 = 0;
            $xfer += $input->readListBegin($_etype589, $_size586);
            for ($_i590 = 0; $_i590 < $_size586; ++$_i590)
            {
              $elem591 = null;
              $elem591 = new \Workabox\API\UserStringsLine();
              $xfer += $elem591->read($input);
              $this->UserStrings []= $elem591;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::LST) {
            $this->UserLongStrings = array();
            $_size592 = 0;
            $_etype595 = 0;
            $xfer += $input->readListBegin($_etype595, $_size592);
            for ($_i596 = 0; $_i596 < $_size592; ++$_i596)
            {
              $elem597 = null;
              $elem597 = new \Workabox\API\UserLongStringsLine();
              $xfer += $elem597->read($input);
              $this->UserLongStrings []= $elem597;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::LST) {
            $this->UserDates = array();
            $_size598 = 0;
            $_etype601 = 0;
            $xfer += $input->readListBegin($_etype601, $_size598);
            for ($_i602 = 0; $_i602 < $_size598; ++$_i602)
            {
              $elem603 = null;
              $elem603 = new \Workabox\API\UserDatesLine();
              $xfer += $elem603->read($input);
              $this->UserDates []= $elem603;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::LST) {
            $this->UserNumbers = array();
            $_size604 = 0;
            $_etype607 = 0;
            $xfer += $input->readListBegin($_etype607, $_size604);
            for ($_i608 = 0; $_i608 < $_size604; ++$_i608)
            {
              $elem609 = null;
              $elem609 = new \Workabox\API\UserNumbersLine();
              $xfer += $elem609->read($input);
              $this->UserNumbers []= $elem609;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::LST) {
            $this->UserCatalogs = array();
            $_size610 = 0;
            $_etype613 = 0;
            $xfer += $input->readListBegin($_etype613, $_size610);
            for ($_i614 = 0; $_i614 < $_size610; ++$_i614)
            {
              $elem615 = null;
              $elem615 = new \Workabox\API\UserCatalogsLine();
              $xfer += $elem615->read($input);
              $this->UserCatalogs []= $elem615;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::LST) {
            $this->UserCatalogsView = array();
            $_size616 = 0;
            $_etype619 = 0;
            $xfer += $input->readListBegin($_etype619, $_size616);
            for ($_i620 = 0; $_i620 < $_size616; ++$_i620)
            {
              $elem621 = null;
              $elem621 = new \Workabox\API\UserCatalogsViewLine();
              $xfer += $elem621->read($input);
              $this->UserCatalogsView []= $elem621;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::LST) {
            $this->MIPartnersSlave = array();
            $_size622 = 0;
            $_etype625 = 0;
            $xfer += $input->readListBegin($_etype625, $_size622);
            for ($_i626 = 0; $_i626 < $_size622; ++$_i626)
            {
              $elem627 = null;
              $elem627 = new \Workabox\API\ObjectID();
              $xfer += $elem627->read($input);
              $this->MIPartnersSlave []= $elem627;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CustomerNaturalPerson');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Birthday !== null) {
      $xfer += $output->writeFieldBegin('Birthday', TType::STRING, 3);
      $xfer += $output->writeString($this->Birthday);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CanGetAdditionalInfo !== null) {
      $xfer += $output->writeFieldBegin('CanGetAdditionalInfo', TType::STRING, 4);
      $xfer += $output->writeString($this->CanGetAdditionalInfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RefreshDate !== null) {
      $xfer += $output->writeFieldBegin('RefreshDate', TType::STRING, 5);
      $xfer += $output->writeString($this->RefreshDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LastMovementDate !== null) {
      $xfer += $output->writeFieldBegin('LastMovementDate', TType::STRING, 6);
      $xfer += $output->writeString($this->LastMovementDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AmountAccount !== null) {
      $xfer += $output->writeFieldBegin('AmountAccount', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->AmountAccount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SumLastMove !== null) {
      $xfer += $output->writeFieldBegin('SumLastMove', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->SumLastMove);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->InformationMessage !== null) {
      $xfer += $output->writeFieldBegin('InformationMessage', TType::STRING, 9);
      $xfer += $output->writeString($this->InformationMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HistoryMIPartner !== null) {
      if (!is_array($this->HistoryMIPartner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('HistoryMIPartner', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->HistoryMIPartner));
        {
          foreach ($this->HistoryMIPartner as $iter628)
          {
            $xfer += $iter628->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->P425 !== null) {
      $xfer += $output->writeFieldBegin('P425', TType::STRING, 11);
      $xfer += $output->writeString($this->P425);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter629)
          {
            $xfer += $iter629->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 13);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->EMail !== null) {
      $xfer += $output->writeFieldBegin('EMail', TType::STRING, 14);
      $xfer += $output->writeString($this->EMail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MobilePhone !== null) {
      $xfer += $output->writeFieldBegin('MobilePhone', TType::STRING, 15);
      $xfer += $output->writeString($this->MobilePhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HomePhone !== null) {
      $xfer += $output->writeFieldBegin('HomePhone', TType::STRING, 16);
      $xfer += $output->writeString($this->HomePhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SecondName !== null) {
      $xfer += $output->writeFieldBegin('SecondName', TType::STRING, 17);
      $xfer += $output->writeString($this->SecondName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FirstName !== null) {
      $xfer += $output->writeFieldBegin('FirstName', TType::STRING, 18);
      $xfer += $output->writeString($this->FirstName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MiddleName !== null) {
      $xfer += $output->writeFieldBegin('MiddleName', TType::STRING, 19);
      $xfer += $output->writeString($this->MiddleName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Day !== null) {
      $xfer += $output->writeFieldBegin('BirthDay_Day', TType::I32, 20);
      $xfer += $output->writeI32($this->BirthDay_Day);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Month !== null) {
      $xfer += $output->writeFieldBegin('BirthDay_Month', TType::STRING, 21);
      $xfer += $output->writeString($this->BirthDay_Month);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Year !== null) {
      $xfer += $output->writeFieldBegin('BirthDay_Year', TType::I32, 22);
      $xfer += $output->writeI32($this->BirthDay_Year);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sex !== null) {
      $xfer += $output->writeFieldBegin('Sex', TType::STRING, 23);
      $xfer += $output->writeString($this->Sex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserStrings !== null) {
      if (!is_array($this->UserStrings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserStrings', TType::LST, 24);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserStrings));
        {
          foreach ($this->UserStrings as $iter630)
          {
            $xfer += $iter630->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserLongStrings !== null) {
      if (!is_array($this->UserLongStrings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserLongStrings', TType::LST, 25);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserLongStrings));
        {
          foreach ($this->UserLongStrings as $iter631)
          {
            $xfer += $iter631->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserDates !== null) {
      if (!is_array($this->UserDates)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserDates', TType::LST, 26);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserDates));
        {
          foreach ($this->UserDates as $iter632)
          {
            $xfer += $iter632->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserNumbers !== null) {
      if (!is_array($this->UserNumbers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserNumbers', TType::LST, 27);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserNumbers));
        {
          foreach ($this->UserNumbers as $iter633)
          {
            $xfer += $iter633->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserCatalogs !== null) {
      if (!is_array($this->UserCatalogs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserCatalogs', TType::LST, 28);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserCatalogs));
        {
          foreach ($this->UserCatalogs as $iter634)
          {
            $xfer += $iter634->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UserCatalogsView !== null) {
      if (!is_array($this->UserCatalogsView)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UserCatalogsView', TType::LST, 29);
      {
        $output->writeListBegin(TType::STRUCT, count($this->UserCatalogsView));
        {
          foreach ($this->UserCatalogsView as $iter635)
          {
            $xfer += $iter635->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 30);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MIPartnersSlave !== null) {
      if (!is_array($this->MIPartnersSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MIPartnersSlave', TType::LST, 31);
      {
        $output->writeListBegin(TType::STRUCT, count($this->MIPartnersSlave));
        {
          foreach ($this->MIPartnersSlave as $iter636)
          {
            $xfer += $iter636->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CustomerNaturalPersonFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Birthday = null;
  /**
   * @var string[]
   */
  public $CanGetAdditionalInfo = null;
  /**
   * @var string
   */
  public $RefreshDate = null;
  /**
   * @var string
   */
  public $LastMovementDate = null;
  /**
   * @var string
   */
  public $AmountAccount = null;
  /**
   * @var string
   */
  public $SumLastMove = null;
  /**
   * @var string
   */
  public $InformationMessage = null;
  /**
   * @var string
   */
  public $P425 = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $EMail = null;
  /**
   * @var string
   */
  public $MobilePhone = null;
  /**
   * @var string
   */
  public $HomePhone = null;
  /**
   * @var string
   */
  public $SecondName = null;
  /**
   * @var string
   */
  public $FirstName = null;
  /**
   * @var string
   */
  public $MiddleName = null;
  /**
   * @var string
   */
  public $BirthDay_Day = null;
  /**
   * @var string[]
   */
  public $BirthDay_Month = null;
  /**
   * @var string
   */
  public $BirthDay_Year = null;
  /**
   * @var string[]
   */
  public $Sex = null;
  /**
   * @var string[]
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Birthday',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'CanGetAdditionalInfo',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        5 => array(
          'var' => 'RefreshDate',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'LastMovementDate',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'AmountAccount',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'SumLastMove',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'InformationMessage',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'P425',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'EMail',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'MobilePhone',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'HomePhone',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'SecondName',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'FirstName',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'MiddleName',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'BirthDay_Day',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'BirthDay_Month',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        20 => array(
          'var' => 'BirthDay_Year',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'Sex',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        22 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Birthday'])) {
        $this->Birthday = $vals['Birthday'];
      }
      if (isset($vals['CanGetAdditionalInfo'])) {
        $this->CanGetAdditionalInfo = $vals['CanGetAdditionalInfo'];
      }
      if (isset($vals['RefreshDate'])) {
        $this->RefreshDate = $vals['RefreshDate'];
      }
      if (isset($vals['LastMovementDate'])) {
        $this->LastMovementDate = $vals['LastMovementDate'];
      }
      if (isset($vals['AmountAccount'])) {
        $this->AmountAccount = $vals['AmountAccount'];
      }
      if (isset($vals['SumLastMove'])) {
        $this->SumLastMove = $vals['SumLastMove'];
      }
      if (isset($vals['InformationMessage'])) {
        $this->InformationMessage = $vals['InformationMessage'];
      }
      if (isset($vals['P425'])) {
        $this->P425 = $vals['P425'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['EMail'])) {
        $this->EMail = $vals['EMail'];
      }
      if (isset($vals['MobilePhone'])) {
        $this->MobilePhone = $vals['MobilePhone'];
      }
      if (isset($vals['HomePhone'])) {
        $this->HomePhone = $vals['HomePhone'];
      }
      if (isset($vals['SecondName'])) {
        $this->SecondName = $vals['SecondName'];
      }
      if (isset($vals['FirstName'])) {
        $this->FirstName = $vals['FirstName'];
      }
      if (isset($vals['MiddleName'])) {
        $this->MiddleName = $vals['MiddleName'];
      }
      if (isset($vals['BirthDay_Day'])) {
        $this->BirthDay_Day = $vals['BirthDay_Day'];
      }
      if (isset($vals['BirthDay_Month'])) {
        $this->BirthDay_Month = $vals['BirthDay_Month'];
      }
      if (isset($vals['BirthDay_Year'])) {
        $this->BirthDay_Year = $vals['BirthDay_Year'];
      }
      if (isset($vals['Sex'])) {
        $this->Sex = $vals['Sex'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'CustomerNaturalPersonFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Birthday);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->CanGetAdditionalInfo = array();
            $_size637 = 0;
            $_etype640 = 0;
            $xfer += $input->readListBegin($_etype640, $_size637);
            for ($_i641 = 0; $_i641 < $_size637; ++$_i641)
            {
              $elem642 = null;
              $xfer += $input->readString($elem642);
              $this->CanGetAdditionalInfo []= $elem642;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->RefreshDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->LastMovementDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->AmountAccount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SumLastMove);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->InformationMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->P425);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->EMail);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MobilePhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HomePhone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SecondName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FirstName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MiddleName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->BirthDay_Day);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->BirthDay_Month = array();
            $_size643 = 0;
            $_etype646 = 0;
            $xfer += $input->readListBegin($_etype646, $_size643);
            for ($_i647 = 0; $_i647 < $_size643; ++$_i647)
            {
              $elem648 = null;
              $xfer += $input->readString($elem648);
              $this->BirthDay_Month []= $elem648;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->BirthDay_Year);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::LST) {
            $this->Sex = array();
            $_size649 = 0;
            $_etype652 = 0;
            $xfer += $input->readListBegin($_etype652, $_size649);
            for ($_i653 = 0; $_i653 < $_size649; ++$_i653)
            {
              $elem654 = null;
              $xfer += $input->readString($elem654);
              $this->Sex []= $elem654;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size655 = 0;
            $_etype658 = 0;
            $xfer += $input->readListBegin($_etype658, $_size655);
            for ($_i659 = 0; $_i659 < $_size655; ++$_i659)
            {
              $elem660 = null;
              $xfer += $input->readString($elem660);
              $this->StateMain []= $elem660;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CustomerNaturalPersonFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Birthday !== null) {
      $xfer += $output->writeFieldBegin('Birthday', TType::STRING, 3);
      $xfer += $output->writeString($this->Birthday);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CanGetAdditionalInfo !== null) {
      if (!is_array($this->CanGetAdditionalInfo)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CanGetAdditionalInfo', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRING, count($this->CanGetAdditionalInfo));
        {
          foreach ($this->CanGetAdditionalInfo as $iter661)
          {
            $xfer += $output->writeString($iter661);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RefreshDate !== null) {
      $xfer += $output->writeFieldBegin('RefreshDate', TType::STRING, 5);
      $xfer += $output->writeString($this->RefreshDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LastMovementDate !== null) {
      $xfer += $output->writeFieldBegin('LastMovementDate', TType::STRING, 6);
      $xfer += $output->writeString($this->LastMovementDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AmountAccount !== null) {
      $xfer += $output->writeFieldBegin('AmountAccount', TType::STRING, 7);
      $xfer += $output->writeString($this->AmountAccount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SumLastMove !== null) {
      $xfer += $output->writeFieldBegin('SumLastMove', TType::STRING, 8);
      $xfer += $output->writeString($this->SumLastMove);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->InformationMessage !== null) {
      $xfer += $output->writeFieldBegin('InformationMessage', TType::STRING, 9);
      $xfer += $output->writeString($this->InformationMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->P425 !== null) {
      $xfer += $output->writeFieldBegin('P425', TType::STRING, 10);
      $xfer += $output->writeString($this->P425);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 11);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->EMail !== null) {
      $xfer += $output->writeFieldBegin('EMail', TType::STRING, 12);
      $xfer += $output->writeString($this->EMail);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MobilePhone !== null) {
      $xfer += $output->writeFieldBegin('MobilePhone', TType::STRING, 13);
      $xfer += $output->writeString($this->MobilePhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HomePhone !== null) {
      $xfer += $output->writeFieldBegin('HomePhone', TType::STRING, 14);
      $xfer += $output->writeString($this->HomePhone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SecondName !== null) {
      $xfer += $output->writeFieldBegin('SecondName', TType::STRING, 15);
      $xfer += $output->writeString($this->SecondName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FirstName !== null) {
      $xfer += $output->writeFieldBegin('FirstName', TType::STRING, 16);
      $xfer += $output->writeString($this->FirstName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MiddleName !== null) {
      $xfer += $output->writeFieldBegin('MiddleName', TType::STRING, 17);
      $xfer += $output->writeString($this->MiddleName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Day !== null) {
      $xfer += $output->writeFieldBegin('BirthDay_Day', TType::STRING, 18);
      $xfer += $output->writeString($this->BirthDay_Day);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Month !== null) {
      if (!is_array($this->BirthDay_Month)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('BirthDay_Month', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRING, count($this->BirthDay_Month));
        {
          foreach ($this->BirthDay_Month as $iter662)
          {
            $xfer += $output->writeString($iter662);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BirthDay_Year !== null) {
      $xfer += $output->writeFieldBegin('BirthDay_Year', TType::STRING, 20);
      $xfer += $output->writeString($this->BirthDay_Year);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sex !== null) {
      if (!is_array($this->Sex)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Sex', TType::LST, 21);
      {
        $output->writeListBegin(TType::STRING, count($this->Sex));
        {
          foreach ($this->Sex as $iter663)
          {
            $xfer += $output->writeString($iter663);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 22);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter664)
          {
            $xfer += $output->writeString($iter664);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsInMoveLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $SummTotal = null;
  /**
   * @var double
   */
  public $Quantity = null;
  /**
   * @var double
   */
  public $Price = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'SummTotal',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'Quantity',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'Price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['SummTotal'])) {
        $this->SummTotal = $vals['SummTotal'];
      }
      if (isset($vals['Quantity'])) {
        $this->Quantity = $vals['Quantity'];
      }
      if (isset($vals['Price'])) {
        $this->Price = $vals['Price'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'GoodsInMoveLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SummTotal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsInMoveLine');
    if ($this->SummTotal !== null) {
      $xfer += $output->writeFieldBegin('SummTotal', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->SummTotal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Quantity !== null) {
      $xfer += $output->writeFieldBegin('Quantity', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->Quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Price !== null) {
      $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->Price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 4);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsIncome {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Recipient = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Supplier = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleReceiver = null;
  /**
   * @var \Workabox\API\GoodsInMoveLine[]
   */
  public $GoodsInMove = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateGoodsDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Recipient',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'Supplier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'ResponsibleReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'GoodsInMove',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsInMoveLine',
            ),
          ),
        7 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        12 => array(
          'var' => 'StateGoodsDocuments',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Recipient'])) {
        $this->Recipient = $vals['Recipient'];
      }
      if (isset($vals['Supplier'])) {
        $this->Supplier = $vals['Supplier'];
      }
      if (isset($vals['ResponsibleReceiver'])) {
        $this->ResponsibleReceiver = $vals['ResponsibleReceiver'];
      }
      if (isset($vals['GoodsInMove'])) {
        $this->GoodsInMove = $vals['GoodsInMove'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateGoodsDocuments'])) {
        $this->StateGoodsDocuments = $vals['StateGoodsDocuments'];
      }
    }
  }

  public function getName() {
    return 'GoodsIncome';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->Recipient = new \Workabox\API\ObjectID();
            $xfer += $this->Recipient->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Supplier = new \Workabox\API\ObjectID();
            $xfer += $this->Supplier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->GoodsInMove = array();
            $_size665 = 0;
            $_etype668 = 0;
            $xfer += $input->readListBegin($_etype668, $_size665);
            for ($_i669 = 0; $_i669 < $_size665; ++$_i669)
            {
              $elem670 = null;
              $elem670 = new \Workabox\API\GoodsInMoveLine();
              $xfer += $elem670->read($input);
              $this->GoodsInMove []= $elem670;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size671 = 0;
            $_etype674 = 0;
            $xfer += $input->readListBegin($_etype674, $_size671);
            for ($_i675 = 0; $_i675 < $_size671; ++$_i675)
            {
              $elem676 = null;
              $elem676 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem676->read($input);
              $this->OuterCodes []= $elem676;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateGoodsDocuments);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsIncome');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Recipient !== null) {
      if (!is_object($this->Recipient)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Recipient', TType::STRUCT, 3);
      $xfer += $this->Recipient->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Supplier !== null) {
      if (!is_object($this->Supplier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Supplier', TType::STRUCT, 4);
      $xfer += $this->Supplier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleReceiver !== null) {
      if (!is_object($this->ResponsibleReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleReceiver', TType::STRUCT, 5);
      $xfer += $this->ResponsibleReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsInMove !== null) {
      if (!is_array($this->GoodsInMove)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsInMove', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsInMove));
        {
          foreach ($this->GoodsInMove as $iter677)
          {
            $xfer += $iter677->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 7);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 9);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 10);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter678)
          {
            $xfer += $iter678->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoodsDocuments !== null) {
      $xfer += $output->writeFieldBegin('StateGoodsDocuments', TType::STRING, 12);
      $xfer += $output->writeString($this->StateGoodsDocuments);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsIncomeFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Recipient = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Supplier = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleReceiver = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateGoodsDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Recipient',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'Supplier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'ResponsibleReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'StateGoodsDocuments',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Recipient'])) {
        $this->Recipient = $vals['Recipient'];
      }
      if (isset($vals['Supplier'])) {
        $this->Supplier = $vals['Supplier'];
      }
      if (isset($vals['ResponsibleReceiver'])) {
        $this->ResponsibleReceiver = $vals['ResponsibleReceiver'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateGoodsDocuments'])) {
        $this->StateGoodsDocuments = $vals['StateGoodsDocuments'];
      }
    }
  }

  public function getName() {
    return 'GoodsIncomeFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->Recipient = new \Workabox\API\ObjectID();
            $xfer += $this->Recipient->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Supplier = new \Workabox\API\ObjectID();
            $xfer += $this->Supplier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->StateGoodsDocuments = array();
            $_size679 = 0;
            $_etype682 = 0;
            $xfer += $input->readListBegin($_etype682, $_size679);
            for ($_i683 = 0; $_i683 < $_size679; ++$_i683)
            {
              $elem684 = null;
              $xfer += $input->readString($elem684);
              $this->StateGoodsDocuments []= $elem684;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsIncomeFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Recipient !== null) {
      if (!is_object($this->Recipient)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Recipient', TType::STRUCT, 3);
      $xfer += $this->Recipient->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Supplier !== null) {
      if (!is_object($this->Supplier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Supplier', TType::STRUCT, 4);
      $xfer += $this->Supplier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleReceiver !== null) {
      if (!is_object($this->ResponsibleReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleReceiver', TType::STRUCT, 5);
      $xfer += $this->ResponsibleReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 6);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 7);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 8);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 9);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoodsDocuments !== null) {
      if (!is_array($this->StateGoodsDocuments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateGoodsDocuments', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRING, count($this->StateGoodsDocuments));
        {
          foreach ($this->StateGoodsDocuments as $iter685)
          {
            $xfer += $output->writeString($iter685);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsMove {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Sender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Recipient = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleReceiver = null;
  /**
   * @var \Workabox\API\GoodsInMoveLine[]
   */
  public $GoodsInMove = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateGoodsDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Sender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'Recipient',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'ResponsibleSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'ResponsibleReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'GoodsInMove',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsInMoveLine',
            ),
          ),
        8 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        13 => array(
          'var' => 'StateGoodsDocuments',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Sender'])) {
        $this->Sender = $vals['Sender'];
      }
      if (isset($vals['Recipient'])) {
        $this->Recipient = $vals['Recipient'];
      }
      if (isset($vals['ResponsibleSender'])) {
        $this->ResponsibleSender = $vals['ResponsibleSender'];
      }
      if (isset($vals['ResponsibleReceiver'])) {
        $this->ResponsibleReceiver = $vals['ResponsibleReceiver'];
      }
      if (isset($vals['GoodsInMove'])) {
        $this->GoodsInMove = $vals['GoodsInMove'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateGoodsDocuments'])) {
        $this->StateGoodsDocuments = $vals['StateGoodsDocuments'];
      }
    }
  }

  public function getName() {
    return 'GoodsMove';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->Sender = new \Workabox\API\ObjectID();
            $xfer += $this->Sender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Recipient = new \Workabox\API\ObjectID();
            $xfer += $this->Recipient->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleSender = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->GoodsInMove = array();
            $_size686 = 0;
            $_etype689 = 0;
            $xfer += $input->readListBegin($_etype689, $_size686);
            for ($_i690 = 0; $_i690 < $_size686; ++$_i690)
            {
              $elem691 = null;
              $elem691 = new \Workabox\API\GoodsInMoveLine();
              $xfer += $elem691->read($input);
              $this->GoodsInMove []= $elem691;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size692 = 0;
            $_etype695 = 0;
            $xfer += $input->readListBegin($_etype695, $_size692);
            for ($_i696 = 0; $_i696 < $_size692; ++$_i696)
            {
              $elem697 = null;
              $elem697 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem697->read($input);
              $this->OuterCodes []= $elem697;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateGoodsDocuments);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsMove');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sender !== null) {
      if (!is_object($this->Sender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Sender', TType::STRUCT, 3);
      $xfer += $this->Sender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Recipient !== null) {
      if (!is_object($this->Recipient)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Recipient', TType::STRUCT, 4);
      $xfer += $this->Recipient->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleSender !== null) {
      if (!is_object($this->ResponsibleSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleSender', TType::STRUCT, 5);
      $xfer += $this->ResponsibleSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleReceiver !== null) {
      if (!is_object($this->ResponsibleReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleReceiver', TType::STRUCT, 6);
      $xfer += $this->ResponsibleReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsInMove !== null) {
      if (!is_array($this->GoodsInMove)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsInMove', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsInMove));
        {
          foreach ($this->GoodsInMove as $iter698)
          {
            $xfer += $iter698->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 8);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 10);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 11);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter699)
          {
            $xfer += $iter699->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoodsDocuments !== null) {
      $xfer += $output->writeFieldBegin('StateGoodsDocuments', TType::STRING, 13);
      $xfer += $output->writeString($this->StateGoodsDocuments);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsMoveFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Sender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Recipient = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleReceiver = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateGoodsDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Sender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'Recipient',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'ResponsibleSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'ResponsibleReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'StateGoodsDocuments',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Sender'])) {
        $this->Sender = $vals['Sender'];
      }
      if (isset($vals['Recipient'])) {
        $this->Recipient = $vals['Recipient'];
      }
      if (isset($vals['ResponsibleSender'])) {
        $this->ResponsibleSender = $vals['ResponsibleSender'];
      }
      if (isset($vals['ResponsibleReceiver'])) {
        $this->ResponsibleReceiver = $vals['ResponsibleReceiver'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateGoodsDocuments'])) {
        $this->StateGoodsDocuments = $vals['StateGoodsDocuments'];
      }
    }
  }

  public function getName() {
    return 'GoodsMoveFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->Sender = new \Workabox\API\ObjectID();
            $xfer += $this->Sender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Recipient = new \Workabox\API\ObjectID();
            $xfer += $this->Recipient->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleSender = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->StateGoodsDocuments = array();
            $_size700 = 0;
            $_etype703 = 0;
            $xfer += $input->readListBegin($_etype703, $_size700);
            for ($_i704 = 0; $_i704 < $_size700; ++$_i704)
            {
              $elem705 = null;
              $xfer += $input->readString($elem705);
              $this->StateGoodsDocuments []= $elem705;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsMoveFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sender !== null) {
      if (!is_object($this->Sender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Sender', TType::STRUCT, 3);
      $xfer += $this->Sender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Recipient !== null) {
      if (!is_object($this->Recipient)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Recipient', TType::STRUCT, 4);
      $xfer += $this->Recipient->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleSender !== null) {
      if (!is_object($this->ResponsibleSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleSender', TType::STRUCT, 5);
      $xfer += $this->ResponsibleSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleReceiver !== null) {
      if (!is_object($this->ResponsibleReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleReceiver', TType::STRUCT, 6);
      $xfer += $this->ResponsibleReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 7);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 8);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 9);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 10);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoodsDocuments !== null) {
      if (!is_array($this->StateGoodsDocuments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateGoodsDocuments', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRING, count($this->StateGoodsDocuments));
        {
          foreach ($this->StateGoodsDocuments as $iter706)
          {
            $xfer += $output->writeString($iter706);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsReturn {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Sender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Supplier = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleSender = null;
  /**
   * @var \Workabox\API\GoodsInMoveLine[]
   */
  public $GoodsInMove = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateGoodsDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Sender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'Supplier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'ResponsibleSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'GoodsInMove',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsInMoveLine',
            ),
          ),
        7 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        12 => array(
          'var' => 'StateGoodsDocuments',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Sender'])) {
        $this->Sender = $vals['Sender'];
      }
      if (isset($vals['Supplier'])) {
        $this->Supplier = $vals['Supplier'];
      }
      if (isset($vals['ResponsibleSender'])) {
        $this->ResponsibleSender = $vals['ResponsibleSender'];
      }
      if (isset($vals['GoodsInMove'])) {
        $this->GoodsInMove = $vals['GoodsInMove'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateGoodsDocuments'])) {
        $this->StateGoodsDocuments = $vals['StateGoodsDocuments'];
      }
    }
  }

  public function getName() {
    return 'GoodsReturn';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->Sender = new \Workabox\API\ObjectID();
            $xfer += $this->Sender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Supplier = new \Workabox\API\ObjectID();
            $xfer += $this->Supplier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleSender = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->GoodsInMove = array();
            $_size707 = 0;
            $_etype710 = 0;
            $xfer += $input->readListBegin($_etype710, $_size707);
            for ($_i711 = 0; $_i711 < $_size707; ++$_i711)
            {
              $elem712 = null;
              $elem712 = new \Workabox\API\GoodsInMoveLine();
              $xfer += $elem712->read($input);
              $this->GoodsInMove []= $elem712;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size713 = 0;
            $_etype716 = 0;
            $xfer += $input->readListBegin($_etype716, $_size713);
            for ($_i717 = 0; $_i717 < $_size713; ++$_i717)
            {
              $elem718 = null;
              $elem718 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem718->read($input);
              $this->OuterCodes []= $elem718;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateGoodsDocuments);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsReturn');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sender !== null) {
      if (!is_object($this->Sender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Sender', TType::STRUCT, 3);
      $xfer += $this->Sender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Supplier !== null) {
      if (!is_object($this->Supplier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Supplier', TType::STRUCT, 4);
      $xfer += $this->Supplier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleSender !== null) {
      if (!is_object($this->ResponsibleSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleSender', TType::STRUCT, 5);
      $xfer += $this->ResponsibleSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsInMove !== null) {
      if (!is_array($this->GoodsInMove)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsInMove', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsInMove));
        {
          foreach ($this->GoodsInMove as $iter719)
          {
            $xfer += $iter719->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 7);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 9);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 10);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter720)
          {
            $xfer += $iter720->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoodsDocuments !== null) {
      $xfer += $output->writeFieldBegin('StateGoodsDocuments', TType::STRING, 12);
      $xfer += $output->writeString($this->StateGoodsDocuments);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsReturnFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Sender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Supplier = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleSender = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateGoodsDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Sender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'Supplier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'ResponsibleSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'StateGoodsDocuments',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Sender'])) {
        $this->Sender = $vals['Sender'];
      }
      if (isset($vals['Supplier'])) {
        $this->Supplier = $vals['Supplier'];
      }
      if (isset($vals['ResponsibleSender'])) {
        $this->ResponsibleSender = $vals['ResponsibleSender'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateGoodsDocuments'])) {
        $this->StateGoodsDocuments = $vals['StateGoodsDocuments'];
      }
    }
  }

  public function getName() {
    return 'GoodsReturnFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->Sender = new \Workabox\API\ObjectID();
            $xfer += $this->Sender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Supplier = new \Workabox\API\ObjectID();
            $xfer += $this->Supplier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleSender = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->StateGoodsDocuments = array();
            $_size721 = 0;
            $_etype724 = 0;
            $xfer += $input->readListBegin($_etype724, $_size721);
            for ($_i725 = 0; $_i725 < $_size721; ++$_i725)
            {
              $elem726 = null;
              $xfer += $input->readString($elem726);
              $this->StateGoodsDocuments []= $elem726;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsReturnFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sender !== null) {
      if (!is_object($this->Sender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Sender', TType::STRUCT, 3);
      $xfer += $this->Sender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Supplier !== null) {
      if (!is_object($this->Supplier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Supplier', TType::STRUCT, 4);
      $xfer += $this->Supplier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleSender !== null) {
      if (!is_object($this->ResponsibleSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleSender', TType::STRUCT, 5);
      $xfer += $this->ResponsibleSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 6);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 7);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 8);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 9);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoodsDocuments !== null) {
      if (!is_array($this->StateGoodsDocuments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateGoodsDocuments', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRING, count($this->StateGoodsDocuments));
        {
          foreach ($this->StateGoodsDocuments as $iter727)
          {
            $xfer += $output->writeString($iter727);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsDebit {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Sender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleSender = null;
  /**
   * @var \Workabox\API\GoodsInMoveLine[]
   */
  public $GoodsInMove = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateGoodsDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Sender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'ResponsibleSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'GoodsInMove',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsInMoveLine',
            ),
          ),
        6 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        11 => array(
          'var' => 'StateGoodsDocuments',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Sender'])) {
        $this->Sender = $vals['Sender'];
      }
      if (isset($vals['ResponsibleSender'])) {
        $this->ResponsibleSender = $vals['ResponsibleSender'];
      }
      if (isset($vals['GoodsInMove'])) {
        $this->GoodsInMove = $vals['GoodsInMove'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateGoodsDocuments'])) {
        $this->StateGoodsDocuments = $vals['StateGoodsDocuments'];
      }
    }
  }

  public function getName() {
    return 'GoodsDebit';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->Sender = new \Workabox\API\ObjectID();
            $xfer += $this->Sender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleSender = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->GoodsInMove = array();
            $_size728 = 0;
            $_etype731 = 0;
            $xfer += $input->readListBegin($_etype731, $_size728);
            for ($_i732 = 0; $_i732 < $_size728; ++$_i732)
            {
              $elem733 = null;
              $elem733 = new \Workabox\API\GoodsInMoveLine();
              $xfer += $elem733->read($input);
              $this->GoodsInMove []= $elem733;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size734 = 0;
            $_etype737 = 0;
            $xfer += $input->readListBegin($_etype737, $_size734);
            for ($_i738 = 0; $_i738 < $_size734; ++$_i738)
            {
              $elem739 = null;
              $elem739 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem739->read($input);
              $this->OuterCodes []= $elem739;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateGoodsDocuments);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsDebit');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sender !== null) {
      if (!is_object($this->Sender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Sender', TType::STRUCT, 3);
      $xfer += $this->Sender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleSender !== null) {
      if (!is_object($this->ResponsibleSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleSender', TType::STRUCT, 4);
      $xfer += $this->ResponsibleSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsInMove !== null) {
      if (!is_array($this->GoodsInMove)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsInMove', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsInMove));
        {
          foreach ($this->GoodsInMove as $iter740)
          {
            $xfer += $iter740->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 6);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 8);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 9);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter741)
          {
            $xfer += $iter741->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoodsDocuments !== null) {
      $xfer += $output->writeFieldBegin('StateGoodsDocuments', TType::STRING, 11);
      $xfer += $output->writeString($this->StateGoodsDocuments);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsDebitFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Sender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleSender = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateGoodsDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Sender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'ResponsibleSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'StateGoodsDocuments',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Sender'])) {
        $this->Sender = $vals['Sender'];
      }
      if (isset($vals['ResponsibleSender'])) {
        $this->ResponsibleSender = $vals['ResponsibleSender'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateGoodsDocuments'])) {
        $this->StateGoodsDocuments = $vals['StateGoodsDocuments'];
      }
    }
  }

  public function getName() {
    return 'GoodsDebitFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->Sender = new \Workabox\API\ObjectID();
            $xfer += $this->Sender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleSender = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->StateGoodsDocuments = array();
            $_size742 = 0;
            $_etype745 = 0;
            $xfer += $input->readListBegin($_etype745, $_size742);
            for ($_i746 = 0; $_i746 < $_size742; ++$_i746)
            {
              $elem747 = null;
              $xfer += $input->readString($elem747);
              $this->StateGoodsDocuments []= $elem747;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsDebitFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Sender !== null) {
      if (!is_object($this->Sender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Sender', TType::STRUCT, 3);
      $xfer += $this->Sender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleSender !== null) {
      if (!is_object($this->ResponsibleSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleSender', TType::STRUCT, 4);
      $xfer += $this->ResponsibleSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 5);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 6);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 7);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 8);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateGoodsDocuments !== null) {
      if (!is_array($this->StateGoodsDocuments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateGoodsDocuments', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRING, count($this->StateGoodsDocuments));
        {
          foreach ($this->StateGoodsDocuments as $iter748)
          {
            $xfer += $output->writeString($iter748);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsReturnedLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $Quantity = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Quantity',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Quantity'])) {
        $this->Quantity = $vals['Quantity'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'GoodsReturnedLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsReturnedLine');
    if ($this->Quantity !== null) {
      $xfer += $output->writeFieldBegin('Quantity', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->Quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 2);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AppliedMILine {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $ChooseMalually = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MI = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ChooseMalually',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'MI',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ChooseMalually'])) {
        $this->ChooseMalually = $vals['ChooseMalually'];
      }
      if (isset($vals['MI'])) {
        $this->MI = $vals['MI'];
      }
    }
  }

  public function getName() {
    return 'AppliedMILine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->ChooseMalually);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->MI = new \Workabox\API\ObjectID();
            $xfer += $this->MI->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AppliedMILine');
    if ($this->ChooseMalually !== null) {
      $xfer += $output->writeFieldBegin('ChooseMalually', TType::BOOL, 1);
      $xfer += $output->writeBool($this->ChooseMalually);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MI !== null) {
      if (!is_object($this->MI)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MI', TType::STRUCT, 2);
      $xfer += $this->MI->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsInRetailSaleLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $GeneralDiscount = null;
  /**
   * @var double
   */
  public $ManagerDiscount = null;
  /**
   * @var double
   */
  public $SpecialDiscount = null;
  /**
   * @var double
   */
  public $SummTotal = null;
  /**
   * @var int
   */
  public $OrderKey = null;
  /**
   * @var double
   */
  public $TaxSum = null;
  /**
   * @var string
   */
  public $TaxName = null;
  /**
   * @var double
   */
  public $Quantity = null;
  /**
   * @var double
   */
  public $Price = null;
  /**
   * @var double
   */
  public $MarketingDiscount = null;
  /**
   * @var double
   */
  public $PercentDiscount = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Employee = null;
  /**
   * @var double
   */
  public $AbsDiscount = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'GeneralDiscount',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'ManagerDiscount',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'SpecialDiscount',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'SummTotal',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'OrderKey',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'TaxSum',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'TaxName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'Quantity',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'Price',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'MarketingDiscount',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'PercentDiscount',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'Employee',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        13 => array(
          'var' => 'AbsDiscount',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['GeneralDiscount'])) {
        $this->GeneralDiscount = $vals['GeneralDiscount'];
      }
      if (isset($vals['ManagerDiscount'])) {
        $this->ManagerDiscount = $vals['ManagerDiscount'];
      }
      if (isset($vals['SpecialDiscount'])) {
        $this->SpecialDiscount = $vals['SpecialDiscount'];
      }
      if (isset($vals['SummTotal'])) {
        $this->SummTotal = $vals['SummTotal'];
      }
      if (isset($vals['OrderKey'])) {
        $this->OrderKey = $vals['OrderKey'];
      }
      if (isset($vals['TaxSum'])) {
        $this->TaxSum = $vals['TaxSum'];
      }
      if (isset($vals['TaxName'])) {
        $this->TaxName = $vals['TaxName'];
      }
      if (isset($vals['Quantity'])) {
        $this->Quantity = $vals['Quantity'];
      }
      if (isset($vals['Price'])) {
        $this->Price = $vals['Price'];
      }
      if (isset($vals['MarketingDiscount'])) {
        $this->MarketingDiscount = $vals['MarketingDiscount'];
      }
      if (isset($vals['PercentDiscount'])) {
        $this->PercentDiscount = $vals['PercentDiscount'];
      }
      if (isset($vals['Employee'])) {
        $this->Employee = $vals['Employee'];
      }
      if (isset($vals['AbsDiscount'])) {
        $this->AbsDiscount = $vals['AbsDiscount'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'GoodsInRetailSaleLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->GeneralDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ManagerDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SpecialDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SummTotal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->OrderKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->TaxSum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TaxName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->MarketingDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->PercentDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->Employee = new \Workabox\API\ObjectID();
            $xfer += $this->Employee->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->AbsDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsInRetailSaleLine');
    if ($this->GeneralDiscount !== null) {
      $xfer += $output->writeFieldBegin('GeneralDiscount', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->GeneralDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ManagerDiscount !== null) {
      $xfer += $output->writeFieldBegin('ManagerDiscount', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->ManagerDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SpecialDiscount !== null) {
      $xfer += $output->writeFieldBegin('SpecialDiscount', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->SpecialDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SummTotal !== null) {
      $xfer += $output->writeFieldBegin('SummTotal', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->SummTotal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OrderKey !== null) {
      $xfer += $output->writeFieldBegin('OrderKey', TType::I32, 5);
      $xfer += $output->writeI32($this->OrderKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TaxSum !== null) {
      $xfer += $output->writeFieldBegin('TaxSum', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->TaxSum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TaxName !== null) {
      $xfer += $output->writeFieldBegin('TaxName', TType::STRING, 7);
      $xfer += $output->writeString($this->TaxName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Quantity !== null) {
      $xfer += $output->writeFieldBegin('Quantity', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->Quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Price !== null) {
      $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->Price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MarketingDiscount !== null) {
      $xfer += $output->writeFieldBegin('MarketingDiscount', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->MarketingDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PercentDiscount !== null) {
      $xfer += $output->writeFieldBegin('PercentDiscount', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->PercentDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Employee !== null) {
      if (!is_object($this->Employee)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Employee', TType::STRUCT, 12);
      $xfer += $this->Employee->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AbsDiscount !== null) {
      $xfer += $output->writeFieldBegin('AbsDiscount', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->AbsDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 14);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RetailSale {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var bool
   */
  public $MAPresents = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $CashDesk = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $PayType = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Account = null;
  /**
   * @var \Workabox\API\GoodsReturnedLine[]
   */
  public $GoodsReturned = null;
  /**
   * @var string
   */
  public $CRN = null;
  /**
   * @var double
   */
  public $MarketingDiscount = null;
  /**
   * @var \Workabox\API\AppliedMILine[]
   */
  public $AppliedMI = null;
  /**
   * @var \Workabox\API\GoodsInRetailSaleLine[]
   */
  public $GoodsInRetailSale = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RTT = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Client = null;
  /**
   * @var double
   */
  public $SpecialDiscount = null;
  /**
   * @var double
   */
  public $ManagerDiscount = null;
  /**
   * @var double
   */
  public $ExtendedDiscount = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Cashier = null;
  /**
   * @var double
   */
  public $PrePay = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'MAPresents',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'CashDesk',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'PayType',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'Account',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'GoodsReturned',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsReturnedLine',
            ),
          ),
        9 => array(
          'var' => 'CRN',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'MarketingDiscount',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'AppliedMI',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\AppliedMILine',
            ),
          ),
        12 => array(
          'var' => 'GoodsInRetailSale',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsInRetailSaleLine',
            ),
          ),
        13 => array(
          'var' => 'RTT',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        14 => array(
          'var' => 'Client',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        15 => array(
          'var' => 'SpecialDiscount',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'ManagerDiscount',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'ExtendedDiscount',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'Cashier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        19 => array(
          'var' => 'PrePay',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        22 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        25 => array(
          'var' => 'StateDocuments',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['MAPresents'])) {
        $this->MAPresents = $vals['MAPresents'];
      }
      if (isset($vals['CashDesk'])) {
        $this->CashDesk = $vals['CashDesk'];
      }
      if (isset($vals['PayType'])) {
        $this->PayType = $vals['PayType'];
      }
      if (isset($vals['Account'])) {
        $this->Account = $vals['Account'];
      }
      if (isset($vals['GoodsReturned'])) {
        $this->GoodsReturned = $vals['GoodsReturned'];
      }
      if (isset($vals['CRN'])) {
        $this->CRN = $vals['CRN'];
      }
      if (isset($vals['MarketingDiscount'])) {
        $this->MarketingDiscount = $vals['MarketingDiscount'];
      }
      if (isset($vals['AppliedMI'])) {
        $this->AppliedMI = $vals['AppliedMI'];
      }
      if (isset($vals['GoodsInRetailSale'])) {
        $this->GoodsInRetailSale = $vals['GoodsInRetailSale'];
      }
      if (isset($vals['RTT'])) {
        $this->RTT = $vals['RTT'];
      }
      if (isset($vals['Client'])) {
        $this->Client = $vals['Client'];
      }
      if (isset($vals['SpecialDiscount'])) {
        $this->SpecialDiscount = $vals['SpecialDiscount'];
      }
      if (isset($vals['ManagerDiscount'])) {
        $this->ManagerDiscount = $vals['ManagerDiscount'];
      }
      if (isset($vals['ExtendedDiscount'])) {
        $this->ExtendedDiscount = $vals['ExtendedDiscount'];
      }
      if (isset($vals['Cashier'])) {
        $this->Cashier = $vals['Cashier'];
      }
      if (isset($vals['PrePay'])) {
        $this->PrePay = $vals['PrePay'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateDocuments'])) {
        $this->StateDocuments = $vals['StateDocuments'];
      }
    }
  }

  public function getName() {
    return 'RetailSale';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->MAPresents);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->CashDesk = new \Workabox\API\ObjectID();
            $xfer += $this->CashDesk->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->PayType = new \Workabox\API\ObjectID();
            $xfer += $this->PayType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->Account = new \Workabox\API\ObjectID();
            $xfer += $this->Account->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->GoodsReturned = array();
            $_size749 = 0;
            $_etype752 = 0;
            $xfer += $input->readListBegin($_etype752, $_size749);
            for ($_i753 = 0; $_i753 < $_size749; ++$_i753)
            {
              $elem754 = null;
              $elem754 = new \Workabox\API\GoodsReturnedLine();
              $xfer += $elem754->read($input);
              $this->GoodsReturned []= $elem754;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CRN);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->MarketingDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->AppliedMI = array();
            $_size755 = 0;
            $_etype758 = 0;
            $xfer += $input->readListBegin($_etype758, $_size755);
            for ($_i759 = 0; $_i759 < $_size755; ++$_i759)
            {
              $elem760 = null;
              $elem760 = new \Workabox\API\AppliedMILine();
              $xfer += $elem760->read($input);
              $this->AppliedMI []= $elem760;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->GoodsInRetailSale = array();
            $_size761 = 0;
            $_etype764 = 0;
            $xfer += $input->readListBegin($_etype764, $_size761);
            for ($_i765 = 0; $_i765 < $_size761; ++$_i765)
            {
              $elem766 = null;
              $elem766 = new \Workabox\API\GoodsInRetailSaleLine();
              $xfer += $elem766->read($input);
              $this->GoodsInRetailSale []= $elem766;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRUCT) {
            $this->RTT = new \Workabox\API\ObjectID();
            $xfer += $this->RTT->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
            $this->Client = new \Workabox\API\ObjectID();
            $xfer += $this->Client->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SpecialDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ManagerDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ExtendedDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRUCT) {
            $this->Cashier = new \Workabox\API\ObjectID();
            $xfer += $this->Cashier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->PrePay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size767 = 0;
            $_etype770 = 0;
            $xfer += $input->readListBegin($_etype770, $_size767);
            for ($_i771 = 0; $_i771 < $_size767; ++$_i771)
            {
              $elem772 = null;
              $elem772 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem772->read($input);
              $this->OuterCodes []= $elem772;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateDocuments);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RetailSale');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 3);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MAPresents !== null) {
      $xfer += $output->writeFieldBegin('MAPresents', TType::BOOL, 4);
      $xfer += $output->writeBool($this->MAPresents);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDesk !== null) {
      if (!is_object($this->CashDesk)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDesk', TType::STRUCT, 5);
      $xfer += $this->CashDesk->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayType !== null) {
      if (!is_object($this->PayType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('PayType', TType::STRUCT, 6);
      $xfer += $this->PayType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Account !== null) {
      if (!is_object($this->Account)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Account', TType::STRUCT, 7);
      $xfer += $this->Account->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsReturned !== null) {
      if (!is_array($this->GoodsReturned)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsReturned', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsReturned));
        {
          foreach ($this->GoodsReturned as $iter773)
          {
            $xfer += $iter773->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CRN !== null) {
      $xfer += $output->writeFieldBegin('CRN', TType::STRING, 9);
      $xfer += $output->writeString($this->CRN);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MarketingDiscount !== null) {
      $xfer += $output->writeFieldBegin('MarketingDiscount', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->MarketingDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AppliedMI !== null) {
      if (!is_array($this->AppliedMI)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('AppliedMI', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->AppliedMI));
        {
          foreach ($this->AppliedMI as $iter774)
          {
            $xfer += $iter774->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsInRetailSale !== null) {
      if (!is_array($this->GoodsInRetailSale)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsInRetailSale', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsInRetailSale));
        {
          foreach ($this->GoodsInRetailSale as $iter775)
          {
            $xfer += $iter775->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RTT !== null) {
      if (!is_object($this->RTT)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RTT', TType::STRUCT, 13);
      $xfer += $this->RTT->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Client !== null) {
      if (!is_object($this->Client)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Client', TType::STRUCT, 14);
      $xfer += $this->Client->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SpecialDiscount !== null) {
      $xfer += $output->writeFieldBegin('SpecialDiscount', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->SpecialDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ManagerDiscount !== null) {
      $xfer += $output->writeFieldBegin('ManagerDiscount', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->ManagerDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ExtendedDiscount !== null) {
      $xfer += $output->writeFieldBegin('ExtendedDiscount', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->ExtendedDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Cashier !== null) {
      if (!is_object($this->Cashier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Cashier', TType::STRUCT, 18);
      $xfer += $this->Cashier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PrePay !== null) {
      $xfer += $output->writeFieldBegin('PrePay', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->PrePay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 20);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 21);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 22);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 23);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 24);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter776)
          {
            $xfer += $iter776->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateDocuments !== null) {
      $xfer += $output->writeFieldBegin('StateDocuments', TType::STRING, 25);
      $xfer += $output->writeString($this->StateDocuments);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RetailSaleFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $CashDesk = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $PayType = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Account = null;
  /**
   * @var string
   */
  public $CRN = null;
  /**
   * @var string
   */
  public $MarketingDiscount = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RTT = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Client = null;
  /**
   * @var string
   */
  public $SpecialDiscount = null;
  /**
   * @var string
   */
  public $ManagerDiscount = null;
  /**
   * @var string
   */
  public $ExtendedDiscount = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Cashier = null;
  /**
   * @var string
   */
  public $PrePay = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'CashDesk',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'PayType',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'Account',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'CRN',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'MarketingDiscount',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'RTT',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        10 => array(
          'var' => 'Client',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        11 => array(
          'var' => 'SpecialDiscount',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'ManagerDiscount',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'ExtendedDiscount',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'Cashier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        15 => array(
          'var' => 'PrePay',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'StateDocuments',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['CashDesk'])) {
        $this->CashDesk = $vals['CashDesk'];
      }
      if (isset($vals['PayType'])) {
        $this->PayType = $vals['PayType'];
      }
      if (isset($vals['Account'])) {
        $this->Account = $vals['Account'];
      }
      if (isset($vals['CRN'])) {
        $this->CRN = $vals['CRN'];
      }
      if (isset($vals['MarketingDiscount'])) {
        $this->MarketingDiscount = $vals['MarketingDiscount'];
      }
      if (isset($vals['RTT'])) {
        $this->RTT = $vals['RTT'];
      }
      if (isset($vals['Client'])) {
        $this->Client = $vals['Client'];
      }
      if (isset($vals['SpecialDiscount'])) {
        $this->SpecialDiscount = $vals['SpecialDiscount'];
      }
      if (isset($vals['ManagerDiscount'])) {
        $this->ManagerDiscount = $vals['ManagerDiscount'];
      }
      if (isset($vals['ExtendedDiscount'])) {
        $this->ExtendedDiscount = $vals['ExtendedDiscount'];
      }
      if (isset($vals['Cashier'])) {
        $this->Cashier = $vals['Cashier'];
      }
      if (isset($vals['PrePay'])) {
        $this->PrePay = $vals['PrePay'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateDocuments'])) {
        $this->StateDocuments = $vals['StateDocuments'];
      }
    }
  }

  public function getName() {
    return 'RetailSaleFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->CashDesk = new \Workabox\API\ObjectID();
            $xfer += $this->CashDesk->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->PayType = new \Workabox\API\ObjectID();
            $xfer += $this->PayType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->Account = new \Workabox\API\ObjectID();
            $xfer += $this->Account->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CRN);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MarketingDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->RTT = new \Workabox\API\ObjectID();
            $xfer += $this->RTT->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->Client = new \Workabox\API\ObjectID();
            $xfer += $this->Client->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SpecialDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ManagerDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ExtendedDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRUCT) {
            $this->Cashier = new \Workabox\API\ObjectID();
            $xfer += $this->Cashier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PrePay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::LST) {
            $this->StateDocuments = array();
            $_size777 = 0;
            $_etype780 = 0;
            $xfer += $input->readListBegin($_etype780, $_size777);
            for ($_i781 = 0; $_i781 < $_size777; ++$_i781)
            {
              $elem782 = null;
              $xfer += $input->readString($elem782);
              $this->StateDocuments []= $elem782;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RetailSaleFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 3);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDesk !== null) {
      if (!is_object($this->CashDesk)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDesk', TType::STRUCT, 4);
      $xfer += $this->CashDesk->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayType !== null) {
      if (!is_object($this->PayType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('PayType', TType::STRUCT, 5);
      $xfer += $this->PayType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Account !== null) {
      if (!is_object($this->Account)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Account', TType::STRUCT, 6);
      $xfer += $this->Account->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CRN !== null) {
      $xfer += $output->writeFieldBegin('CRN', TType::STRING, 7);
      $xfer += $output->writeString($this->CRN);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MarketingDiscount !== null) {
      $xfer += $output->writeFieldBegin('MarketingDiscount', TType::STRING, 8);
      $xfer += $output->writeString($this->MarketingDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RTT !== null) {
      if (!is_object($this->RTT)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RTT', TType::STRUCT, 9);
      $xfer += $this->RTT->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Client !== null) {
      if (!is_object($this->Client)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Client', TType::STRUCT, 10);
      $xfer += $this->Client->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SpecialDiscount !== null) {
      $xfer += $output->writeFieldBegin('SpecialDiscount', TType::STRING, 11);
      $xfer += $output->writeString($this->SpecialDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ManagerDiscount !== null) {
      $xfer += $output->writeFieldBegin('ManagerDiscount', TType::STRING, 12);
      $xfer += $output->writeString($this->ManagerDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ExtendedDiscount !== null) {
      $xfer += $output->writeFieldBegin('ExtendedDiscount', TType::STRING, 13);
      $xfer += $output->writeString($this->ExtendedDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Cashier !== null) {
      if (!is_object($this->Cashier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Cashier', TType::STRUCT, 14);
      $xfer += $this->Cashier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PrePay !== null) {
      $xfer += $output->writeFieldBegin('PrePay', TType::STRING, 15);
      $xfer += $output->writeString($this->PrePay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 16);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 17);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 18);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 19);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateDocuments !== null) {
      if (!is_array($this->StateDocuments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateDocuments', TType::LST, 20);
      {
        $output->writeListBegin(TType::STRING, count($this->StateDocuments));
        {
          foreach ($this->StateDocuments as $iter783)
          {
            $xfer += $output->writeString($iter783);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CustomerOrder {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ShippingDate = null;
  /**
   * @var double
   */
  public $MarketingDiscount = null;
  /**
   * @var \Workabox\API\AppliedMILine[]
   */
  public $AppliedMI = null;
  /**
   * @var \Workabox\API\GoodsInRetailSaleLine[]
   */
  public $GoodsInRetailSale = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RTT = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Client = null;
  /**
   * @var double
   */
  public $SpecialDiscount = null;
  /**
   * @var double
   */
  public $ManagerDiscount = null;
  /**
   * @var double
   */
  public $ExtendedDiscount = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Cashier = null;
  /**
   * @var double
   */
  public $PrePay = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateOrderCustomer = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ShippingDate',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'MarketingDiscount',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'AppliedMI',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\AppliedMILine',
            ),
          ),
        6 => array(
          'var' => 'GoodsInRetailSale',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsInRetailSaleLine',
            ),
          ),
        7 => array(
          'var' => 'RTT',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'Client',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'SpecialDiscount',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'ManagerDiscount',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'ExtendedDiscount',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'Cashier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        13 => array(
          'var' => 'PrePay',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        20 => array(
          'var' => 'StateOrderCustomer',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ShippingDate'])) {
        $this->ShippingDate = $vals['ShippingDate'];
      }
      if (isset($vals['MarketingDiscount'])) {
        $this->MarketingDiscount = $vals['MarketingDiscount'];
      }
      if (isset($vals['AppliedMI'])) {
        $this->AppliedMI = $vals['AppliedMI'];
      }
      if (isset($vals['GoodsInRetailSale'])) {
        $this->GoodsInRetailSale = $vals['GoodsInRetailSale'];
      }
      if (isset($vals['RTT'])) {
        $this->RTT = $vals['RTT'];
      }
      if (isset($vals['Client'])) {
        $this->Client = $vals['Client'];
      }
      if (isset($vals['SpecialDiscount'])) {
        $this->SpecialDiscount = $vals['SpecialDiscount'];
      }
      if (isset($vals['ManagerDiscount'])) {
        $this->ManagerDiscount = $vals['ManagerDiscount'];
      }
      if (isset($vals['ExtendedDiscount'])) {
        $this->ExtendedDiscount = $vals['ExtendedDiscount'];
      }
      if (isset($vals['Cashier'])) {
        $this->Cashier = $vals['Cashier'];
      }
      if (isset($vals['PrePay'])) {
        $this->PrePay = $vals['PrePay'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateOrderCustomer'])) {
        $this->StateOrderCustomer = $vals['StateOrderCustomer'];
      }
    }
  }

  public function getName() {
    return 'CustomerOrder';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ShippingDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->MarketingDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->AppliedMI = array();
            $_size784 = 0;
            $_etype787 = 0;
            $xfer += $input->readListBegin($_etype787, $_size784);
            for ($_i788 = 0; $_i788 < $_size784; ++$_i788)
            {
              $elem789 = null;
              $elem789 = new \Workabox\API\AppliedMILine();
              $xfer += $elem789->read($input);
              $this->AppliedMI []= $elem789;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->GoodsInRetailSale = array();
            $_size790 = 0;
            $_etype793 = 0;
            $xfer += $input->readListBegin($_etype793, $_size790);
            for ($_i794 = 0; $_i794 < $_size790; ++$_i794)
            {
              $elem795 = null;
              $elem795 = new \Workabox\API\GoodsInRetailSaleLine();
              $xfer += $elem795->read($input);
              $this->GoodsInRetailSale []= $elem795;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->RTT = new \Workabox\API\ObjectID();
            $xfer += $this->RTT->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->Client = new \Workabox\API\ObjectID();
            $xfer += $this->Client->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SpecialDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ManagerDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ExtendedDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->Cashier = new \Workabox\API\ObjectID();
            $xfer += $this->Cashier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->PrePay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size796 = 0;
            $_etype799 = 0;
            $xfer += $input->readListBegin($_etype799, $_size796);
            for ($_i800 = 0; $_i800 < $_size796; ++$_i800)
            {
              $elem801 = null;
              $elem801 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem801->read($input);
              $this->OuterCodes []= $elem801;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateOrderCustomer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CustomerOrder');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ShippingDate !== null) {
      $xfer += $output->writeFieldBegin('ShippingDate', TType::STRING, 3);
      $xfer += $output->writeString($this->ShippingDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MarketingDiscount !== null) {
      $xfer += $output->writeFieldBegin('MarketingDiscount', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->MarketingDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AppliedMI !== null) {
      if (!is_array($this->AppliedMI)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('AppliedMI', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->AppliedMI));
        {
          foreach ($this->AppliedMI as $iter802)
          {
            $xfer += $iter802->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsInRetailSale !== null) {
      if (!is_array($this->GoodsInRetailSale)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsInRetailSale', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsInRetailSale));
        {
          foreach ($this->GoodsInRetailSale as $iter803)
          {
            $xfer += $iter803->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RTT !== null) {
      if (!is_object($this->RTT)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RTT', TType::STRUCT, 7);
      $xfer += $this->RTT->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Client !== null) {
      if (!is_object($this->Client)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Client', TType::STRUCT, 8);
      $xfer += $this->Client->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SpecialDiscount !== null) {
      $xfer += $output->writeFieldBegin('SpecialDiscount', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->SpecialDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ManagerDiscount !== null) {
      $xfer += $output->writeFieldBegin('ManagerDiscount', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->ManagerDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ExtendedDiscount !== null) {
      $xfer += $output->writeFieldBegin('ExtendedDiscount', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->ExtendedDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Cashier !== null) {
      if (!is_object($this->Cashier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Cashier', TType::STRUCT, 12);
      $xfer += $this->Cashier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PrePay !== null) {
      $xfer += $output->writeFieldBegin('PrePay', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->PrePay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 14);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 16);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 17);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 18);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter804)
          {
            $xfer += $iter804->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateOrderCustomer !== null) {
      $xfer += $output->writeFieldBegin('StateOrderCustomer', TType::STRING, 20);
      $xfer += $output->writeString($this->StateOrderCustomer);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CustomerOrderFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $ShippingDate = null;
  /**
   * @var string
   */
  public $MarketingDiscount = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RTT = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Client = null;
  /**
   * @var string
   */
  public $SpecialDiscount = null;
  /**
   * @var string
   */
  public $ManagerDiscount = null;
  /**
   * @var string
   */
  public $ExtendedDiscount = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Cashier = null;
  /**
   * @var string
   */
  public $PrePay = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateOrderCustomer = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ShippingDate',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'MarketingDiscount',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'RTT',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'Client',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'SpecialDiscount',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'ManagerDiscount',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'ExtendedDiscount',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'Cashier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        11 => array(
          'var' => 'PrePay',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'StateOrderCustomer',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ShippingDate'])) {
        $this->ShippingDate = $vals['ShippingDate'];
      }
      if (isset($vals['MarketingDiscount'])) {
        $this->MarketingDiscount = $vals['MarketingDiscount'];
      }
      if (isset($vals['RTT'])) {
        $this->RTT = $vals['RTT'];
      }
      if (isset($vals['Client'])) {
        $this->Client = $vals['Client'];
      }
      if (isset($vals['SpecialDiscount'])) {
        $this->SpecialDiscount = $vals['SpecialDiscount'];
      }
      if (isset($vals['ManagerDiscount'])) {
        $this->ManagerDiscount = $vals['ManagerDiscount'];
      }
      if (isset($vals['ExtendedDiscount'])) {
        $this->ExtendedDiscount = $vals['ExtendedDiscount'];
      }
      if (isset($vals['Cashier'])) {
        $this->Cashier = $vals['Cashier'];
      }
      if (isset($vals['PrePay'])) {
        $this->PrePay = $vals['PrePay'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateOrderCustomer'])) {
        $this->StateOrderCustomer = $vals['StateOrderCustomer'];
      }
    }
  }

  public function getName() {
    return 'CustomerOrderFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ShippingDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->MarketingDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->RTT = new \Workabox\API\ObjectID();
            $xfer += $this->RTT->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->Client = new \Workabox\API\ObjectID();
            $xfer += $this->Client->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SpecialDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ManagerDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ExtendedDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->Cashier = new \Workabox\API\ObjectID();
            $xfer += $this->Cashier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PrePay);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::LST) {
            $this->StateOrderCustomer = array();
            $_size805 = 0;
            $_etype808 = 0;
            $xfer += $input->readListBegin($_etype808, $_size805);
            for ($_i809 = 0; $_i809 < $_size805; ++$_i809)
            {
              $elem810 = null;
              $xfer += $input->readString($elem810);
              $this->StateOrderCustomer []= $elem810;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CustomerOrderFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ShippingDate !== null) {
      $xfer += $output->writeFieldBegin('ShippingDate', TType::STRING, 3);
      $xfer += $output->writeString($this->ShippingDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MarketingDiscount !== null) {
      $xfer += $output->writeFieldBegin('MarketingDiscount', TType::STRING, 4);
      $xfer += $output->writeString($this->MarketingDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RTT !== null) {
      if (!is_object($this->RTT)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RTT', TType::STRUCT, 5);
      $xfer += $this->RTT->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Client !== null) {
      if (!is_object($this->Client)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Client', TType::STRUCT, 6);
      $xfer += $this->Client->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SpecialDiscount !== null) {
      $xfer += $output->writeFieldBegin('SpecialDiscount', TType::STRING, 7);
      $xfer += $output->writeString($this->SpecialDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ManagerDiscount !== null) {
      $xfer += $output->writeFieldBegin('ManagerDiscount', TType::STRING, 8);
      $xfer += $output->writeString($this->ManagerDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ExtendedDiscount !== null) {
      $xfer += $output->writeFieldBegin('ExtendedDiscount', TType::STRING, 9);
      $xfer += $output->writeString($this->ExtendedDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Cashier !== null) {
      if (!is_object($this->Cashier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Cashier', TType::STRUCT, 10);
      $xfer += $this->Cashier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PrePay !== null) {
      $xfer += $output->writeFieldBegin('PrePay', TType::STRING, 11);
      $xfer += $output->writeString($this->PrePay);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 12);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 13);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 14);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 15);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 16);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateOrderCustomer !== null) {
      if (!is_array($this->StateOrderCustomer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateOrderCustomer', TType::LST, 17);
      {
        $output->writeListBegin(TType::STRING, count($this->StateOrderCustomer));
        {
          foreach ($this->StateOrderCustomer as $iter811)
          {
            $xfer += $output->writeString($iter811);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsInReturnLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $TaxSum = null;
  /**
   * @var double
   */
  public $SummTotal = null;
  /**
   * @var string
   */
  public $TaxName = null;
  /**
   * @var double
   */
  public $Price = null;
  /**
   * @var double
   */
  public $Quantity = null;
  /**
   * @var double
   */
  public $OriginalPrice = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'TaxSum',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'SummTotal',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'TaxName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'Price',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'Quantity',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'OriginalPrice',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['TaxSum'])) {
        $this->TaxSum = $vals['TaxSum'];
      }
      if (isset($vals['SummTotal'])) {
        $this->SummTotal = $vals['SummTotal'];
      }
      if (isset($vals['TaxName'])) {
        $this->TaxName = $vals['TaxName'];
      }
      if (isset($vals['Price'])) {
        $this->Price = $vals['Price'];
      }
      if (isset($vals['Quantity'])) {
        $this->Quantity = $vals['Quantity'];
      }
      if (isset($vals['OriginalPrice'])) {
        $this->OriginalPrice = $vals['OriginalPrice'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'GoodsInReturnLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->TaxSum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SummTotal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TaxName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->OriginalPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsInReturnLine');
    if ($this->TaxSum !== null) {
      $xfer += $output->writeFieldBegin('TaxSum', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->TaxSum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SummTotal !== null) {
      $xfer += $output->writeFieldBegin('SummTotal', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->SummTotal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TaxName !== null) {
      $xfer += $output->writeFieldBegin('TaxName', TType::STRING, 3);
      $xfer += $output->writeString($this->TaxName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Price !== null) {
      $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->Price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Quantity !== null) {
      $xfer += $output->writeFieldBegin('Quantity', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->Quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OriginalPrice !== null) {
      $xfer += $output->writeFieldBegin('OriginalPrice', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->OriginalPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 7);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CustomerReturn {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Reason = null;
  /**
   * @var \Workabox\API\GoodsInReturnLine[]
   */
  public $GoodsInReturn = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RTT = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Client = null;
  /**
   * @var double
   */
  public $ExtendedDiscount = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Cashier = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $CashDesk = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RetailSale = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $PayType = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Account = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Reason',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'GoodsInReturn',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsInReturnLine',
            ),
          ),
        5 => array(
          'var' => 'RTT',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'Client',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'ExtendedDiscount',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'Cashier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'CashDesk',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        10 => array(
          'var' => 'RetailSale',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        11 => array(
          'var' => 'PayType',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        12 => array(
          'var' => 'Account',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        13 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        19 => array(
          'var' => 'StateDocuments',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Reason'])) {
        $this->Reason = $vals['Reason'];
      }
      if (isset($vals['GoodsInReturn'])) {
        $this->GoodsInReturn = $vals['GoodsInReturn'];
      }
      if (isset($vals['RTT'])) {
        $this->RTT = $vals['RTT'];
      }
      if (isset($vals['Client'])) {
        $this->Client = $vals['Client'];
      }
      if (isset($vals['ExtendedDiscount'])) {
        $this->ExtendedDiscount = $vals['ExtendedDiscount'];
      }
      if (isset($vals['Cashier'])) {
        $this->Cashier = $vals['Cashier'];
      }
      if (isset($vals['CashDesk'])) {
        $this->CashDesk = $vals['CashDesk'];
      }
      if (isset($vals['RetailSale'])) {
        $this->RetailSale = $vals['RetailSale'];
      }
      if (isset($vals['PayType'])) {
        $this->PayType = $vals['PayType'];
      }
      if (isset($vals['Account'])) {
        $this->Account = $vals['Account'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateDocuments'])) {
        $this->StateDocuments = $vals['StateDocuments'];
      }
    }
  }

  public function getName() {
    return 'CustomerReturn';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->GoodsInReturn = array();
            $_size812 = 0;
            $_etype815 = 0;
            $xfer += $input->readListBegin($_etype815, $_size812);
            for ($_i816 = 0; $_i816 < $_size812; ++$_i816)
            {
              $elem817 = null;
              $elem817 = new \Workabox\API\GoodsInReturnLine();
              $xfer += $elem817->read($input);
              $this->GoodsInReturn []= $elem817;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->RTT = new \Workabox\API\ObjectID();
            $xfer += $this->RTT->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->Client = new \Workabox\API\ObjectID();
            $xfer += $this->Client->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ExtendedDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->Cashier = new \Workabox\API\ObjectID();
            $xfer += $this->Cashier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->CashDesk = new \Workabox\API\ObjectID();
            $xfer += $this->CashDesk->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->RetailSale = new \Workabox\API\ObjectID();
            $xfer += $this->RetailSale->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->PayType = new \Workabox\API\ObjectID();
            $xfer += $this->PayType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->Account = new \Workabox\API\ObjectID();
            $xfer += $this->Account->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size818 = 0;
            $_etype821 = 0;
            $xfer += $input->readListBegin($_etype821, $_size818);
            for ($_i822 = 0; $_i822 < $_size818; ++$_i822)
            {
              $elem823 = null;
              $elem823 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem823->read($input);
              $this->OuterCodes []= $elem823;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateDocuments);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CustomerReturn');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Reason !== null) {
      $xfer += $output->writeFieldBegin('Reason', TType::STRING, 3);
      $xfer += $output->writeString($this->Reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsInReturn !== null) {
      if (!is_array($this->GoodsInReturn)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsInReturn', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsInReturn));
        {
          foreach ($this->GoodsInReturn as $iter824)
          {
            $xfer += $iter824->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RTT !== null) {
      if (!is_object($this->RTT)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RTT', TType::STRUCT, 5);
      $xfer += $this->RTT->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Client !== null) {
      if (!is_object($this->Client)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Client', TType::STRUCT, 6);
      $xfer += $this->Client->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ExtendedDiscount !== null) {
      $xfer += $output->writeFieldBegin('ExtendedDiscount', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->ExtendedDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Cashier !== null) {
      if (!is_object($this->Cashier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Cashier', TType::STRUCT, 8);
      $xfer += $this->Cashier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDesk !== null) {
      if (!is_object($this->CashDesk)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDesk', TType::STRUCT, 9);
      $xfer += $this->CashDesk->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RetailSale !== null) {
      if (!is_object($this->RetailSale)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RetailSale', TType::STRUCT, 10);
      $xfer += $this->RetailSale->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayType !== null) {
      if (!is_object($this->PayType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('PayType', TType::STRUCT, 11);
      $xfer += $this->PayType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Account !== null) {
      if (!is_object($this->Account)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Account', TType::STRUCT, 12);
      $xfer += $this->Account->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 13);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 15);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 16);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 17);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 18);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter825)
          {
            $xfer += $iter825->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateDocuments !== null) {
      $xfer += $output->writeFieldBegin('StateDocuments', TType::STRING, 19);
      $xfer += $output->writeString($this->StateDocuments);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CustomerReturnFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Reason = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RTT = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Client = null;
  /**
   * @var string
   */
  public $ExtendedDiscount = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Cashier = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $CashDesk = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $RetailSale = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $PayType = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Account = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Reason',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'RTT',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'Client',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'ExtendedDiscount',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'Cashier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'CashDesk',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'RetailSale',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        10 => array(
          'var' => 'PayType',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        11 => array(
          'var' => 'Account',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        12 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'StateDocuments',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Reason'])) {
        $this->Reason = $vals['Reason'];
      }
      if (isset($vals['RTT'])) {
        $this->RTT = $vals['RTT'];
      }
      if (isset($vals['Client'])) {
        $this->Client = $vals['Client'];
      }
      if (isset($vals['ExtendedDiscount'])) {
        $this->ExtendedDiscount = $vals['ExtendedDiscount'];
      }
      if (isset($vals['Cashier'])) {
        $this->Cashier = $vals['Cashier'];
      }
      if (isset($vals['CashDesk'])) {
        $this->CashDesk = $vals['CashDesk'];
      }
      if (isset($vals['RetailSale'])) {
        $this->RetailSale = $vals['RetailSale'];
      }
      if (isset($vals['PayType'])) {
        $this->PayType = $vals['PayType'];
      }
      if (isset($vals['Account'])) {
        $this->Account = $vals['Account'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateDocuments'])) {
        $this->StateDocuments = $vals['StateDocuments'];
      }
    }
  }

  public function getName() {
    return 'CustomerReturnFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Reason);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->RTT = new \Workabox\API\ObjectID();
            $xfer += $this->RTT->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->Client = new \Workabox\API\ObjectID();
            $xfer += $this->Client->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ExtendedDiscount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->Cashier = new \Workabox\API\ObjectID();
            $xfer += $this->Cashier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->CashDesk = new \Workabox\API\ObjectID();
            $xfer += $this->CashDesk->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->RetailSale = new \Workabox\API\ObjectID();
            $xfer += $this->RetailSale->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->PayType = new \Workabox\API\ObjectID();
            $xfer += $this->PayType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRUCT) {
            $this->Account = new \Workabox\API\ObjectID();
            $xfer += $this->Account->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::LST) {
            $this->StateDocuments = array();
            $_size826 = 0;
            $_etype829 = 0;
            $xfer += $input->readListBegin($_etype829, $_size826);
            for ($_i830 = 0; $_i830 < $_size826; ++$_i830)
            {
              $elem831 = null;
              $xfer += $input->readString($elem831);
              $this->StateDocuments []= $elem831;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CustomerReturnFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Reason !== null) {
      $xfer += $output->writeFieldBegin('Reason', TType::STRING, 3);
      $xfer += $output->writeString($this->Reason);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RTT !== null) {
      if (!is_object($this->RTT)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RTT', TType::STRUCT, 4);
      $xfer += $this->RTT->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Client !== null) {
      if (!is_object($this->Client)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Client', TType::STRUCT, 5);
      $xfer += $this->Client->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ExtendedDiscount !== null) {
      $xfer += $output->writeFieldBegin('ExtendedDiscount', TType::STRING, 6);
      $xfer += $output->writeString($this->ExtendedDiscount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Cashier !== null) {
      if (!is_object($this->Cashier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Cashier', TType::STRUCT, 7);
      $xfer += $this->Cashier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDesk !== null) {
      if (!is_object($this->CashDesk)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDesk', TType::STRUCT, 8);
      $xfer += $this->CashDesk->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RetailSale !== null) {
      if (!is_object($this->RetailSale)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('RetailSale', TType::STRUCT, 9);
      $xfer += $this->RetailSale->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayType !== null) {
      if (!is_object($this->PayType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('PayType', TType::STRUCT, 10);
      $xfer += $this->PayType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Account !== null) {
      if (!is_object($this->Account)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Account', TType::STRUCT, 11);
      $xfer += $this->Account->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 12);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 13);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 14);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 15);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 16);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateDocuments !== null) {
      if (!is_array($this->StateDocuments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateDocuments', TType::LST, 17);
      {
        $output->writeListBegin(TType::STRING, count($this->StateDocuments));
        {
          foreach ($this->StateDocuments as $iter832)
          {
            $xfer += $output->writeString($iter832);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsInOrderDocLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $SummTotal = null;
  /**
   * @var double
   */
  public $Quantity = null;
  /**
   * @var double
   */
  public $Price = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'SummTotal',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'Quantity',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'Price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['SummTotal'])) {
        $this->SummTotal = $vals['SummTotal'];
      }
      if (isset($vals['Quantity'])) {
        $this->Quantity = $vals['Quantity'];
      }
      if (isset($vals['Price'])) {
        $this->Price = $vals['Price'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'GoodsInOrderDocLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SummTotal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsInOrderDocLine');
    if ($this->SummTotal !== null) {
      $xfer += $output->writeFieldBegin('SummTotal', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->SummTotal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Quantity !== null) {
      $xfer += $output->writeFieldBegin('Quantity', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->Quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Price !== null) {
      $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->Price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 4);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderDocOut {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Supplier = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OrderCustomer = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OrderCustomerResponsible = null;
  /**
   * @var \Workabox\API\GoodsInOrderDocLine[]
   */
  public $GoodsInOrderDoc = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateOrderDocOut = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Supplier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'OrderCustomer',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'OrderCustomerResponsible',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'GoodsInOrderDoc',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsInOrderDocLine',
            ),
          ),
        7 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        12 => array(
          'var' => 'StateOrderDocOut',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Supplier'])) {
        $this->Supplier = $vals['Supplier'];
      }
      if (isset($vals['OrderCustomer'])) {
        $this->OrderCustomer = $vals['OrderCustomer'];
      }
      if (isset($vals['OrderCustomerResponsible'])) {
        $this->OrderCustomerResponsible = $vals['OrderCustomerResponsible'];
      }
      if (isset($vals['GoodsInOrderDoc'])) {
        $this->GoodsInOrderDoc = $vals['GoodsInOrderDoc'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateOrderDocOut'])) {
        $this->StateOrderDocOut = $vals['StateOrderDocOut'];
      }
    }
  }

  public function getName() {
    return 'OrderDocOut';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->Supplier = new \Workabox\API\ObjectID();
            $xfer += $this->Supplier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->OrderCustomer = new \Workabox\API\ObjectID();
            $xfer += $this->OrderCustomer->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->OrderCustomerResponsible = new \Workabox\API\ObjectID();
            $xfer += $this->OrderCustomerResponsible->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->GoodsInOrderDoc = array();
            $_size833 = 0;
            $_etype836 = 0;
            $xfer += $input->readListBegin($_etype836, $_size833);
            for ($_i837 = 0; $_i837 < $_size833; ++$_i837)
            {
              $elem838 = null;
              $elem838 = new \Workabox\API\GoodsInOrderDocLine();
              $xfer += $elem838->read($input);
              $this->GoodsInOrderDoc []= $elem838;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size839 = 0;
            $_etype842 = 0;
            $xfer += $input->readListBegin($_etype842, $_size839);
            for ($_i843 = 0; $_i843 < $_size839; ++$_i843)
            {
              $elem844 = null;
              $elem844 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem844->read($input);
              $this->OuterCodes []= $elem844;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateOrderDocOut);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderDocOut');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Supplier !== null) {
      if (!is_object($this->Supplier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Supplier', TType::STRUCT, 3);
      $xfer += $this->Supplier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OrderCustomer !== null) {
      if (!is_object($this->OrderCustomer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OrderCustomer', TType::STRUCT, 4);
      $xfer += $this->OrderCustomer->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OrderCustomerResponsible !== null) {
      if (!is_object($this->OrderCustomerResponsible)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OrderCustomerResponsible', TType::STRUCT, 5);
      $xfer += $this->OrderCustomerResponsible->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsInOrderDoc !== null) {
      if (!is_array($this->GoodsInOrderDoc)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsInOrderDoc', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsInOrderDoc));
        {
          foreach ($this->GoodsInOrderDoc as $iter845)
          {
            $xfer += $iter845->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 7);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 9);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 10);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter846)
          {
            $xfer += $iter846->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateOrderDocOut !== null) {
      $xfer += $output->writeFieldBegin('StateOrderDocOut', TType::STRING, 12);
      $xfer += $output->writeString($this->StateOrderDocOut);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderDocOutFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Supplier = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OrderCustomer = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OrderCustomerResponsible = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateOrderDocOut = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Supplier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'OrderCustomer',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'OrderCustomerResponsible',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'StateOrderDocOut',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Supplier'])) {
        $this->Supplier = $vals['Supplier'];
      }
      if (isset($vals['OrderCustomer'])) {
        $this->OrderCustomer = $vals['OrderCustomer'];
      }
      if (isset($vals['OrderCustomerResponsible'])) {
        $this->OrderCustomerResponsible = $vals['OrderCustomerResponsible'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateOrderDocOut'])) {
        $this->StateOrderDocOut = $vals['StateOrderDocOut'];
      }
    }
  }

  public function getName() {
    return 'OrderDocOutFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->Supplier = new \Workabox\API\ObjectID();
            $xfer += $this->Supplier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->OrderCustomer = new \Workabox\API\ObjectID();
            $xfer += $this->OrderCustomer->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->OrderCustomerResponsible = new \Workabox\API\ObjectID();
            $xfer += $this->OrderCustomerResponsible->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->StateOrderDocOut = array();
            $_size847 = 0;
            $_etype850 = 0;
            $xfer += $input->readListBegin($_etype850, $_size847);
            for ($_i851 = 0; $_i851 < $_size847; ++$_i851)
            {
              $elem852 = null;
              $xfer += $input->readString($elem852);
              $this->StateOrderDocOut []= $elem852;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderDocOutFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Supplier !== null) {
      if (!is_object($this->Supplier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Supplier', TType::STRUCT, 3);
      $xfer += $this->Supplier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OrderCustomer !== null) {
      if (!is_object($this->OrderCustomer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OrderCustomer', TType::STRUCT, 4);
      $xfer += $this->OrderCustomer->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OrderCustomerResponsible !== null) {
      if (!is_object($this->OrderCustomerResponsible)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OrderCustomerResponsible', TType::STRUCT, 5);
      $xfer += $this->OrderCustomerResponsible->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 6);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 7);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 8);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 9);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateOrderDocOut !== null) {
      if (!is_array($this->StateOrderDocOut)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateOrderDocOut', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRING, count($this->StateOrderDocOut));
        {
          foreach ($this->StateOrderDocOut as $iter853)
          {
            $xfer += $output->writeString($iter853);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderDocInner {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OrderCustomer = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OrderCustomerResponsible = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $InnerSupplier = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $InnerSupplierResponsible = null;
  /**
   * @var \Workabox\API\GoodsInOrderDocLine[]
   */
  public $GoodsInOrderDoc = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateOrderDocInner = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'OrderCustomer',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'OrderCustomerResponsible',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'InnerSupplier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'InnerSupplierResponsible',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'GoodsInOrderDoc',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsInOrderDocLine',
            ),
          ),
        8 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        13 => array(
          'var' => 'StateOrderDocInner',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['OrderCustomer'])) {
        $this->OrderCustomer = $vals['OrderCustomer'];
      }
      if (isset($vals['OrderCustomerResponsible'])) {
        $this->OrderCustomerResponsible = $vals['OrderCustomerResponsible'];
      }
      if (isset($vals['InnerSupplier'])) {
        $this->InnerSupplier = $vals['InnerSupplier'];
      }
      if (isset($vals['InnerSupplierResponsible'])) {
        $this->InnerSupplierResponsible = $vals['InnerSupplierResponsible'];
      }
      if (isset($vals['GoodsInOrderDoc'])) {
        $this->GoodsInOrderDoc = $vals['GoodsInOrderDoc'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateOrderDocInner'])) {
        $this->StateOrderDocInner = $vals['StateOrderDocInner'];
      }
    }
  }

  public function getName() {
    return 'OrderDocInner';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->OrderCustomer = new \Workabox\API\ObjectID();
            $xfer += $this->OrderCustomer->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->OrderCustomerResponsible = new \Workabox\API\ObjectID();
            $xfer += $this->OrderCustomerResponsible->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->InnerSupplier = new \Workabox\API\ObjectID();
            $xfer += $this->InnerSupplier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->InnerSupplierResponsible = new \Workabox\API\ObjectID();
            $xfer += $this->InnerSupplierResponsible->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->GoodsInOrderDoc = array();
            $_size854 = 0;
            $_etype857 = 0;
            $xfer += $input->readListBegin($_etype857, $_size854);
            for ($_i858 = 0; $_i858 < $_size854; ++$_i858)
            {
              $elem859 = null;
              $elem859 = new \Workabox\API\GoodsInOrderDocLine();
              $xfer += $elem859->read($input);
              $this->GoodsInOrderDoc []= $elem859;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size860 = 0;
            $_etype863 = 0;
            $xfer += $input->readListBegin($_etype863, $_size860);
            for ($_i864 = 0; $_i864 < $_size860; ++$_i864)
            {
              $elem865 = null;
              $elem865 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem865->read($input);
              $this->OuterCodes []= $elem865;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateOrderDocInner);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderDocInner');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OrderCustomer !== null) {
      if (!is_object($this->OrderCustomer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OrderCustomer', TType::STRUCT, 3);
      $xfer += $this->OrderCustomer->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OrderCustomerResponsible !== null) {
      if (!is_object($this->OrderCustomerResponsible)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OrderCustomerResponsible', TType::STRUCT, 4);
      $xfer += $this->OrderCustomerResponsible->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->InnerSupplier !== null) {
      if (!is_object($this->InnerSupplier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('InnerSupplier', TType::STRUCT, 5);
      $xfer += $this->InnerSupplier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->InnerSupplierResponsible !== null) {
      if (!is_object($this->InnerSupplierResponsible)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('InnerSupplierResponsible', TType::STRUCT, 6);
      $xfer += $this->InnerSupplierResponsible->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsInOrderDoc !== null) {
      if (!is_array($this->GoodsInOrderDoc)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsInOrderDoc', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsInOrderDoc));
        {
          foreach ($this->GoodsInOrderDoc as $iter866)
          {
            $xfer += $iter866->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 8);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 10);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 11);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter867)
          {
            $xfer += $iter867->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateOrderDocInner !== null) {
      $xfer += $output->writeFieldBegin('StateOrderDocInner', TType::STRING, 13);
      $xfer += $output->writeString($this->StateOrderDocInner);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class OrderDocInnerFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OrderCustomer = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OrderCustomerResponsible = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $InnerSupplier = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $InnerSupplierResponsible = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateOrderDocInner = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'OrderCustomer',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'OrderCustomerResponsible',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'InnerSupplier',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'InnerSupplierResponsible',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'StateOrderDocInner',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['OrderCustomer'])) {
        $this->OrderCustomer = $vals['OrderCustomer'];
      }
      if (isset($vals['OrderCustomerResponsible'])) {
        $this->OrderCustomerResponsible = $vals['OrderCustomerResponsible'];
      }
      if (isset($vals['InnerSupplier'])) {
        $this->InnerSupplier = $vals['InnerSupplier'];
      }
      if (isset($vals['InnerSupplierResponsible'])) {
        $this->InnerSupplierResponsible = $vals['InnerSupplierResponsible'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateOrderDocInner'])) {
        $this->StateOrderDocInner = $vals['StateOrderDocInner'];
      }
    }
  }

  public function getName() {
    return 'OrderDocInnerFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->OrderCustomer = new \Workabox\API\ObjectID();
            $xfer += $this->OrderCustomer->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->OrderCustomerResponsible = new \Workabox\API\ObjectID();
            $xfer += $this->OrderCustomerResponsible->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->InnerSupplier = new \Workabox\API\ObjectID();
            $xfer += $this->InnerSupplier->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->InnerSupplierResponsible = new \Workabox\API\ObjectID();
            $xfer += $this->InnerSupplierResponsible->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->StateOrderDocInner = array();
            $_size868 = 0;
            $_etype871 = 0;
            $xfer += $input->readListBegin($_etype871, $_size868);
            for ($_i872 = 0; $_i872 < $_size868; ++$_i872)
            {
              $elem873 = null;
              $xfer += $input->readString($elem873);
              $this->StateOrderDocInner []= $elem873;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OrderDocInnerFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OrderCustomer !== null) {
      if (!is_object($this->OrderCustomer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OrderCustomer', TType::STRUCT, 3);
      $xfer += $this->OrderCustomer->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OrderCustomerResponsible !== null) {
      if (!is_object($this->OrderCustomerResponsible)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OrderCustomerResponsible', TType::STRUCT, 4);
      $xfer += $this->OrderCustomerResponsible->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->InnerSupplier !== null) {
      if (!is_object($this->InnerSupplier)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('InnerSupplier', TType::STRUCT, 5);
      $xfer += $this->InnerSupplier->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->InnerSupplierResponsible !== null) {
      if (!is_object($this->InnerSupplierResponsible)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('InnerSupplierResponsible', TType::STRUCT, 6);
      $xfer += $this->InnerSupplierResponsible->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 7);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 8);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 9);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 10);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateOrderDocInner !== null) {
      if (!is_array($this->StateOrderDocInner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateOrderDocInner', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRING, count($this->StateOrderDocInner));
        {
          foreach ($this->StateOrderDocInner as $iter874)
          {
            $xfer += $output->writeString($iter874);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsInInventoryLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $QuantityAcc = null;
  /**
   * @var double
   */
  public $SummTotal = null;
  /**
   * @var double
   */
  public $Price = null;
  /**
   * @var double
   */
  public $Quantity = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'QuantityAcc',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'SummTotal',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'Price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'Quantity',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['QuantityAcc'])) {
        $this->QuantityAcc = $vals['QuantityAcc'];
      }
      if (isset($vals['SummTotal'])) {
        $this->SummTotal = $vals['SummTotal'];
      }
      if (isset($vals['Price'])) {
        $this->Price = $vals['Price'];
      }
      if (isset($vals['Quantity'])) {
        $this->Quantity = $vals['Quantity'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'GoodsInInventoryLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->QuantityAcc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SummTotal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsInInventoryLine');
    if ($this->QuantityAcc !== null) {
      $xfer += $output->writeFieldBegin('QuantityAcc', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->QuantityAcc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SummTotal !== null) {
      $xfer += $output->writeFieldBegin('SummTotal', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->SummTotal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Price !== null) {
      $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->Price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Quantity !== null) {
      $xfer += $output->writeFieldBegin('Quantity', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->Quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 5);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Inventory {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Responsible = null;
  /**
   * @var string
   */
  public $InventoryType = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Store = null;
  /**
   * @var \Workabox\API\GoodsInInventoryLine[]
   */
  public $GoodsInInventory = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateInventory = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'Responsible',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'InventoryType',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'Store',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'GoodsInInventory',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsInInventoryLine',
            ),
          ),
        9 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        12 => array(
          'var' => 'StateInventory',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['Responsible'])) {
        $this->Responsible = $vals['Responsible'];
      }
      if (isset($vals['InventoryType'])) {
        $this->InventoryType = $vals['InventoryType'];
      }
      if (isset($vals['Store'])) {
        $this->Store = $vals['Store'];
      }
      if (isset($vals['GoodsInInventory'])) {
        $this->GoodsInInventory = $vals['GoodsInInventory'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateInventory'])) {
        $this->StateInventory = $vals['StateInventory'];
      }
    }
  }

  public function getName() {
    return 'Inventory';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->Responsible = new \Workabox\API\ObjectID();
            $xfer += $this->Responsible->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->InventoryType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->Store = new \Workabox\API\ObjectID();
            $xfer += $this->Store->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->GoodsInInventory = array();
            $_size875 = 0;
            $_etype878 = 0;
            $xfer += $input->readListBegin($_etype878, $_size875);
            for ($_i879 = 0; $_i879 < $_size875; ++$_i879)
            {
              $elem880 = null;
              $elem880 = new \Workabox\API\GoodsInInventoryLine();
              $xfer += $elem880->read($input);
              $this->GoodsInInventory []= $elem880;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size881 = 0;
            $_etype884 = 0;
            $xfer += $input->readListBegin($_etype884, $_size881);
            for ($_i885 = 0; $_i885 < $_size881; ++$_i885)
            {
              $elem886 = null;
              $elem886 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem886->read($input);
              $this->OuterCodes []= $elem886;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateInventory);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Inventory');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 3);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Responsible !== null) {
      if (!is_object($this->Responsible)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Responsible', TType::STRUCT, 5);
      $xfer += $this->Responsible->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->InventoryType !== null) {
      $xfer += $output->writeFieldBegin('InventoryType', TType::STRING, 6);
      $xfer += $output->writeString($this->InventoryType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Store !== null) {
      if (!is_object($this->Store)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Store', TType::STRUCT, 7);
      $xfer += $this->Store->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GoodsInInventory !== null) {
      if (!is_array($this->GoodsInInventory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('GoodsInInventory', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->GoodsInInventory));
        {
          foreach ($this->GoodsInInventory as $iter887)
          {
            $xfer += $iter887->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 9);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 10);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter888)
          {
            $xfer += $iter888->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateInventory !== null) {
      $xfer += $output->writeFieldBegin('StateInventory', TType::STRING, 12);
      $xfer += $output->writeString($this->StateInventory);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class InventoryFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Responsible = null;
  /**
   * @var string[]
   */
  public $InventoryType = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Store = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateInventory = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'Responsible',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'InventoryType',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'Store',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'StateInventory',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['Responsible'])) {
        $this->Responsible = $vals['Responsible'];
      }
      if (isset($vals['InventoryType'])) {
        $this->InventoryType = $vals['InventoryType'];
      }
      if (isset($vals['Store'])) {
        $this->Store = $vals['Store'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateInventory'])) {
        $this->StateInventory = $vals['StateInventory'];
      }
    }
  }

  public function getName() {
    return 'InventoryFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->Responsible = new \Workabox\API\ObjectID();
            $xfer += $this->Responsible->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->InventoryType = array();
            $_size889 = 0;
            $_etype892 = 0;
            $xfer += $input->readListBegin($_etype892, $_size889);
            for ($_i893 = 0; $_i893 < $_size889; ++$_i893)
            {
              $elem894 = null;
              $xfer += $input->readString($elem894);
              $this->InventoryType []= $elem894;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->Store = new \Workabox\API\ObjectID();
            $xfer += $this->Store->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->StateInventory = array();
            $_size895 = 0;
            $_etype898 = 0;
            $xfer += $input->readListBegin($_etype898, $_size895);
            for ($_i899 = 0; $_i899 < $_size895; ++$_i899)
            {
              $elem900 = null;
              $xfer += $input->readString($elem900);
              $this->StateInventory []= $elem900;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('InventoryFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 3);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 4);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Responsible !== null) {
      if (!is_object($this->Responsible)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Responsible', TType::STRUCT, 5);
      $xfer += $this->Responsible->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->InventoryType !== null) {
      if (!is_array($this->InventoryType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('InventoryType', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->InventoryType));
        {
          foreach ($this->InventoryType as $iter901)
          {
            $xfer += $output->writeString($iter901);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Store !== null) {
      if (!is_object($this->Store)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Store', TType::STRUCT, 7);
      $xfer += $this->Store->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 8);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 9);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateInventory !== null) {
      if (!is_array($this->StateInventory)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateInventory', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRING, count($this->StateInventory));
        {
          foreach ($this->StateInventory as $iter902)
          {
            $xfer += $output->writeString($iter902);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MoneyMovementIn {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleReceiver = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $PayType = null;
  /**
   * @var double
   */
  public $SummaVAT = null;
  /**
   * @var string
   */
  public $PayDetails = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OutSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MoneyMovementInReceiver = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ReceiverMoneyStorage = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMoney = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ResponsibleReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'PayType',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'SummaVAT',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'PayDetails',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'OutSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'MoneyMovementInReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'ReceiverMoneyStorage',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        10 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        16 => array(
          'var' => 'StateMoney',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ResponsibleReceiver'])) {
        $this->ResponsibleReceiver = $vals['ResponsibleReceiver'];
      }
      if (isset($vals['PayType'])) {
        $this->PayType = $vals['PayType'];
      }
      if (isset($vals['SummaVAT'])) {
        $this->SummaVAT = $vals['SummaVAT'];
      }
      if (isset($vals['PayDetails'])) {
        $this->PayDetails = $vals['PayDetails'];
      }
      if (isset($vals['OutSender'])) {
        $this->OutSender = $vals['OutSender'];
      }
      if (isset($vals['MoneyMovementInReceiver'])) {
        $this->MoneyMovementInReceiver = $vals['MoneyMovementInReceiver'];
      }
      if (isset($vals['ReceiverMoneyStorage'])) {
        $this->ReceiverMoneyStorage = $vals['ReceiverMoneyStorage'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMoney'])) {
        $this->StateMoney = $vals['StateMoney'];
      }
    }
  }

  public function getName() {
    return 'MoneyMovementIn';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->PayType = new \Workabox\API\ObjectID();
            $xfer += $this->PayType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SummaVAT);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PayDetails);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->OutSender = new \Workabox\API\ObjectID();
            $xfer += $this->OutSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->MoneyMovementInReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->MoneyMovementInReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->ReceiverMoneyStorage = new \Workabox\API\ObjectID();
            $xfer += $this->ReceiverMoneyStorage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size903 = 0;
            $_etype906 = 0;
            $xfer += $input->readListBegin($_etype906, $_size903);
            for ($_i907 = 0; $_i907 < $_size903; ++$_i907)
            {
              $elem908 = null;
              $elem908 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem908->read($input);
              $this->OuterCodes []= $elem908;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MoneyMovementIn');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleReceiver !== null) {
      if (!is_object($this->ResponsibleReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleReceiver', TType::STRUCT, 3);
      $xfer += $this->ResponsibleReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayType !== null) {
      if (!is_object($this->PayType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('PayType', TType::STRUCT, 4);
      $xfer += $this->PayType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SummaVAT !== null) {
      $xfer += $output->writeFieldBegin('SummaVAT', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->SummaVAT);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayDetails !== null) {
      $xfer += $output->writeFieldBegin('PayDetails', TType::STRING, 6);
      $xfer += $output->writeString($this->PayDetails);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OutSender !== null) {
      if (!is_object($this->OutSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OutSender', TType::STRUCT, 7);
      $xfer += $this->OutSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MoneyMovementInReceiver !== null) {
      if (!is_object($this->MoneyMovementInReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MoneyMovementInReceiver', TType::STRUCT, 8);
      $xfer += $this->MoneyMovementInReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ReceiverMoneyStorage !== null) {
      if (!is_object($this->ReceiverMoneyStorage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ReceiverMoneyStorage', TType::STRUCT, 9);
      $xfer += $this->ReceiverMoneyStorage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 10);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 12);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 13);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 14);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter909)
          {
            $xfer += $iter909->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMoney !== null) {
      $xfer += $output->writeFieldBegin('StateMoney', TType::STRING, 16);
      $xfer += $output->writeString($this->StateMoney);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MoneyMovementInFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleReceiver = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $PayType = null;
  /**
   * @var string
   */
  public $SummaVAT = null;
  /**
   * @var string
   */
  public $PayDetails = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OutSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MoneyMovementInReceiver = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ReceiverMoneyStorage = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateMoney = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ResponsibleReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'PayType',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'SummaVAT',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'PayDetails',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'OutSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'MoneyMovementInReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'ReceiverMoneyStorage',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        10 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'StateMoney',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ResponsibleReceiver'])) {
        $this->ResponsibleReceiver = $vals['ResponsibleReceiver'];
      }
      if (isset($vals['PayType'])) {
        $this->PayType = $vals['PayType'];
      }
      if (isset($vals['SummaVAT'])) {
        $this->SummaVAT = $vals['SummaVAT'];
      }
      if (isset($vals['PayDetails'])) {
        $this->PayDetails = $vals['PayDetails'];
      }
      if (isset($vals['OutSender'])) {
        $this->OutSender = $vals['OutSender'];
      }
      if (isset($vals['MoneyMovementInReceiver'])) {
        $this->MoneyMovementInReceiver = $vals['MoneyMovementInReceiver'];
      }
      if (isset($vals['ReceiverMoneyStorage'])) {
        $this->ReceiverMoneyStorage = $vals['ReceiverMoneyStorage'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateMoney'])) {
        $this->StateMoney = $vals['StateMoney'];
      }
    }
  }

  public function getName() {
    return 'MoneyMovementInFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->PayType = new \Workabox\API\ObjectID();
            $xfer += $this->PayType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SummaVAT);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PayDetails);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->OutSender = new \Workabox\API\ObjectID();
            $xfer += $this->OutSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->MoneyMovementInReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->MoneyMovementInReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->ReceiverMoneyStorage = new \Workabox\API\ObjectID();
            $xfer += $this->ReceiverMoneyStorage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->StateMoney = array();
            $_size910 = 0;
            $_etype913 = 0;
            $xfer += $input->readListBegin($_etype913, $_size910);
            for ($_i914 = 0; $_i914 < $_size910; ++$_i914)
            {
              $elem915 = null;
              $xfer += $input->readString($elem915);
              $this->StateMoney []= $elem915;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MoneyMovementInFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleReceiver !== null) {
      if (!is_object($this->ResponsibleReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleReceiver', TType::STRUCT, 3);
      $xfer += $this->ResponsibleReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayType !== null) {
      if (!is_object($this->PayType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('PayType', TType::STRUCT, 4);
      $xfer += $this->PayType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SummaVAT !== null) {
      $xfer += $output->writeFieldBegin('SummaVAT', TType::STRING, 5);
      $xfer += $output->writeString($this->SummaVAT);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayDetails !== null) {
      $xfer += $output->writeFieldBegin('PayDetails', TType::STRING, 6);
      $xfer += $output->writeString($this->PayDetails);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OutSender !== null) {
      if (!is_object($this->OutSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OutSender', TType::STRUCT, 7);
      $xfer += $this->OutSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MoneyMovementInReceiver !== null) {
      if (!is_object($this->MoneyMovementInReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MoneyMovementInReceiver', TType::STRUCT, 8);
      $xfer += $this->MoneyMovementInReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ReceiverMoneyStorage !== null) {
      if (!is_object($this->ReceiverMoneyStorage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ReceiverMoneyStorage', TType::STRUCT, 9);
      $xfer += $this->ReceiverMoneyStorage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 10);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 11);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 12);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 13);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 14);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMoney !== null) {
      if (!is_array($this->StateMoney)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMoney', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMoney));
        {
          foreach ($this->StateMoney as $iter916)
          {
            $xfer += $output->writeString($iter916);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MoneyMovementOut {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $PayType = null;
  /**
   * @var double
   */
  public $SummaVAT = null;
  /**
   * @var string
   */
  public $PayDetails = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OutReceiver = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MoneyMovementOutSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $SenderMoneyStorage = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMoney = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ResponsibleSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'PayType',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'SummaVAT',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'PayDetails',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'OutReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'MoneyMovementOutSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'SenderMoneyStorage',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        10 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        16 => array(
          'var' => 'StateMoney',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ResponsibleSender'])) {
        $this->ResponsibleSender = $vals['ResponsibleSender'];
      }
      if (isset($vals['PayType'])) {
        $this->PayType = $vals['PayType'];
      }
      if (isset($vals['SummaVAT'])) {
        $this->SummaVAT = $vals['SummaVAT'];
      }
      if (isset($vals['PayDetails'])) {
        $this->PayDetails = $vals['PayDetails'];
      }
      if (isset($vals['OutReceiver'])) {
        $this->OutReceiver = $vals['OutReceiver'];
      }
      if (isset($vals['MoneyMovementOutSender'])) {
        $this->MoneyMovementOutSender = $vals['MoneyMovementOutSender'];
      }
      if (isset($vals['SenderMoneyStorage'])) {
        $this->SenderMoneyStorage = $vals['SenderMoneyStorage'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMoney'])) {
        $this->StateMoney = $vals['StateMoney'];
      }
    }
  }

  public function getName() {
    return 'MoneyMovementOut';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleSender = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->PayType = new \Workabox\API\ObjectID();
            $xfer += $this->PayType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SummaVAT);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PayDetails);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->OutReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->OutReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->MoneyMovementOutSender = new \Workabox\API\ObjectID();
            $xfer += $this->MoneyMovementOutSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->SenderMoneyStorage = new \Workabox\API\ObjectID();
            $xfer += $this->SenderMoneyStorage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size917 = 0;
            $_etype920 = 0;
            $xfer += $input->readListBegin($_etype920, $_size917);
            for ($_i921 = 0; $_i921 < $_size917; ++$_i921)
            {
              $elem922 = null;
              $elem922 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem922->read($input);
              $this->OuterCodes []= $elem922;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MoneyMovementOut');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleSender !== null) {
      if (!is_object($this->ResponsibleSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleSender', TType::STRUCT, 3);
      $xfer += $this->ResponsibleSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayType !== null) {
      if (!is_object($this->PayType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('PayType', TType::STRUCT, 4);
      $xfer += $this->PayType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SummaVAT !== null) {
      $xfer += $output->writeFieldBegin('SummaVAT', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->SummaVAT);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayDetails !== null) {
      $xfer += $output->writeFieldBegin('PayDetails', TType::STRING, 6);
      $xfer += $output->writeString($this->PayDetails);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OutReceiver !== null) {
      if (!is_object($this->OutReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OutReceiver', TType::STRUCT, 7);
      $xfer += $this->OutReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MoneyMovementOutSender !== null) {
      if (!is_object($this->MoneyMovementOutSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MoneyMovementOutSender', TType::STRUCT, 8);
      $xfer += $this->MoneyMovementOutSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SenderMoneyStorage !== null) {
      if (!is_object($this->SenderMoneyStorage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('SenderMoneyStorage', TType::STRUCT, 9);
      $xfer += $this->SenderMoneyStorage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 10);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 12);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 13);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 14);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter923)
          {
            $xfer += $iter923->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMoney !== null) {
      $xfer += $output->writeFieldBegin('StateMoney', TType::STRING, 16);
      $xfer += $output->writeString($this->StateMoney);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MoneyMovementOutFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $PayType = null;
  /**
   * @var string
   */
  public $SummaVAT = null;
  /**
   * @var string
   */
  public $PayDetails = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $OutReceiver = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MoneyMovementOutSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $SenderMoneyStorage = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateMoney = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ResponsibleSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'PayType',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'SummaVAT',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'PayDetails',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'OutReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'MoneyMovementOutSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'SenderMoneyStorage',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        10 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'StateMoney',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ResponsibleSender'])) {
        $this->ResponsibleSender = $vals['ResponsibleSender'];
      }
      if (isset($vals['PayType'])) {
        $this->PayType = $vals['PayType'];
      }
      if (isset($vals['SummaVAT'])) {
        $this->SummaVAT = $vals['SummaVAT'];
      }
      if (isset($vals['PayDetails'])) {
        $this->PayDetails = $vals['PayDetails'];
      }
      if (isset($vals['OutReceiver'])) {
        $this->OutReceiver = $vals['OutReceiver'];
      }
      if (isset($vals['MoneyMovementOutSender'])) {
        $this->MoneyMovementOutSender = $vals['MoneyMovementOutSender'];
      }
      if (isset($vals['SenderMoneyStorage'])) {
        $this->SenderMoneyStorage = $vals['SenderMoneyStorage'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateMoney'])) {
        $this->StateMoney = $vals['StateMoney'];
      }
    }
  }

  public function getName() {
    return 'MoneyMovementOutFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleSender = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->PayType = new \Workabox\API\ObjectID();
            $xfer += $this->PayType->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SummaVAT);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PayDetails);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->OutReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->OutReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->MoneyMovementOutSender = new \Workabox\API\ObjectID();
            $xfer += $this->MoneyMovementOutSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->SenderMoneyStorage = new \Workabox\API\ObjectID();
            $xfer += $this->SenderMoneyStorage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->StateMoney = array();
            $_size924 = 0;
            $_etype927 = 0;
            $xfer += $input->readListBegin($_etype927, $_size924);
            for ($_i928 = 0; $_i928 < $_size924; ++$_i928)
            {
              $elem929 = null;
              $xfer += $input->readString($elem929);
              $this->StateMoney []= $elem929;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MoneyMovementOutFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleSender !== null) {
      if (!is_object($this->ResponsibleSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleSender', TType::STRUCT, 3);
      $xfer += $this->ResponsibleSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayType !== null) {
      if (!is_object($this->PayType)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('PayType', TType::STRUCT, 4);
      $xfer += $this->PayType->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SummaVAT !== null) {
      $xfer += $output->writeFieldBegin('SummaVAT', TType::STRING, 5);
      $xfer += $output->writeString($this->SummaVAT);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayDetails !== null) {
      $xfer += $output->writeFieldBegin('PayDetails', TType::STRING, 6);
      $xfer += $output->writeString($this->PayDetails);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OutReceiver !== null) {
      if (!is_object($this->OutReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OutReceiver', TType::STRUCT, 7);
      $xfer += $this->OutReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MoneyMovementOutSender !== null) {
      if (!is_object($this->MoneyMovementOutSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MoneyMovementOutSender', TType::STRUCT, 8);
      $xfer += $this->MoneyMovementOutSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SenderMoneyStorage !== null) {
      if (!is_object($this->SenderMoneyStorage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('SenderMoneyStorage', TType::STRUCT, 9);
      $xfer += $this->SenderMoneyStorage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 10);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 11);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 12);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 13);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 14);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMoney !== null) {
      if (!is_array($this->StateMoney)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMoney', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMoney));
        {
          foreach ($this->StateMoney as $iter930)
          {
            $xfer += $output->writeString($iter930);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MoneyMovementInner {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleReceiver = null;
  /**
   * @var string
   */
  public $PayDetails = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MoneyMovementInnerSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MoneyMovementInnerReceiver = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $SenderMoneyStorage = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ReceiverMoneyStorage = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMoney = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ResponsibleSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'ResponsibleReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'PayDetails',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'MoneyMovementInnerSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'MoneyMovementInnerReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'SenderMoneyStorage',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'ReceiverMoneyStorage',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        10 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        16 => array(
          'var' => 'StateMoney',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ResponsibleSender'])) {
        $this->ResponsibleSender = $vals['ResponsibleSender'];
      }
      if (isset($vals['ResponsibleReceiver'])) {
        $this->ResponsibleReceiver = $vals['ResponsibleReceiver'];
      }
      if (isset($vals['PayDetails'])) {
        $this->PayDetails = $vals['PayDetails'];
      }
      if (isset($vals['MoneyMovementInnerSender'])) {
        $this->MoneyMovementInnerSender = $vals['MoneyMovementInnerSender'];
      }
      if (isset($vals['MoneyMovementInnerReceiver'])) {
        $this->MoneyMovementInnerReceiver = $vals['MoneyMovementInnerReceiver'];
      }
      if (isset($vals['SenderMoneyStorage'])) {
        $this->SenderMoneyStorage = $vals['SenderMoneyStorage'];
      }
      if (isset($vals['ReceiverMoneyStorage'])) {
        $this->ReceiverMoneyStorage = $vals['ReceiverMoneyStorage'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMoney'])) {
        $this->StateMoney = $vals['StateMoney'];
      }
    }
  }

  public function getName() {
    return 'MoneyMovementInner';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleSender = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PayDetails);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->MoneyMovementInnerSender = new \Workabox\API\ObjectID();
            $xfer += $this->MoneyMovementInnerSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->MoneyMovementInnerReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->MoneyMovementInnerReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->SenderMoneyStorage = new \Workabox\API\ObjectID();
            $xfer += $this->SenderMoneyStorage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->ReceiverMoneyStorage = new \Workabox\API\ObjectID();
            $xfer += $this->ReceiverMoneyStorage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size931 = 0;
            $_etype934 = 0;
            $xfer += $input->readListBegin($_etype934, $_size931);
            for ($_i935 = 0; $_i935 < $_size931; ++$_i935)
            {
              $elem936 = null;
              $elem936 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem936->read($input);
              $this->OuterCodes []= $elem936;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMoney);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MoneyMovementInner');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleSender !== null) {
      if (!is_object($this->ResponsibleSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleSender', TType::STRUCT, 3);
      $xfer += $this->ResponsibleSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleReceiver !== null) {
      if (!is_object($this->ResponsibleReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleReceiver', TType::STRUCT, 4);
      $xfer += $this->ResponsibleReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayDetails !== null) {
      $xfer += $output->writeFieldBegin('PayDetails', TType::STRING, 5);
      $xfer += $output->writeString($this->PayDetails);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MoneyMovementInnerSender !== null) {
      if (!is_object($this->MoneyMovementInnerSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MoneyMovementInnerSender', TType::STRUCT, 6);
      $xfer += $this->MoneyMovementInnerSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MoneyMovementInnerReceiver !== null) {
      if (!is_object($this->MoneyMovementInnerReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MoneyMovementInnerReceiver', TType::STRUCT, 7);
      $xfer += $this->MoneyMovementInnerReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SenderMoneyStorage !== null) {
      if (!is_object($this->SenderMoneyStorage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('SenderMoneyStorage', TType::STRUCT, 8);
      $xfer += $this->SenderMoneyStorage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ReceiverMoneyStorage !== null) {
      if (!is_object($this->ReceiverMoneyStorage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ReceiverMoneyStorage', TType::STRUCT, 9);
      $xfer += $this->ReceiverMoneyStorage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 10);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 12);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 13);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 14);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter937)
          {
            $xfer += $iter937->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMoney !== null) {
      $xfer += $output->writeFieldBegin('StateMoney', TType::STRING, 16);
      $xfer += $output->writeString($this->StateMoney);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MoneyMovementInnerFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ResponsibleReceiver = null;
  /**
   * @var string
   */
  public $PayDetails = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MoneyMovementInnerSender = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $MoneyMovementInnerReceiver = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $SenderMoneyStorage = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ReceiverMoneyStorage = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var string
   */
  public $GUID = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateMoney = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ResponsibleSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'ResponsibleReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'PayDetails',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'MoneyMovementInnerSender',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'MoneyMovementInnerReceiver',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'SenderMoneyStorage',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        9 => array(
          'var' => 'ReceiverMoneyStorage',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        10 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'GUID',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'StateMoney',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ResponsibleSender'])) {
        $this->ResponsibleSender = $vals['ResponsibleSender'];
      }
      if (isset($vals['ResponsibleReceiver'])) {
        $this->ResponsibleReceiver = $vals['ResponsibleReceiver'];
      }
      if (isset($vals['PayDetails'])) {
        $this->PayDetails = $vals['PayDetails'];
      }
      if (isset($vals['MoneyMovementInnerSender'])) {
        $this->MoneyMovementInnerSender = $vals['MoneyMovementInnerSender'];
      }
      if (isset($vals['MoneyMovementInnerReceiver'])) {
        $this->MoneyMovementInnerReceiver = $vals['MoneyMovementInnerReceiver'];
      }
      if (isset($vals['SenderMoneyStorage'])) {
        $this->SenderMoneyStorage = $vals['SenderMoneyStorage'];
      }
      if (isset($vals['ReceiverMoneyStorage'])) {
        $this->ReceiverMoneyStorage = $vals['ReceiverMoneyStorage'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['GUID'])) {
        $this->GUID = $vals['GUID'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateMoney'])) {
        $this->StateMoney = $vals['StateMoney'];
      }
    }
  }

  public function getName() {
    return 'MoneyMovementInnerFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleSender = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->ResponsibleReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->ResponsibleReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PayDetails);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->MoneyMovementInnerSender = new \Workabox\API\ObjectID();
            $xfer += $this->MoneyMovementInnerSender->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->MoneyMovementInnerReceiver = new \Workabox\API\ObjectID();
            $xfer += $this->MoneyMovementInnerReceiver->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRUCT) {
            $this->SenderMoneyStorage = new \Workabox\API\ObjectID();
            $xfer += $this->SenderMoneyStorage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRUCT) {
            $this->ReceiverMoneyStorage = new \Workabox\API\ObjectID();
            $xfer += $this->ReceiverMoneyStorage->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->GUID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->StateMoney = array();
            $_size938 = 0;
            $_etype941 = 0;
            $xfer += $input->readListBegin($_etype941, $_size938);
            for ($_i942 = 0; $_i942 < $_size938; ++$_i942)
            {
              $elem943 = null;
              $xfer += $input->readString($elem943);
              $this->StateMoney []= $elem943;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MoneyMovementInnerFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleSender !== null) {
      if (!is_object($this->ResponsibleSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleSender', TType::STRUCT, 3);
      $xfer += $this->ResponsibleSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ResponsibleReceiver !== null) {
      if (!is_object($this->ResponsibleReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ResponsibleReceiver', TType::STRUCT, 4);
      $xfer += $this->ResponsibleReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PayDetails !== null) {
      $xfer += $output->writeFieldBegin('PayDetails', TType::STRING, 5);
      $xfer += $output->writeString($this->PayDetails);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MoneyMovementInnerSender !== null) {
      if (!is_object($this->MoneyMovementInnerSender)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MoneyMovementInnerSender', TType::STRUCT, 6);
      $xfer += $this->MoneyMovementInnerSender->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MoneyMovementInnerReceiver !== null) {
      if (!is_object($this->MoneyMovementInnerReceiver)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MoneyMovementInnerReceiver', TType::STRUCT, 7);
      $xfer += $this->MoneyMovementInnerReceiver->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SenderMoneyStorage !== null) {
      if (!is_object($this->SenderMoneyStorage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('SenderMoneyStorage', TType::STRUCT, 8);
      $xfer += $this->SenderMoneyStorage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ReceiverMoneyStorage !== null) {
      if (!is_object($this->ReceiverMoneyStorage)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ReceiverMoneyStorage', TType::STRUCT, 9);
      $xfer += $this->ReceiverMoneyStorage->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 10);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 11);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->GUID !== null) {
      $xfer += $output->writeFieldBegin('GUID', TType::STRING, 12);
      $xfer += $output->writeString($this->GUID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 13);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 14);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMoney !== null) {
      if (!is_array($this->StateMoney)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMoney', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMoney));
        {
          foreach ($this->StateMoney as $iter944)
          {
            $xfer += $output->writeString($iter944);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class FinishedGoodsLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $Quantity = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Quantity',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Quantity'])) {
        $this->Quantity = $vals['Quantity'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'FinishedGoodsLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FinishedGoodsLine');
    if ($this->Quantity !== null) {
      $xfer += $output->writeFieldBegin('Quantity', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->Quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 2);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MaterialsLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $Quantity = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Quantity',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Quantity'])) {
        $this->Quantity = $vals['Quantity'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'MaterialsLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MaterialsLine');
    if ($this->Quantity !== null) {
      $xfer += $output->writeFieldBegin('Quantity', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->Quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 2);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Routings {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var double
   */
  public $ProdCost = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreFinished = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreMaterials = null;
  /**
   * @var \Workabox\API\FinishedGoodsLine[]
   */
  public $FinishedGoods = null;
  /**
   * @var \Workabox\API\MaterialsLine[]
   */
  public $Materials = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'ProdCost',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'StoreFinished',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'StoreMaterials',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'FinishedGoods',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\FinishedGoodsLine',
            ),
          ),
        8 => array(
          'var' => 'Materials',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\MaterialsLine',
            ),
          ),
        9 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        11 => array(
          'var' => 'StateMain',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['ProdCost'])) {
        $this->ProdCost = $vals['ProdCost'];
      }
      if (isset($vals['StoreFinished'])) {
        $this->StoreFinished = $vals['StoreFinished'];
      }
      if (isset($vals['StoreMaterials'])) {
        $this->StoreMaterials = $vals['StoreMaterials'];
      }
      if (isset($vals['FinishedGoods'])) {
        $this->FinishedGoods = $vals['FinishedGoods'];
      }
      if (isset($vals['Materials'])) {
        $this->Materials = $vals['Materials'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'Routings';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ProdCost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->StoreFinished = new \Workabox\API\ObjectID();
            $xfer += $this->StoreFinished->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->StoreMaterials = new \Workabox\API\ObjectID();
            $xfer += $this->StoreMaterials->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->FinishedGoods = array();
            $_size945 = 0;
            $_etype948 = 0;
            $xfer += $input->readListBegin($_etype948, $_size945);
            for ($_i949 = 0; $_i949 < $_size945; ++$_i949)
            {
              $elem950 = null;
              $elem950 = new \Workabox\API\FinishedGoodsLine();
              $xfer += $elem950->read($input);
              $this->FinishedGoods []= $elem950;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->Materials = array();
            $_size951 = 0;
            $_etype954 = 0;
            $xfer += $input->readListBegin($_etype954, $_size951);
            for ($_i955 = 0; $_i955 < $_size951; ++$_i955)
            {
              $elem956 = null;
              $elem956 = new \Workabox\API\MaterialsLine();
              $xfer += $elem956->read($input);
              $this->Materials []= $elem956;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size957 = 0;
            $_etype960 = 0;
            $xfer += $input->readListBegin($_etype960, $_size957);
            for ($_i961 = 0; $_i961 < $_size957; ++$_i961)
            {
              $elem962 = null;
              $elem962 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem962->read($input);
              $this->OuterCodes []= $elem962;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateMain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Routings');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 3);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProdCost !== null) {
      $xfer += $output->writeFieldBegin('ProdCost', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->ProdCost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreFinished !== null) {
      if (!is_object($this->StoreFinished)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreFinished', TType::STRUCT, 5);
      $xfer += $this->StoreFinished->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreMaterials !== null) {
      if (!is_object($this->StoreMaterials)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreMaterials', TType::STRUCT, 6);
      $xfer += $this->StoreMaterials->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FinishedGoods !== null) {
      if (!is_array($this->FinishedGoods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('FinishedGoods', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->FinishedGoods));
        {
          foreach ($this->FinishedGoods as $iter963)
          {
            $xfer += $iter963->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Materials !== null) {
      if (!is_array($this->Materials)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Materials', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->Materials));
        {
          foreach ($this->Materials as $iter964)
          {
            $xfer += $iter964->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 9);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter965)
          {
            $xfer += $iter965->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 11);
      $xfer += $output->writeString($this->StateMain);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RoutingsFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $ObjectOwner = null;
  /**
   * @var string
   */
  public $ProdCost = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreFinished = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreMaterials = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var string[]
   */
  public $StateMain = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ObjectOwner',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        4 => array(
          'var' => 'ProdCost',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'StoreFinished',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'StoreMaterials',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'StateMain',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['ObjectOwner'])) {
        $this->ObjectOwner = $vals['ObjectOwner'];
      }
      if (isset($vals['ProdCost'])) {
        $this->ProdCost = $vals['ProdCost'];
      }
      if (isset($vals['StoreFinished'])) {
        $this->StoreFinished = $vals['StoreFinished'];
      }
      if (isset($vals['StoreMaterials'])) {
        $this->StoreMaterials = $vals['StoreMaterials'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['StateMain'])) {
        $this->StateMain = $vals['StateMain'];
      }
    }
  }

  public function getName() {
    return 'RoutingsFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->ObjectOwner = new \Workabox\API\ObjectID();
            $xfer += $this->ObjectOwner->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ProdCost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->StoreFinished = new \Workabox\API\ObjectID();
            $xfer += $this->StoreFinished->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->StoreMaterials = new \Workabox\API\ObjectID();
            $xfer += $this->StoreMaterials->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->StateMain = array();
            $_size966 = 0;
            $_etype969 = 0;
            $xfer += $input->readListBegin($_etype969, $_size966);
            for ($_i970 = 0; $_i970 < $_size966; ++$_i970)
            {
              $elem971 = null;
              $xfer += $input->readString($elem971);
              $this->StateMain []= $elem971;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RoutingsFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectOwner !== null) {
      if (!is_object($this->ObjectOwner)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 3);
      $xfer += $this->ObjectOwner->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProdCost !== null) {
      $xfer += $output->writeFieldBegin('ProdCost', TType::STRING, 4);
      $xfer += $output->writeString($this->ProdCost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreFinished !== null) {
      if (!is_object($this->StoreFinished)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreFinished', TType::STRUCT, 5);
      $xfer += $this->StoreFinished->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreMaterials !== null) {
      if (!is_object($this->StoreMaterials)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreMaterials', TType::STRUCT, 6);
      $xfer += $this->StoreMaterials->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 7);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateMain !== null) {
      if (!is_array($this->StateMain)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateMain', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRING, count($this->StateMain));
        {
          foreach ($this->StateMain as $iter972)
          {
            $xfer += $output->writeString($iter972);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProdFinishedGoodsLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $SummTotal = null;
  /**
   * @var double
   */
  public $Quantity = null;
  /**
   * @var double
   */
  public $Price = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'SummTotal',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'Quantity',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'Price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['SummTotal'])) {
        $this->SummTotal = $vals['SummTotal'];
      }
      if (isset($vals['Quantity'])) {
        $this->Quantity = $vals['Quantity'];
      }
      if (isset($vals['Price'])) {
        $this->Price = $vals['Price'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'ProdFinishedGoodsLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SummTotal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProdFinishedGoodsLine');
    if ($this->SummTotal !== null) {
      $xfer += $output->writeFieldBegin('SummTotal', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->SummTotal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Quantity !== null) {
      $xfer += $output->writeFieldBegin('Quantity', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->Quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Price !== null) {
      $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->Price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 4);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProdMaterialsLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $SummTotal = null;
  /**
   * @var double
   */
  public $Quantity = null;
  /**
   * @var double
   */
  public $Price = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'SummTotal',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'Quantity',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'Price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['SummTotal'])) {
        $this->SummTotal = $vals['SummTotal'];
      }
      if (isset($vals['Quantity'])) {
        $this->Quantity = $vals['Quantity'];
      }
      if (isset($vals['Price'])) {
        $this->Price = $vals['Price'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'ProdMaterialsLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->SummTotal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Quantity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProdMaterialsLine');
    if ($this->SummTotal !== null) {
      $xfer += $output->writeFieldBegin('SummTotal', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->SummTotal);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Quantity !== null) {
      $xfer += $output->writeFieldBegin('Quantity', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->Quantity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Price !== null) {
      $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->Price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 4);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductionOperations {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var double
   */
  public $DocumentSumm = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Responsible = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreMaterials = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Routings = null;
  /**
   * @var double
   */
  public $ProdVolume = null;
  /**
   * @var \Workabox\API\ProdFinishedGoodsLine[]
   */
  public $ProdFinishedGoods = null;
  /**
   * @var \Workabox\API\ProdMaterialsLine[]
   */
  public $ProdMaterials = null;
  /**
   * @var double
   */
  public $ProdCost = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreFinished = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $StateDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'DocumentSumm',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'Responsible',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'StoreMaterials',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'Routings',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'ProdVolume',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'ProdFinishedGoods',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ProdFinishedGoodsLine',
            ),
          ),
        10 => array(
          'var' => 'ProdMaterials',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ProdMaterialsLine',
            ),
          ),
        11 => array(
          'var' => 'ProdCost',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'StoreFinished',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        13 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        16 => array(
          'var' => 'StateDocuments',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['Responsible'])) {
        $this->Responsible = $vals['Responsible'];
      }
      if (isset($vals['StoreMaterials'])) {
        $this->StoreMaterials = $vals['StoreMaterials'];
      }
      if (isset($vals['Routings'])) {
        $this->Routings = $vals['Routings'];
      }
      if (isset($vals['ProdVolume'])) {
        $this->ProdVolume = $vals['ProdVolume'];
      }
      if (isset($vals['ProdFinishedGoods'])) {
        $this->ProdFinishedGoods = $vals['ProdFinishedGoods'];
      }
      if (isset($vals['ProdMaterials'])) {
        $this->ProdMaterials = $vals['ProdMaterials'];
      }
      if (isset($vals['ProdCost'])) {
        $this->ProdCost = $vals['ProdCost'];
      }
      if (isset($vals['StoreFinished'])) {
        $this->StoreFinished = $vals['StoreFinished'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['StateDocuments'])) {
        $this->StateDocuments = $vals['StateDocuments'];
      }
    }
  }

  public function getName() {
    return 'ProductionOperations';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->Responsible = new \Workabox\API\ObjectID();
            $xfer += $this->Responsible->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->StoreMaterials = new \Workabox\API\ObjectID();
            $xfer += $this->StoreMaterials->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->Routings = new \Workabox\API\ObjectID();
            $xfer += $this->Routings->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ProdVolume);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->ProdFinishedGoods = array();
            $_size973 = 0;
            $_etype976 = 0;
            $xfer += $input->readListBegin($_etype976, $_size973);
            for ($_i977 = 0; $_i977 < $_size973; ++$_i977)
            {
              $elem978 = null;
              $elem978 = new \Workabox\API\ProdFinishedGoodsLine();
              $xfer += $elem978->read($input);
              $this->ProdFinishedGoods []= $elem978;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->ProdMaterials = array();
            $_size979 = 0;
            $_etype982 = 0;
            $xfer += $input->readListBegin($_etype982, $_size979);
            for ($_i983 = 0; $_i983 < $_size979; ++$_i983)
            {
              $elem984 = null;
              $elem984 = new \Workabox\API\ProdMaterialsLine();
              $xfer += $elem984->read($input);
              $this->ProdMaterials []= $elem984;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ProdCost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRUCT) {
            $this->StoreFinished = new \Workabox\API\ObjectID();
            $xfer += $this->StoreFinished->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size985 = 0;
            $_etype988 = 0;
            $xfer += $input->readListBegin($_etype988, $_size985);
            for ($_i989 = 0; $_i989 < $_size985; ++$_i989)
            {
              $elem990 = null;
              $elem990 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem990->read($input);
              $this->OuterCodes []= $elem990;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StateDocuments);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductionOperations');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 3);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Responsible !== null) {
      if (!is_object($this->Responsible)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Responsible', TType::STRUCT, 5);
      $xfer += $this->Responsible->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreMaterials !== null) {
      if (!is_object($this->StoreMaterials)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreMaterials', TType::STRUCT, 6);
      $xfer += $this->StoreMaterials->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Routings !== null) {
      if (!is_object($this->Routings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Routings', TType::STRUCT, 7);
      $xfer += $this->Routings->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProdVolume !== null) {
      $xfer += $output->writeFieldBegin('ProdVolume', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->ProdVolume);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProdFinishedGoods !== null) {
      if (!is_array($this->ProdFinishedGoods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ProdFinishedGoods', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->ProdFinishedGoods));
        {
          foreach ($this->ProdFinishedGoods as $iter991)
          {
            $xfer += $iter991->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProdMaterials !== null) {
      if (!is_array($this->ProdMaterials)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ProdMaterials', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->ProdMaterials));
        {
          foreach ($this->ProdMaterials as $iter992)
          {
            $xfer += $iter992->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProdCost !== null) {
      $xfer += $output->writeFieldBegin('ProdCost', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->ProdCost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreFinished !== null) {
      if (!is_object($this->StoreFinished)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreFinished', TType::STRUCT, 12);
      $xfer += $this->StoreFinished->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 13);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 14);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter993)
          {
            $xfer += $iter993->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateDocuments !== null) {
      $xfer += $output->writeFieldBegin('StateDocuments', TType::STRING, 16);
      $xfer += $output->writeString($this->StateDocuments);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ProductionOperationsFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $OuterID = null;
  /**
   * @var string
   */
  public $Additional = null;
  /**
   * @var string
   */
  public $DocumentSumm = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Responsible = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreMaterials = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Routings = null;
  /**
   * @var string
   */
  public $ProdVolume = null;
  /**
   * @var string
   */
  public $ProdCost = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $StoreFinished = null;
  /**
   * @var string
   */
  public $DocNumber = null;
  /**
   * @var string
   */
  public $DocumentDate = null;
  /**
   * @var string[]
   */
  public $StateDocuments = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'OuterID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Additional',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'DocumentSumm',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'Responsible',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        6 => array(
          'var' => 'StoreMaterials',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        7 => array(
          'var' => 'Routings',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        8 => array(
          'var' => 'ProdVolume',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'ProdCost',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'StoreFinished',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        11 => array(
          'var' => 'DocNumber',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'DocumentDate',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'StateDocuments',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['OuterID'])) {
        $this->OuterID = $vals['OuterID'];
      }
      if (isset($vals['Additional'])) {
        $this->Additional = $vals['Additional'];
      }
      if (isset($vals['DocumentSumm'])) {
        $this->DocumentSumm = $vals['DocumentSumm'];
      }
      if (isset($vals['Responsible'])) {
        $this->Responsible = $vals['Responsible'];
      }
      if (isset($vals['StoreMaterials'])) {
        $this->StoreMaterials = $vals['StoreMaterials'];
      }
      if (isset($vals['Routings'])) {
        $this->Routings = $vals['Routings'];
      }
      if (isset($vals['ProdVolume'])) {
        $this->ProdVolume = $vals['ProdVolume'];
      }
      if (isset($vals['ProdCost'])) {
        $this->ProdCost = $vals['ProdCost'];
      }
      if (isset($vals['StoreFinished'])) {
        $this->StoreFinished = $vals['StoreFinished'];
      }
      if (isset($vals['DocNumber'])) {
        $this->DocNumber = $vals['DocNumber'];
      }
      if (isset($vals['DocumentDate'])) {
        $this->DocumentDate = $vals['DocumentDate'];
      }
      if (isset($vals['StateDocuments'])) {
        $this->StateDocuments = $vals['StateDocuments'];
      }
    }
  }

  public function getName() {
    return 'ProductionOperationsFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->OuterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Additional);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentSumm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->Responsible = new \Workabox\API\ObjectID();
            $xfer += $this->Responsible->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->StoreMaterials = new \Workabox\API\ObjectID();
            $xfer += $this->StoreMaterials->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRUCT) {
            $this->Routings = new \Workabox\API\ObjectID();
            $xfer += $this->Routings->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ProdVolume);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ProdCost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRUCT) {
            $this->StoreFinished = new \Workabox\API\ObjectID();
            $xfer += $this->StoreFinished->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DocumentDate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->StateDocuments = array();
            $_size994 = 0;
            $_etype997 = 0;
            $xfer += $input->readListBegin($_etype997, $_size994);
            for ($_i998 = 0; $_i998 < $_size994; ++$_i998)
            {
              $elem999 = null;
              $xfer += $input->readString($elem999);
              $this->StateDocuments []= $elem999;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ProductionOperationsFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterID !== null) {
      $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
      $xfer += $output->writeString($this->OuterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Additional !== null) {
      $xfer += $output->writeFieldBegin('Additional', TType::STRING, 3);
      $xfer += $output->writeString($this->Additional);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentSumm !== null) {
      $xfer += $output->writeFieldBegin('DocumentSumm', TType::STRING, 4);
      $xfer += $output->writeString($this->DocumentSumm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Responsible !== null) {
      if (!is_object($this->Responsible)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Responsible', TType::STRUCT, 5);
      $xfer += $this->Responsible->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreMaterials !== null) {
      if (!is_object($this->StoreMaterials)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreMaterials', TType::STRUCT, 6);
      $xfer += $this->StoreMaterials->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Routings !== null) {
      if (!is_object($this->Routings)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Routings', TType::STRUCT, 7);
      $xfer += $this->Routings->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProdVolume !== null) {
      $xfer += $output->writeFieldBegin('ProdVolume', TType::STRING, 8);
      $xfer += $output->writeString($this->ProdVolume);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ProdCost !== null) {
      $xfer += $output->writeFieldBegin('ProdCost', TType::STRING, 9);
      $xfer += $output->writeString($this->ProdCost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreFinished !== null) {
      if (!is_object($this->StoreFinished)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreFinished', TType::STRUCT, 10);
      $xfer += $this->StoreFinished->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocNumber !== null) {
      $xfer += $output->writeFieldBegin('DocNumber', TType::STRING, 11);
      $xfer += $output->writeString($this->DocNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DocumentDate !== null) {
      $xfer += $output->writeFieldBegin('DocumentDate', TType::STRING, 12);
      $xfer += $output->writeString($this->DocumentDate);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StateDocuments !== null) {
      if (!is_array($this->StateDocuments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StateDocuments', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRING, count($this->StateDocuments));
        {
          foreach ($this->StateDocuments as $iter1000)
          {
            $xfer += $output->writeString($iter1000);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HeadOffice {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var string
   */
  public $Settlement = null;
  /**
   * @var string
   */
  public $PostAddress = null;
  /**
   * @var string
   */
  public $Phone = null;
  /**
   * @var string
   */
  public $CodeOKPO = null;
  /**
   * @var string
   */
  public $RegistrationCode = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $EmployeeOfficeSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $StoreOfficeSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $SubOfficeSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $CashDeskOfficeSlave = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $AccountOfficeSlave = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        4 => array(
          'var' => 'Settlement',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'PostAddress',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'Phone',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'CodeOKPO',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'RegistrationCode',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'EmployeeOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        10 => array(
          'var' => 'StoreOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        11 => array(
          'var' => 'SubOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        12 => array(
          'var' => 'CashDeskOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        13 => array(
          'var' => 'AccountOfficeSlave',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['Settlement'])) {
        $this->Settlement = $vals['Settlement'];
      }
      if (isset($vals['PostAddress'])) {
        $this->PostAddress = $vals['PostAddress'];
      }
      if (isset($vals['Phone'])) {
        $this->Phone = $vals['Phone'];
      }
      if (isset($vals['CodeOKPO'])) {
        $this->CodeOKPO = $vals['CodeOKPO'];
      }
      if (isset($vals['RegistrationCode'])) {
        $this->RegistrationCode = $vals['RegistrationCode'];
      }
      if (isset($vals['EmployeeOfficeSlave'])) {
        $this->EmployeeOfficeSlave = $vals['EmployeeOfficeSlave'];
      }
      if (isset($vals['StoreOfficeSlave'])) {
        $this->StoreOfficeSlave = $vals['StoreOfficeSlave'];
      }
      if (isset($vals['SubOfficeSlave'])) {
        $this->SubOfficeSlave = $vals['SubOfficeSlave'];
      }
      if (isset($vals['CashDeskOfficeSlave'])) {
        $this->CashDeskOfficeSlave = $vals['CashDeskOfficeSlave'];
      }
      if (isset($vals['AccountOfficeSlave'])) {
        $this->AccountOfficeSlave = $vals['AccountOfficeSlave'];
      }
    }
  }

  public function getName() {
    return 'HeadOffice';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size1001 = 0;
            $_etype1004 = 0;
            $xfer += $input->readListBegin($_etype1004, $_size1001);
            for ($_i1005 = 0; $_i1005 < $_size1001; ++$_i1005)
            {
              $elem1006 = null;
              $elem1006 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem1006->read($input);
              $this->OuterCodes []= $elem1006;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Settlement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->PostAddress);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Phone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->CodeOKPO);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->RegistrationCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->EmployeeOfficeSlave = array();
            $_size1007 = 0;
            $_etype1010 = 0;
            $xfer += $input->readListBegin($_etype1010, $_size1007);
            for ($_i1011 = 0; $_i1011 < $_size1007; ++$_i1011)
            {
              $elem1012 = null;
              $elem1012 = new \Workabox\API\ObjectID();
              $xfer += $elem1012->read($input);
              $this->EmployeeOfficeSlave []= $elem1012;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->StoreOfficeSlave = array();
            $_size1013 = 0;
            $_etype1016 = 0;
            $xfer += $input->readListBegin($_etype1016, $_size1013);
            for ($_i1017 = 0; $_i1017 < $_size1013; ++$_i1017)
            {
              $elem1018 = null;
              $elem1018 = new \Workabox\API\ObjectID();
              $xfer += $elem1018->read($input);
              $this->StoreOfficeSlave []= $elem1018;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->SubOfficeSlave = array();
            $_size1019 = 0;
            $_etype1022 = 0;
            $xfer += $input->readListBegin($_etype1022, $_size1019);
            for ($_i1023 = 0; $_i1023 < $_size1019; ++$_i1023)
            {
              $elem1024 = null;
              $elem1024 = new \Workabox\API\ObjectID();
              $xfer += $elem1024->read($input);
              $this->SubOfficeSlave []= $elem1024;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::LST) {
            $this->CashDeskOfficeSlave = array();
            $_size1025 = 0;
            $_etype1028 = 0;
            $xfer += $input->readListBegin($_etype1028, $_size1025);
            for ($_i1029 = 0; $_i1029 < $_size1025; ++$_i1029)
            {
              $elem1030 = null;
              $elem1030 = new \Workabox\API\ObjectID();
              $xfer += $elem1030->read($input);
              $this->CashDeskOfficeSlave []= $elem1030;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->AccountOfficeSlave = array();
            $_size1031 = 0;
            $_etype1034 = 0;
            $xfer += $input->readListBegin($_etype1034, $_size1031);
            for ($_i1035 = 0; $_i1035 < $_size1031; ++$_i1035)
            {
              $elem1036 = null;
              $elem1036 = new \Workabox\API\ObjectID();
              $xfer += $elem1036->read($input);
              $this->AccountOfficeSlave []= $elem1036;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HeadOffice');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 2);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter1037)
          {
            $xfer += $iter1037->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Settlement !== null) {
      $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 4);
      $xfer += $output->writeString($this->Settlement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->PostAddress !== null) {
      $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 5);
      $xfer += $output->writeString($this->PostAddress);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Phone !== null) {
      $xfer += $output->writeFieldBegin('Phone', TType::STRING, 6);
      $xfer += $output->writeString($this->Phone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CodeOKPO !== null) {
      $xfer += $output->writeFieldBegin('CodeOKPO', TType::STRING, 7);
      $xfer += $output->writeString($this->CodeOKPO);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RegistrationCode !== null) {
      $xfer += $output->writeFieldBegin('RegistrationCode', TType::STRING, 8);
      $xfer += $output->writeString($this->RegistrationCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->EmployeeOfficeSlave !== null) {
      if (!is_array($this->EmployeeOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('EmployeeOfficeSlave', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->EmployeeOfficeSlave));
        {
          foreach ($this->EmployeeOfficeSlave as $iter1038)
          {
            $xfer += $iter1038->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StoreOfficeSlave !== null) {
      if (!is_array($this->StoreOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('StoreOfficeSlave', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->StoreOfficeSlave));
        {
          foreach ($this->StoreOfficeSlave as $iter1039)
          {
            $xfer += $iter1039->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SubOfficeSlave !== null) {
      if (!is_array($this->SubOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('SubOfficeSlave', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->SubOfficeSlave));
        {
          foreach ($this->SubOfficeSlave as $iter1040)
          {
            $xfer += $iter1040->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CashDeskOfficeSlave !== null) {
      if (!is_array($this->CashDeskOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('CashDeskOfficeSlave', TType::LST, 12);
      {
        $output->writeListBegin(TType::STRUCT, count($this->CashDeskOfficeSlave));
        {
          foreach ($this->CashDeskOfficeSlave as $iter1041)
          {
            $xfer += $iter1041->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AccountOfficeSlave !== null) {
      if (!is_array($this->AccountOfficeSlave)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('AccountOfficeSlave', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRUCT, count($this->AccountOfficeSlave));
        {
          foreach ($this->AccountOfficeSlave as $iter1042)
          {
            $xfer += $iter1042->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsGroup {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var int
   */
  public $ParentGroupID = null;
  /**
   * @var \Workabox\API\GoodsProperty[]
   */
  public $Properties = null;
  /**
   * @var string
   */
  public $ImageURL = null;
  /**
   * @var \Workabox\API\OuterCodesLine[]
   */
  public $OuterCodes = null;
  /**
   * @var int[]
   */
  public $UniteModel = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ParentGroupID',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'Properties',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsProperty',
            ),
          ),
        5 => array(
          'var' => 'ImageURL',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'OuterCodes',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OuterCodesLine',
            ),
          ),
        7 => array(
          'var' => 'UniteModel',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['ParentGroupID'])) {
        $this->ParentGroupID = $vals['ParentGroupID'];
      }
      if (isset($vals['Properties'])) {
        $this->Properties = $vals['Properties'];
      }
      if (isset($vals['ImageURL'])) {
        $this->ImageURL = $vals['ImageURL'];
      }
      if (isset($vals['OuterCodes'])) {
        $this->OuterCodes = $vals['OuterCodes'];
      }
      if (isset($vals['UniteModel'])) {
        $this->UniteModel = $vals['UniteModel'];
      }
    }
  }

  public function getName() {
    return 'GoodsGroup';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ParentGroupID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->Properties = array();
            $_size1043 = 0;
            $_etype1046 = 0;
            $xfer += $input->readListBegin($_etype1046, $_size1043);
            for ($_i1047 = 0; $_i1047 < $_size1043; ++$_i1047)
            {
              $elem1048 = null;
              $elem1048 = new \Workabox\API\GoodsProperty();
              $xfer += $elem1048->read($input);
              $this->Properties []= $elem1048;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ImageURL);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->OuterCodes = array();
            $_size1049 = 0;
            $_etype1052 = 0;
            $xfer += $input->readListBegin($_etype1052, $_size1049);
            for ($_i1053 = 0; $_i1053 < $_size1049; ++$_i1053)
            {
              $elem1054 = null;
              $elem1054 = new \Workabox\API\OuterCodesLine();
              $xfer += $elem1054->read($input);
              $this->OuterCodes []= $elem1054;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->UniteModel = array();
            $_size1055 = 0;
            $_etype1058 = 0;
            $xfer += $input->readListBegin($_etype1058, $_size1055);
            for ($_i1059 = 0; $_i1059 < $_size1055; ++$_i1059)
            {
              $elem1060 = null;
              $xfer += $input->readI32($elem1060);
              $this->UniteModel []= $elem1060;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsGroup');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 2);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ParentGroupID !== null) {
      $xfer += $output->writeFieldBegin('ParentGroupID', TType::I32, 3);
      $xfer += $output->writeI32($this->ParentGroupID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Properties !== null) {
      if (!is_array($this->Properties)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Properties', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->Properties));
        {
          foreach ($this->Properties as $iter1061)
          {
            $xfer += $iter1061->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ImageURL !== null) {
      $xfer += $output->writeFieldBegin('ImageURL', TType::STRING, 5);
      $xfer += $output->writeString($this->ImageURL);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->OuterCodes !== null) {
      if (!is_array($this->OuterCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
        {
          foreach ($this->OuterCodes as $iter1062)
          {
            $xfer += $iter1062->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UniteModel !== null) {
      if (!is_array($this->UniteModel)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('UniteModel', TType::LST, 7);
      {
        $output->writeListBegin(TType::I32, count($this->UniteModel));
        {
          foreach ($this->UniteModel as $iter1063)
          {
            $xfer += $output->writeI32($iter1063);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsGroupFilter {
  static $_TSPEC;

  /**
   * @var int
   */
  public $ID = null;
  /**
   * @var string
   */
  public $ObjectName = null;
  /**
   * @var int
   */
  public $ParentGroupID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ObjectName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'ParentGroupID',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ID'])) {
        $this->ID = $vals['ID'];
      }
      if (isset($vals['ObjectName'])) {
        $this->ObjectName = $vals['ObjectName'];
      }
      if (isset($vals['ParentGroupID'])) {
        $this->ParentGroupID = $vals['ParentGroupID'];
      }
    }
  }

  public function getName() {
    return 'GoodsGroupFilter';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ObjectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ParentGroupID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsGroupFilter');
    if ($this->ID !== null) {
      $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
      $xfer += $output->writeI32($this->ID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ObjectName !== null) {
      $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 2);
      $xfer += $output->writeString($this->ObjectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ParentGroupID !== null) {
      $xfer += $output->writeFieldBegin('ParentGroupID', TType::I32, 3);
      $xfer += $output->writeI32($this->ParentGroupID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PriceListRTTLine {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $PriceNotSet = null;
  /**
   * @var double
   */
  public $CurrentPrice = null;
  /**
   * @var double
   */
  public $Price = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;
  /**
   * @var double
   */
  public $Rest = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'PriceNotSet',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'CurrentPrice',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'Price',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        5 => array(
          'var' => 'Rest',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['PriceNotSet'])) {
        $this->PriceNotSet = $vals['PriceNotSet'];
      }
      if (isset($vals['CurrentPrice'])) {
        $this->CurrentPrice = $vals['CurrentPrice'];
      }
      if (isset($vals['Price'])) {
        $this->Price = $vals['Price'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
      if (isset($vals['Rest'])) {
        $this->Rest = $vals['Rest'];
      }
    }
  }

  public function getName() {
    return 'PriceListRTTLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->PriceNotSet);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->CurrentPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Rest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PriceListRTTLine');
    if ($this->PriceNotSet !== null) {
      $xfer += $output->writeFieldBegin('PriceNotSet', TType::BOOL, 1);
      $xfer += $output->writeBool($this->PriceNotSet);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CurrentPrice !== null) {
      $xfer += $output->writeFieldBegin('CurrentPrice', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->CurrentPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Price !== null) {
      $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->Price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 4);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Rest !== null) {
      $xfer += $output->writeFieldBegin('Rest', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->Rest);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class GoodsRestLine {
  static $_TSPEC;

  /**
   * @var double
   */
  public $Rest = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $Goods = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Rest',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'Goods',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Rest'])) {
        $this->Rest = $vals['Rest'];
      }
      if (isset($vals['Goods'])) {
        $this->Goods = $vals['Goods'];
      }
    }
  }

  public function getName() {
    return 'GoodsRestLine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->Rest);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->Goods = new \Workabox\API\ObjectID();
            $xfer += $this->Goods->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GoodsRestLine');
    if ($this->Rest !== null) {
      $xfer += $output->writeFieldBegin('Rest', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->Rest);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Goods !== null) {
      if (!is_object($this->Goods)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 2);
      $xfer += $this->Goods->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CalculateSaleInfo {
  static $_TSPEC;

  /**
   * @var \Workabox\API\RetailSale
   */
  public $Sale = null;
  /**
   * @var string[]
   */
  public $MIBarCodes = null;
  /**
   * @var string[]
   */
  public $Messages = null;
  /**
   * @var bool
   */
  public $SaveSale = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Sale',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\RetailSale',
          ),
        2 => array(
          'var' => 'MIBarCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'Messages',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'SaveSale',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Sale'])) {
        $this->Sale = $vals['Sale'];
      }
      if (isset($vals['MIBarCodes'])) {
        $this->MIBarCodes = $vals['MIBarCodes'];
      }
      if (isset($vals['Messages'])) {
        $this->Messages = $vals['Messages'];
      }
      if (isset($vals['SaveSale'])) {
        $this->SaveSale = $vals['SaveSale'];
      }
    }
  }

  public function getName() {
    return 'CalculateSaleInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->Sale = new \Workabox\API\RetailSale();
            $xfer += $this->Sale->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->MIBarCodes = array();
            $_size1064 = 0;
            $_etype1067 = 0;
            $xfer += $input->readListBegin($_etype1067, $_size1064);
            for ($_i1068 = 0; $_i1068 < $_size1064; ++$_i1068)
            {
              $elem1069 = null;
              $xfer += $input->readString($elem1069);
              $this->MIBarCodes []= $elem1069;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->Messages = array();
            $_size1070 = 0;
            $_etype1073 = 0;
            $xfer += $input->readListBegin($_etype1073, $_size1070);
            for ($_i1074 = 0; $_i1074 < $_size1070; ++$_i1074)
            {
              $elem1075 = null;
              $xfer += $input->readString($elem1075);
              $this->Messages []= $elem1075;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->SaveSale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CalculateSaleInfo');
    if ($this->Sale !== null) {
      if (!is_object($this->Sale)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Sale', TType::STRUCT, 1);
      $xfer += $this->Sale->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MIBarCodes !== null) {
      if (!is_array($this->MIBarCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MIBarCodes', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->MIBarCodes));
        {
          foreach ($this->MIBarCodes as $iter1076)
          {
            $xfer += $output->writeString($iter1076);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Messages !== null) {
      if (!is_array($this->Messages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Messages', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->Messages));
        {
          foreach ($this->Messages as $iter1077)
          {
            $xfer += $output->writeString($iter1077);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SaveSale !== null) {
      $xfer += $output->writeFieldBegin('SaveSale', TType::BOOL, 4);
      $xfer += $output->writeBool($this->SaveSale);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class CalculateOrderInfo {
  static $_TSPEC;

  /**
   * @var \Workabox\API\CustomerOrder
   */
  public $Order = null;
  /**
   * @var string[]
   */
  public $MIBarCodes = null;
  /**
   * @var string[]
   */
  public $Messages = null;
  /**
   * @var bool
   */
  public $SaveOrder = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Order',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CustomerOrder',
          ),
        2 => array(
          'var' => 'MIBarCodes',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'Messages',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        4 => array(
          'var' => 'SaveOrder',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Order'])) {
        $this->Order = $vals['Order'];
      }
      if (isset($vals['MIBarCodes'])) {
        $this->MIBarCodes = $vals['MIBarCodes'];
      }
      if (isset($vals['Messages'])) {
        $this->Messages = $vals['Messages'];
      }
      if (isset($vals['SaveOrder'])) {
        $this->SaveOrder = $vals['SaveOrder'];
      }
    }
  }

  public function getName() {
    return 'CalculateOrderInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->Order = new \Workabox\API\CustomerOrder();
            $xfer += $this->Order->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->MIBarCodes = array();
            $_size1078 = 0;
            $_etype1081 = 0;
            $xfer += $input->readListBegin($_etype1081, $_size1078);
            for ($_i1082 = 0; $_i1082 < $_size1078; ++$_i1082)
            {
              $elem1083 = null;
              $xfer += $input->readString($elem1083);
              $this->MIBarCodes []= $elem1083;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->Messages = array();
            $_size1084 = 0;
            $_etype1087 = 0;
            $xfer += $input->readListBegin($_etype1087, $_size1084);
            for ($_i1088 = 0; $_i1088 < $_size1084; ++$_i1088)
            {
              $elem1089 = null;
              $xfer += $input->readString($elem1089);
              $this->Messages []= $elem1089;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->SaveOrder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CalculateOrderInfo');
    if ($this->Order !== null) {
      if (!is_object($this->Order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Order', TType::STRUCT, 1);
      $xfer += $this->Order->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MIBarCodes !== null) {
      if (!is_array($this->MIBarCodes)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('MIBarCodes', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->MIBarCodes));
        {
          foreach ($this->MIBarCodes as $iter1090)
          {
            $xfer += $output->writeString($iter1090);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Messages !== null) {
      if (!is_array($this->Messages)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('Messages', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->Messages));
        {
          foreach ($this->Messages as $iter1091)
          {
            $xfer += $output->writeString($iter1091);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SaveOrder !== null) {
      $xfer += $output->writeFieldBegin('SaveOrder', TType::BOOL, 4);
      $xfer += $output->writeBool($this->SaveOrder);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class HeadOffice
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'ObjectName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'OuterCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\OuterCodesLine',
                ),
        ),
        4 => array(
            'var' => 'Settlement',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'PostAddress',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'Phone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'CodeOKPO',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'RegistrationCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'EmployeeOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        10 => array(
            'var' => 'StoreOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        11 => array(
            'var' => 'SubOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        12 => array(
            'var' => 'CashDeskOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        13 => array(
            'var' => 'AccountOfficeSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $ObjectName = null;
    /**
     * @var \Workabox\API\OuterCodesLine[]
     */
    public $OuterCodes = null;
    /**
     * @var string
     */
    public $Settlement = null;
    /**
     * @var string
     */
    public $PostAddress = null;
    /**
     * @var string
     */
    public $Phone = null;
    /**
     * @var string
     */
    public $CodeOKPO = null;
    /**
     * @var string
     */
    public $RegistrationCode = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $EmployeeOfficeSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $StoreOfficeSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $SubOfficeSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $CashDeskOfficeSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $AccountOfficeSlave = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['ObjectName'])) {
                $this->ObjectName = $vals['ObjectName'];
            }
            if (isset($vals['OuterCodes'])) {
                $this->OuterCodes = $vals['OuterCodes'];
            }
            if (isset($vals['Settlement'])) {
                $this->Settlement = $vals['Settlement'];
            }
            if (isset($vals['PostAddress'])) {
                $this->PostAddress = $vals['PostAddress'];
            }
            if (isset($vals['Phone'])) {
                $this->Phone = $vals['Phone'];
            }
            if (isset($vals['CodeOKPO'])) {
                $this->CodeOKPO = $vals['CodeOKPO'];
            }
            if (isset($vals['RegistrationCode'])) {
                $this->RegistrationCode = $vals['RegistrationCode'];
            }
            if (isset($vals['EmployeeOfficeSlave'])) {
                $this->EmployeeOfficeSlave = $vals['EmployeeOfficeSlave'];
            }
            if (isset($vals['StoreOfficeSlave'])) {
                $this->StoreOfficeSlave = $vals['StoreOfficeSlave'];
            }
            if (isset($vals['SubOfficeSlave'])) {
                $this->SubOfficeSlave = $vals['SubOfficeSlave'];
            }
            if (isset($vals['CashDeskOfficeSlave'])) {
                $this->CashDeskOfficeSlave = $vals['CashDeskOfficeSlave'];
            }
            if (isset($vals['AccountOfficeSlave'])) {
                $this->AccountOfficeSlave = $vals['AccountOfficeSlave'];
            }
        }
    }

    public function getName()
    {
        return 'HeadOffice';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ObjectName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->OuterCodes = array();
                        $_size973 = 0;
                        $_etype976 = 0;
                        $xfer += $input->readListBegin($_etype976, $_size973);
                        for ($_i977 = 0; $_i977 < $_size973; ++$_i977) {
                            $elem978 = null;
                            $elem978 = new \Workabox\API\OuterCodesLine();
                            $xfer += $elem978->read($input);
                            $this->OuterCodes []= $elem978;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Settlement);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->PostAddress);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Phone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->CodeOKPO);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->RegistrationCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::LST) {
                        $this->EmployeeOfficeSlave = array();
                        $_size979 = 0;
                        $_etype982 = 0;
                        $xfer += $input->readListBegin($_etype982, $_size979);
                        for ($_i983 = 0; $_i983 < $_size979; ++$_i983) {
                            $elem984 = null;
                            $elem984 = new \Workabox\API\ObjectID();
                            $xfer += $elem984->read($input);
                            $this->EmployeeOfficeSlave []= $elem984;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::LST) {
                        $this->StoreOfficeSlave = array();
                        $_size985 = 0;
                        $_etype988 = 0;
                        $xfer += $input->readListBegin($_etype988, $_size985);
                        for ($_i989 = 0; $_i989 < $_size985; ++$_i989) {
                            $elem990 = null;
                            $elem990 = new \Workabox\API\ObjectID();
                            $xfer += $elem990->read($input);
                            $this->StoreOfficeSlave []= $elem990;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::LST) {
                        $this->SubOfficeSlave = array();
                        $_size991 = 0;
                        $_etype994 = 0;
                        $xfer += $input->readListBegin($_etype994, $_size991);
                        for ($_i995 = 0; $_i995 < $_size991; ++$_i995) {
                            $elem996 = null;
                            $elem996 = new \Workabox\API\ObjectID();
                            $xfer += $elem996->read($input);
                            $this->SubOfficeSlave []= $elem996;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::LST) {
                        $this->CashDeskOfficeSlave = array();
                        $_size997 = 0;
                        $_etype1000 = 0;
                        $xfer += $input->readListBegin($_etype1000, $_size997);
                        for ($_i1001 = 0; $_i1001 < $_size997; ++$_i1001) {
                            $elem1002 = null;
                            $elem1002 = new \Workabox\API\ObjectID();
                            $xfer += $elem1002->read($input);
                            $this->CashDeskOfficeSlave []= $elem1002;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::LST) {
                        $this->AccountOfficeSlave = array();
                        $_size1003 = 0;
                        $_etype1006 = 0;
                        $xfer += $input->readListBegin($_etype1006, $_size1003);
                        for ($_i1007 = 0; $_i1007 < $_size1003; ++$_i1007) {
                            $elem1008 = null;
                            $elem1008 = new \Workabox\API\ObjectID();
                            $xfer += $elem1008->read($input);
                            $this->AccountOfficeSlave []= $elem1008;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('HeadOffice');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectName !== null) {
            $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 2);
            $xfer += $output->writeString($this->ObjectName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterCodes !== null) {
            if (!is_array($this->OuterCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
            foreach ($this->OuterCodes as $iter1009) {
                $xfer += $iter1009->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Settlement !== null) {
            $xfer += $output->writeFieldBegin('Settlement', TType::STRING, 4);
            $xfer += $output->writeString($this->Settlement);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PostAddress !== null) {
            $xfer += $output->writeFieldBegin('PostAddress', TType::STRING, 5);
            $xfer += $output->writeString($this->PostAddress);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Phone !== null) {
            $xfer += $output->writeFieldBegin('Phone', TType::STRING, 6);
            $xfer += $output->writeString($this->Phone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CodeOKPO !== null) {
            $xfer += $output->writeFieldBegin('CodeOKPO', TType::STRING, 7);
            $xfer += $output->writeString($this->CodeOKPO);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->RegistrationCode !== null) {
            $xfer += $output->writeFieldBegin('RegistrationCode', TType::STRING, 8);
            $xfer += $output->writeString($this->RegistrationCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->EmployeeOfficeSlave !== null) {
            if (!is_array($this->EmployeeOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('EmployeeOfficeSlave', TType::LST, 9);
            $output->writeListBegin(TType::STRUCT, count($this->EmployeeOfficeSlave));
            foreach ($this->EmployeeOfficeSlave as $iter1010) {
                $xfer += $iter1010->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StoreOfficeSlave !== null) {
            if (!is_array($this->StoreOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('StoreOfficeSlave', TType::LST, 10);
            $output->writeListBegin(TType::STRUCT, count($this->StoreOfficeSlave));
            foreach ($this->StoreOfficeSlave as $iter1011) {
                $xfer += $iter1011->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SubOfficeSlave !== null) {
            if (!is_array($this->SubOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('SubOfficeSlave', TType::LST, 11);
            $output->writeListBegin(TType::STRUCT, count($this->SubOfficeSlave));
            foreach ($this->SubOfficeSlave as $iter1012) {
                $xfer += $iter1012->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CashDeskOfficeSlave !== null) {
            if (!is_array($this->CashDeskOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('CashDeskOfficeSlave', TType::LST, 12);
            $output->writeListBegin(TType::STRUCT, count($this->CashDeskOfficeSlave));
            foreach ($this->CashDeskOfficeSlave as $iter1013) {
                $xfer += $iter1013->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->AccountOfficeSlave !== null) {
            if (!is_array($this->AccountOfficeSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('AccountOfficeSlave', TType::LST, 13);
            $output->writeListBegin(TType::STRUCT, count($this->AccountOfficeSlave));
            foreach ($this->AccountOfficeSlave as $iter1014) {
                $xfer += $iter1014->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

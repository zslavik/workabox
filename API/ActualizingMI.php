<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ActualizingMI
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'OuterID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'BarCode',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'MIType',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        5 => array(
            'var' => 'HistoryPartnerMI',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\HistoryPartnerMILine',
                ),
        ),
        6 => array(
            'var' => 'Goods',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        7 => array(
            'var' => 'ActualizationDate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'ActionDateExpiration',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'MIInfo',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'IssueDate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'OuterCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\OuterCodesLine',
                ),
        ),
        12 => array(
            'var' => 'StateMI',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'MIPartnersMaster',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $OuterID = null;
    /**
     * @var string
     */
    public $BarCode = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $MIType = null;
    /**
     * @var \Workabox\API\HistoryPartnerMILine[]
     */
    public $HistoryPartnerMI = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $Goods = null;
    /**
     * @var string
     */
    public $ActualizationDate = null;
    /**
     * @var string
     */
    public $ActionDateExpiration = null;
    /**
     * @var string
     */
    public $MIInfo = null;
    /**
     * @var string
     */
    public $IssueDate = null;
    /**
     * @var \Workabox\API\OuterCodesLine[]
     */
    public $OuterCodes = null;
    /**
     * @var string
     */
    public $StateMI = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $MIPartnersMaster = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['OuterID'])) {
                $this->OuterID = $vals['OuterID'];
            }
            if (isset($vals['BarCode'])) {
                $this->BarCode = $vals['BarCode'];
            }
            if (isset($vals['MIType'])) {
                $this->MIType = $vals['MIType'];
            }
            if (isset($vals['HistoryPartnerMI'])) {
                $this->HistoryPartnerMI = $vals['HistoryPartnerMI'];
            }
            if (isset($vals['Goods'])) {
                $this->Goods = $vals['Goods'];
            }
            if (isset($vals['ActualizationDate'])) {
                $this->ActualizationDate = $vals['ActualizationDate'];
            }
            if (isset($vals['ActionDateExpiration'])) {
                $this->ActionDateExpiration = $vals['ActionDateExpiration'];
            }
            if (isset($vals['MIInfo'])) {
                $this->MIInfo = $vals['MIInfo'];
            }
            if (isset($vals['IssueDate'])) {
                $this->IssueDate = $vals['IssueDate'];
            }
            if (isset($vals['OuterCodes'])) {
                $this->OuterCodes = $vals['OuterCodes'];
            }
            if (isset($vals['StateMI'])) {
                $this->StateMI = $vals['StateMI'];
            }
            if (isset($vals['MIPartnersMaster'])) {
                $this->MIPartnersMaster = $vals['MIPartnersMaster'];
            }
        }
    }

    public function getName()
    {
        return 'ActualizingMI';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->OuterID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->BarCode);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->MIType = new \Workabox\API\ObjectID();
                        $xfer += $this->MIType->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->HistoryPartnerMI = array();
                        $_size525 = 0;
                        $_etype528 = 0;
                        $xfer += $input->readListBegin($_etype528, $_size525);
                        for ($_i529 = 0; $_i529 < $_size525; ++$_i529) {
                            $elem530 = null;
                            $elem530 = new \Workabox\API\HistoryPartnerMILine();
                            $xfer += $elem530->read($input);
                            $this->HistoryPartnerMI []= $elem530;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->Goods = new \Workabox\API\ObjectID();
                        $xfer += $this->Goods->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ActualizationDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ActionDateExpiration);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->MIInfo);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->IssueDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::LST) {
                        $this->OuterCodes = array();
                        $_size531 = 0;
                        $_etype534 = 0;
                        $xfer += $input->readListBegin($_etype534, $_size531);
                        for ($_i535 = 0; $_i535 < $_size531; ++$_i535) {
                            $elem536 = null;
                            $elem536 = new \Workabox\API\OuterCodesLine();
                            $xfer += $elem536->read($input);
                            $this->OuterCodes []= $elem536;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->StateMI);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRUCT) {
                        $this->MIPartnersMaster = new \Workabox\API\ObjectID();
                        $xfer += $this->MIPartnersMaster->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ActualizingMI');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterID !== null) {
            $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
            $xfer += $output->writeString($this->OuterID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->BarCode !== null) {
            $xfer += $output->writeFieldBegin('BarCode', TType::STRING, 3);
            $xfer += $output->writeString($this->BarCode);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MIType !== null) {
            if (!is_object($this->MIType)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('MIType', TType::STRUCT, 4);
            $xfer += $this->MIType->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->HistoryPartnerMI !== null) {
            if (!is_array($this->HistoryPartnerMI)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('HistoryPartnerMI', TType::LST, 5);
            $output->writeListBegin(TType::STRUCT, count($this->HistoryPartnerMI));
            foreach ($this->HistoryPartnerMI as $iter537) {
                $xfer += $iter537->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Goods !== null) {
            if (!is_object($this->Goods)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 6);
            $xfer += $this->Goods->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ActualizationDate !== null) {
            $xfer += $output->writeFieldBegin('ActualizationDate', TType::STRING, 7);
            $xfer += $output->writeString($this->ActualizationDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ActionDateExpiration !== null) {
            $xfer += $output->writeFieldBegin('ActionDateExpiration', TType::STRING, 8);
            $xfer += $output->writeString($this->ActionDateExpiration);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MIInfo !== null) {
            $xfer += $output->writeFieldBegin('MIInfo', TType::STRING, 9);
            $xfer += $output->writeString($this->MIInfo);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->IssueDate !== null) {
            $xfer += $output->writeFieldBegin('IssueDate', TType::STRING, 10);
            $xfer += $output->writeString($this->IssueDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterCodes !== null) {
            if (!is_array($this->OuterCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 11);
            $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
            foreach ($this->OuterCodes as $iter538) {
                $xfer += $iter538->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StateMI !== null) {
            $xfer += $output->writeFieldBegin('StateMI', TType::STRING, 12);
            $xfer += $output->writeString($this->StateMI);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MIPartnersMaster !== null) {
            if (!is_object($this->MIPartnersMaster)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('MIPartnersMaster', TType::STRUCT, 13);
            $xfer += $this->MIPartnersMaster->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

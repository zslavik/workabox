<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class ServiceFilter
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'OuterID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'Duration',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'ObjectName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        5 => array(
            'var' => 'Fraction',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        6 => array(
            'var' => 'GoodsGroup',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        7 => array(
            'var' => 'ModelName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'PLU',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'GoodsFullName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'ObjectOwner',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        11 => array(
            'var' => 'TaxRate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'QRLink',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'Modificators',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'UrlPreview',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'StateGoods',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $OuterID = null;
    /**
     * @var string
     */
    public $Duration = null;
    /**
     * @var string
     */
    public $ObjectName = null;
    /**
     * @var string[]
     */
    public $Fraction = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $GoodsGroup = null;
    /**
     * @var string
     */
    public $ModelName = null;
    /**
     * @var string
     */
    public $PLU = null;
    /**
     * @var string
     */
    public $GoodsFullName = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $ObjectOwner = null;
    /**
     * @var string
     */
    public $TaxRate = null;
    /**
     * @var string
     */
    public $QRLink = null;
    /**
     * @var string
     */
    public $Modificators = null;
    /**
     * @var string
     */
    public $UrlPreview = null;
    /**
     * @var string[]
     */
    public $StateGoods = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['OuterID'])) {
                $this->OuterID = $vals['OuterID'];
            }
            if (isset($vals['Duration'])) {
                $this->Duration = $vals['Duration'];
            }
            if (isset($vals['ObjectName'])) {
                $this->ObjectName = $vals['ObjectName'];
            }
            if (isset($vals['Fraction'])) {
                $this->Fraction = $vals['Fraction'];
            }
            if (isset($vals['GoodsGroup'])) {
                $this->GoodsGroup = $vals['GoodsGroup'];
            }
            if (isset($vals['ModelName'])) {
                $this->ModelName = $vals['ModelName'];
            }
            if (isset($vals['PLU'])) {
                $this->PLU = $vals['PLU'];
            }
            if (isset($vals['GoodsFullName'])) {
                $this->GoodsFullName = $vals['GoodsFullName'];
            }
            if (isset($vals['ObjectOwner'])) {
                $this->ObjectOwner = $vals['ObjectOwner'];
            }
            if (isset($vals['TaxRate'])) {
                $this->TaxRate = $vals['TaxRate'];
            }
            if (isset($vals['QRLink'])) {
                $this->QRLink = $vals['QRLink'];
            }
            if (isset($vals['Modificators'])) {
                $this->Modificators = $vals['Modificators'];
            }
            if (isset($vals['UrlPreview'])) {
                $this->UrlPreview = $vals['UrlPreview'];
            }
            if (isset($vals['StateGoods'])) {
                $this->StateGoods = $vals['StateGoods'];
            }
        }
    }

    public function getName()
    {
        return 'ServiceFilter';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->OuterID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Duration);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ObjectName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->Fraction = array();
                        $_size245 = 0;
                        $_etype248 = 0;
                        $xfer += $input->readListBegin($_etype248, $_size245);
                        for ($_i249 = 0; $_i249 < $_size245; ++$_i249) {
                            $elem250 = null;
                            $xfer += $input->readString($elem250);
                            $this->Fraction []= $elem250;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->GoodsGroup = new \Workabox\API\ObjectID();
                        $xfer += $this->GoodsGroup->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ModelName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->PLU);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->GoodsFullName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRUCT) {
                        $this->ObjectOwner = new \Workabox\API\ObjectID();
                        $xfer += $this->ObjectOwner->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->TaxRate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->QRLink);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Modificators);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->UrlPreview);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::LST) {
                        $this->StateGoods = array();
                        $_size251 = 0;
                        $_etype254 = 0;
                        $xfer += $input->readListBegin($_etype254, $_size251);
                        for ($_i255 = 0; $_i255 < $_size251; ++$_i255) {
                            $elem256 = null;
                            $xfer += $input->readString($elem256);
                            $this->StateGoods []= $elem256;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('ServiceFilter');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterID !== null) {
            $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
            $xfer += $output->writeString($this->OuterID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Duration !== null) {
            $xfer += $output->writeFieldBegin('Duration', TType::STRING, 3);
            $xfer += $output->writeString($this->Duration);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectName !== null) {
            $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 4);
            $xfer += $output->writeString($this->ObjectName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Fraction !== null) {
            if (!is_array($this->Fraction)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Fraction', TType::LST, 5);
            $output->writeListBegin(TType::STRING, count($this->Fraction));
            foreach ($this->Fraction as $iter257) {
                $xfer += $output->writeString($iter257);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsGroup !== null) {
            if (!is_object($this->GoodsGroup)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('GoodsGroup', TType::STRUCT, 6);
            $xfer += $this->GoodsGroup->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ModelName !== null) {
            $xfer += $output->writeFieldBegin('ModelName', TType::STRING, 7);
            $xfer += $output->writeString($this->ModelName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PLU !== null) {
            $xfer += $output->writeFieldBegin('PLU', TType::STRING, 8);
            $xfer += $output->writeString($this->PLU);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsFullName !== null) {
            $xfer += $output->writeFieldBegin('GoodsFullName', TType::STRING, 9);
            $xfer += $output->writeString($this->GoodsFullName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectOwner !== null) {
            if (!is_object($this->ObjectOwner)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 10);
            $xfer += $this->ObjectOwner->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->TaxRate !== null) {
            $xfer += $output->writeFieldBegin('TaxRate', TType::STRING, 11);
            $xfer += $output->writeString($this->TaxRate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->QRLink !== null) {
            $xfer += $output->writeFieldBegin('QRLink', TType::STRING, 12);
            $xfer += $output->writeString($this->QRLink);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Modificators !== null) {
            $xfer += $output->writeFieldBegin('Modificators', TType::STRING, 13);
            $xfer += $output->writeString($this->Modificators);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UrlPreview !== null) {
            $xfer += $output->writeFieldBegin('UrlPreview', TType::STRING, 14);
            $xfer += $output->writeString($this->UrlPreview);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StateGoods !== null) {
            if (!is_array($this->StateGoods)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('StateGoods', TType::LST, 15);
            $output->writeListBegin(TType::STRING, count($this->StateGoods));
            foreach ($this->StateGoods as $iter258) {
                $xfer += $output->writeString($iter258);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

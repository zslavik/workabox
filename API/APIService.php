<?php
namespace Workabox\API;
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface APIServiceIf {
  /**
   * @param string $login
   * @param string $password
   * @return string
   * @throws \Workabox\API\APIException
   */
  public function Login($login, $password);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\GoodsGroupFilter $filter
   * @return \Workabox\API\GoodsGroup[]
   * @throws \Workabox\API\APIException
   */
  public function ExportGoodsGroup($apiKey, $date, \Workabox\API\GoodsGroupFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\HeadOffice $importdata
   * @throws \Workabox\API\APIException
   */
  public function ImportHeadOffice($apiKey, \Workabox\API\HeadOffice $importdata);
  /**
   * @param string $apiKey
   * @return \Workabox\API\HeadOffice
   * @throws \Workabox\API\APIException
   */
  public function ExportHeadOffice($apiKey);
  /**
   * @param string $apiKey
   * @param \Workabox\API\ObjectID $rttID
   * @return \Workabox\API\ObjectID[]
   * @throws \Workabox\API\APIException
   */
  public function ExportChosenGoods($apiKey, \Workabox\API\ObjectID $rttID);
  /**
   * @param string $apiKey
   * @param \Workabox\API\ObjectID $rttID
   * @return \Workabox\API\PricesListLine[]
   * @throws \Workabox\API\APIException
   */
  public function ExportChosenGoodsPrice($apiKey, \Workabox\API\ObjectID $rttID);
  /**
   * @param string $apiKey
   * @param \Workabox\API\ObjectID $rttID
   * @param \Workabox\API\ObjectID[] $goodsIDs
   * @throws \Workabox\API\APIException
   */
  public function ImportChosenGoods($apiKey, \Workabox\API\ObjectID $rttID, array $goodsIDs);
  /**
   * @param string $apiKey
   * @param \Workabox\API\ObjectID $rttID
   * @return \Workabox\API\PriceListRTTLine[]
   * @throws \Workabox\API\APIException
   */
  public function ExportPriceListRTT($apiKey, \Workabox\API\ObjectID $rttID);
  /**
   * @param string $apiKey
   * @param \Workabox\API\ObjectID $storeID
   * @return \Workabox\API\GoodsRestLine[]
   * @throws \Workabox\API\APIException
   */
  public function ExportGoodsQuantity($apiKey, \Workabox\API\ObjectID $storeID);
  /**
   * @param string $apiKey
   * @param \Workabox\API\CalculateSaleInfo $sale
   * @return \Workabox\API\CalculateSaleInfo
   * @throws \Workabox\API\APIException
   */
  public function CalculateSale($apiKey, \Workabox\API\CalculateSaleInfo $sale);
  /**
   * @param string $apiKey
   * @param \Workabox\API\CalculateOrderInfo $order
   * @return \Workabox\API\CalculateOrderInfo
   * @throws \Workabox\API\APIException
   */
  public function CalculateOrder($apiKey, \Workabox\API\CalculateOrderInfo $order);
  /**
   * @param string $apiKey
   * @param int $saleID
   * @throws \Workabox\API\APIException
   */
  public function CompleteSale($apiKey, $saleID);
  /**
   * @param string $apiKey
   * @param \Workabox\API\UserCatalog $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportUserCatalog($apiKey, \Workabox\API\UserCatalog $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\UserCatalogFilter $filter
   * @return \Workabox\API\UserCatalog[]
   * @throws \Workabox\API\APIException
   */
  public function ExportUserCatalog($apiKey, $date, \Workabox\API\UserCatalogFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\Goods $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportGoods($apiKey, \Workabox\API\Goods $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\GoodsFilter $filter
   * @return \Workabox\API\Goods[]
   * @throws \Workabox\API\APIException
   */
  public function ExportGoods($apiKey, $date, \Workabox\API\GoodsFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\Service $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportService($apiKey, \Workabox\API\Service $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\ServiceFilter $filter
   * @return \Workabox\API\Service[]
   * @throws \Workabox\API\APIException
   */
  public function ExportService($apiKey, $date, \Workabox\API\ServiceFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\MoneyFacilitiesType $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportMoneyFacilitiesType($apiKey, \Workabox\API\MoneyFacilitiesType $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\MoneyFacilitiesTypeFilter $filter
   * @return \Workabox\API\MoneyFacilitiesType[]
   * @throws \Workabox\API\APIException
   */
  public function ExportMoneyFacilitiesType($apiKey, $date, \Workabox\API\MoneyFacilitiesTypeFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\PriceList $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportPriceList($apiKey, \Workabox\API\PriceList $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\PriceListFilter $filter
   * @return \Workabox\API\PriceList[]
   * @throws \Workabox\API\APIException
   */
  public function ExportPriceList($apiKey, $date, \Workabox\API\PriceListFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\Supplier $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportSupplier($apiKey, \Workabox\API\Supplier $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\SupplierFilter $filter
   * @return \Workabox\API\Supplier[]
   * @throws \Workabox\API\APIException
   */
  public function ExportSupplier($apiKey, $date, \Workabox\API\SupplierFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\Office $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportOffice($apiKey, \Workabox\API\Office $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\OfficeFilter $filter
   * @return \Workabox\API\Office[]
   * @throws \Workabox\API\APIException
   */
  public function ExportOffice($apiKey, $date, \Workabox\API\OfficeFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\Stock $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportStock($apiKey, \Workabox\API\Stock $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\StockFilter $filter
   * @return \Workabox\API\Stock[]
   * @throws \Workabox\API\APIException
   */
  public function ExportStock($apiKey, $date, \Workabox\API\StockFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\RTT $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportRTT($apiKey, \Workabox\API\RTT $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\RTTFilter $filter
   * @return \Workabox\API\RTT[]
   * @throws \Workabox\API\APIException
   */
  public function ExportRTT($apiKey, $date, \Workabox\API\RTTFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\CashDeskRTT $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportCashDeskRTT($apiKey, \Workabox\API\CashDeskRTT $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\CashDeskRTTFilter $filter
   * @return \Workabox\API\CashDeskRTT[]
   * @throws \Workabox\API\APIException
   */
  public function ExportCashDeskRTT($apiKey, $date, \Workabox\API\CashDeskRTTFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\Employee $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportEmployee($apiKey, \Workabox\API\Employee $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\EmployeeFilter $filter
   * @return \Workabox\API\Employee[]
   * @throws \Workabox\API\APIException
   */
  public function ExportEmployee($apiKey, $date, \Workabox\API\EmployeeFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\Bank $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportBank($apiKey, \Workabox\API\Bank $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\BankFilter $filter
   * @return \Workabox\API\Bank[]
   * @throws \Workabox\API\APIException
   */
  public function ExportBank($apiKey, $date, \Workabox\API\BankFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\Account $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportAccount($apiKey, \Workabox\API\Account $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\AccountFilter $filter
   * @return \Workabox\API\Account[]
   * @throws \Workabox\API\APIException
   */
  public function ExportAccount($apiKey, $date, \Workabox\API\AccountFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\CashDesk $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportCashDesk($apiKey, \Workabox\API\CashDesk $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\CashDeskFilter $filter
   * @return \Workabox\API\CashDesk[]
   * @throws \Workabox\API\APIException
   */
  public function ExportCashDesk($apiKey, $date, \Workabox\API\CashDeskFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\MarketingInstrumentType $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportMarketingInstrumentType($apiKey, \Workabox\API\MarketingInstrumentType $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\MarketingInstrumentTypeFilter $filter
   * @return \Workabox\API\MarketingInstrumentType[]
   * @throws \Workabox\API\APIException
   */
  public function ExportMarketingInstrumentType($apiKey, $date, \Workabox\API\MarketingInstrumentTypeFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\ActualizingMI $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportActualizingMI($apiKey, \Workabox\API\ActualizingMI $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\ActualizingMIFilter $filter
   * @return \Workabox\API\ActualizingMI[]
   * @throws \Workabox\API\APIException
   */
  public function ExportActualizingMI($apiKey, $date, \Workabox\API\ActualizingMIFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\CustomerNaturalPerson $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportCustomerNaturalPerson($apiKey, \Workabox\API\CustomerNaturalPerson $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\CustomerNaturalPersonFilter $filter
   * @return \Workabox\API\CustomerNaturalPerson[]
   * @throws \Workabox\API\APIException
   */
  public function ExportCustomerNaturalPerson($apiKey, $date, \Workabox\API\CustomerNaturalPersonFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\GoodsIncome $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportGoodsIncome($apiKey, \Workabox\API\GoodsIncome $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\GoodsIncomeFilter $filter
   * @return \Workabox\API\GoodsIncome[]
   * @throws \Workabox\API\APIException
   */
  public function ExportGoodsIncome($apiKey, $date, \Workabox\API\GoodsIncomeFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\GoodsMove $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportGoodsMove($apiKey, \Workabox\API\GoodsMove $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\GoodsMoveFilter $filter
   * @return \Workabox\API\GoodsMove[]
   * @throws \Workabox\API\APIException
   */
  public function ExportGoodsMove($apiKey, $date, \Workabox\API\GoodsMoveFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\GoodsReturn $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportGoodsReturn($apiKey, \Workabox\API\GoodsReturn $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\GoodsReturnFilter $filter
   * @return \Workabox\API\GoodsReturn[]
   * @throws \Workabox\API\APIException
   */
  public function ExportGoodsReturn($apiKey, $date, \Workabox\API\GoodsReturnFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\GoodsDebit $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportGoodsDebit($apiKey, \Workabox\API\GoodsDebit $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\GoodsDebitFilter $filter
   * @return \Workabox\API\GoodsDebit[]
   * @throws \Workabox\API\APIException
   */
  public function ExportGoodsDebit($apiKey, $date, \Workabox\API\GoodsDebitFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\RetailSale $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportRetailSale($apiKey, \Workabox\API\RetailSale $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\RetailSaleFilter $filter
   * @return \Workabox\API\RetailSale[]
   * @throws \Workabox\API\APIException
   */
  public function ExportRetailSale($apiKey, $date, \Workabox\API\RetailSaleFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\CustomerOrder $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportCustomerOrder($apiKey, \Workabox\API\CustomerOrder $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\CustomerOrderFilter $filter
   * @return \Workabox\API\CustomerOrder[]
   * @throws \Workabox\API\APIException
   */
  public function ExportCustomerOrder($apiKey, $date, \Workabox\API\CustomerOrderFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\CustomerReturn $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportCustomerReturn($apiKey, \Workabox\API\CustomerReturn $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\CustomerReturnFilter $filter
   * @return \Workabox\API\CustomerReturn[]
   * @throws \Workabox\API\APIException
   */
  public function ExportCustomerReturn($apiKey, $date, \Workabox\API\CustomerReturnFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\OrderDocOut $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportOrderDocOut($apiKey, \Workabox\API\OrderDocOut $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\OrderDocOutFilter $filter
   * @return \Workabox\API\OrderDocOut[]
   * @throws \Workabox\API\APIException
   */
  public function ExportOrderDocOut($apiKey, $date, \Workabox\API\OrderDocOutFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\OrderDocInner $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportOrderDocInner($apiKey, \Workabox\API\OrderDocInner $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\OrderDocInnerFilter $filter
   * @return \Workabox\API\OrderDocInner[]
   * @throws \Workabox\API\APIException
   */
  public function ExportOrderDocInner($apiKey, $date, \Workabox\API\OrderDocInnerFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\Inventory $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportInventory($apiKey, \Workabox\API\Inventory $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\InventoryFilter $filter
   * @return \Workabox\API\Inventory[]
   * @throws \Workabox\API\APIException
   */
  public function ExportInventory($apiKey, $date, \Workabox\API\InventoryFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\MoneyMovementIn $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportMoneyMovementIn($apiKey, \Workabox\API\MoneyMovementIn $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\MoneyMovementInFilter $filter
   * @return \Workabox\API\MoneyMovementIn[]
   * @throws \Workabox\API\APIException
   */
  public function ExportMoneyMovementIn($apiKey, $date, \Workabox\API\MoneyMovementInFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\MoneyMovementOut $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportMoneyMovementOut($apiKey, \Workabox\API\MoneyMovementOut $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\MoneyMovementOutFilter $filter
   * @return \Workabox\API\MoneyMovementOut[]
   * @throws \Workabox\API\APIException
   */
  public function ExportMoneyMovementOut($apiKey, $date, \Workabox\API\MoneyMovementOutFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\MoneyMovementInner $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportMoneyMovementInner($apiKey, \Workabox\API\MoneyMovementInner $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\MoneyMovementInnerFilter $filter
   * @return \Workabox\API\MoneyMovementInner[]
   * @throws \Workabox\API\APIException
   */
  public function ExportMoneyMovementInner($apiKey, $date, \Workabox\API\MoneyMovementInnerFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\Routings $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportRoutings($apiKey, \Workabox\API\Routings $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\RoutingsFilter $filter
   * @return \Workabox\API\Routings[]
   * @throws \Workabox\API\APIException
   */
  public function ExportRoutings($apiKey, $date, \Workabox\API\RoutingsFilter $filter);
  /**
   * @param string $apiKey
   * @param \Workabox\API\ProductionOperations $importdata
   * @return int
   * @throws \Workabox\API\APIException
   */
  public function ImportProductionOperations($apiKey, \Workabox\API\ProductionOperations $importdata);
  /**
   * @param string $apiKey
   * @param string $date
   * @param \Workabox\API\ProductionOperationsFilter $filter
   * @return \Workabox\API\ProductionOperations[]
   * @throws \Workabox\API\APIException
   */
  public function ExportProductionOperations($apiKey, $date, \Workabox\API\ProductionOperationsFilter $filter);
}

class APIServiceClient implements \Workabox\API\APIServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function Login($login, $password)
  {
    $this->send_Login($login, $password);
    return $this->recv_Login();
  }

  public function send_Login($login, $password)
  {
    $args = new \Workabox\API\APIService_Login_args();
    $args->login = $login;
    $args->password = $password;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'Login', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('Login', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_Login()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_Login_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_Login_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("Login failed: unknown result");
  }

  public function ExportGoodsGroup($apiKey, $date, \Workabox\API\GoodsGroupFilter $filter)
  {
    $this->send_ExportGoodsGroup($apiKey, $date, $filter);
    return $this->recv_ExportGoodsGroup();
  }

  public function send_ExportGoodsGroup($apiKey, $date, \Workabox\API\GoodsGroupFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportGoodsGroup_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportGoodsGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportGoodsGroup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportGoodsGroup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportGoodsGroup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportGoodsGroup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportGoodsGroup failed: unknown result");
  }

  public function ImportHeadOffice($apiKey, \Workabox\API\HeadOffice $importdata)
  {
    $this->send_ImportHeadOffice($apiKey, $importdata);
    $this->recv_ImportHeadOffice();
  }

  public function send_ImportHeadOffice($apiKey, \Workabox\API\HeadOffice $importdata)
  {
    $args = new \Workabox\API\APIService_ImportHeadOffice_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportHeadOffice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportHeadOffice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportHeadOffice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportHeadOffice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportHeadOffice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    return;
  }

  public function ExportHeadOffice($apiKey)
  {
    $this->send_ExportHeadOffice($apiKey);
    return $this->recv_ExportHeadOffice();
  }

  public function send_ExportHeadOffice($apiKey)
  {
    $args = new \Workabox\API\APIService_ExportHeadOffice_args();
    $args->apiKey = $apiKey;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportHeadOffice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportHeadOffice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportHeadOffice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportHeadOffice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportHeadOffice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportHeadOffice failed: unknown result");
  }

  public function ExportChosenGoods($apiKey, \Workabox\API\ObjectID $rttID)
  {
    $this->send_ExportChosenGoods($apiKey, $rttID);
    return $this->recv_ExportChosenGoods();
  }

  public function send_ExportChosenGoods($apiKey, \Workabox\API\ObjectID $rttID)
  {
    $args = new \Workabox\API\APIService_ExportChosenGoods_args();
    $args->apiKey = $apiKey;
    $args->rttID = $rttID;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportChosenGoods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportChosenGoods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportChosenGoods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportChosenGoods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportChosenGoods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportChosenGoods failed: unknown result");
  }

  public function ExportChosenGoodsPrice($apiKey, \Workabox\API\ObjectID $rttID)
  {
    $this->send_ExportChosenGoodsPrice($apiKey, $rttID);
    return $this->recv_ExportChosenGoodsPrice();
  }

  public function send_ExportChosenGoodsPrice($apiKey, \Workabox\API\ObjectID $rttID)
  {
    $args = new \Workabox\API\APIService_ExportChosenGoodsPrice_args();
    $args->apiKey = $apiKey;
    $args->rttID = $rttID;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportChosenGoodsPrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportChosenGoodsPrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportChosenGoodsPrice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportChosenGoodsPrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportChosenGoodsPrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportChosenGoodsPrice failed: unknown result");
  }

  public function ImportChosenGoods($apiKey, \Workabox\API\ObjectID $rttID, array $goodsIDs)
  {
    $this->send_ImportChosenGoods($apiKey, $rttID, $goodsIDs);
    $this->recv_ImportChosenGoods();
  }

  public function send_ImportChosenGoods($apiKey, \Workabox\API\ObjectID $rttID, array $goodsIDs)
  {
    $args = new \Workabox\API\APIService_ImportChosenGoods_args();
    $args->apiKey = $apiKey;
    $args->rttID = $rttID;
    $args->goodsIDs = $goodsIDs;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportChosenGoods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportChosenGoods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportChosenGoods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportChosenGoods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportChosenGoods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    return;
  }

  public function ExportPriceListRTT($apiKey, \Workabox\API\ObjectID $rttID)
  {
    $this->send_ExportPriceListRTT($apiKey, $rttID);
    return $this->recv_ExportPriceListRTT();
  }

  public function send_ExportPriceListRTT($apiKey, \Workabox\API\ObjectID $rttID)
  {
    $args = new \Workabox\API\APIService_ExportPriceListRTT_args();
    $args->apiKey = $apiKey;
    $args->rttID = $rttID;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportPriceListRTT', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportPriceListRTT', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportPriceListRTT()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportPriceListRTT_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportPriceListRTT_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportPriceListRTT failed: unknown result");
  }

  public function ExportGoodsQuantity($apiKey, \Workabox\API\ObjectID $storeID)
  {
    $this->send_ExportGoodsQuantity($apiKey, $storeID);
    return $this->recv_ExportGoodsQuantity();
  }

  public function send_ExportGoodsQuantity($apiKey, \Workabox\API\ObjectID $storeID)
  {
    $args = new \Workabox\API\APIService_ExportGoodsQuantity_args();
    $args->apiKey = $apiKey;
    $args->storeID = $storeID;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportGoodsQuantity', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportGoodsQuantity', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportGoodsQuantity()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportGoodsQuantity_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportGoodsQuantity_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportGoodsQuantity failed: unknown result");
  }

  public function CalculateSale($apiKey, \Workabox\API\CalculateSaleInfo $sale)
  {
    $this->send_CalculateSale($apiKey, $sale);
    return $this->recv_CalculateSale();
  }

  public function send_CalculateSale($apiKey, \Workabox\API\CalculateSaleInfo $sale)
  {
    $args = new \Workabox\API\APIService_CalculateSale_args();
    $args->apiKey = $apiKey;
    $args->sale = $sale;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CalculateSale', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CalculateSale', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CalculateSale()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_CalculateSale_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_CalculateSale_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("CalculateSale failed: unknown result");
  }

  public function CalculateOrder($apiKey, \Workabox\API\CalculateOrderInfo $order)
  {
    $this->send_CalculateOrder($apiKey, $order);
    return $this->recv_CalculateOrder();
  }

  public function send_CalculateOrder($apiKey, \Workabox\API\CalculateOrderInfo $order)
  {
    $args = new \Workabox\API\APIService_CalculateOrder_args();
    $args->apiKey = $apiKey;
    $args->order = $order;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CalculateOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CalculateOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CalculateOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_CalculateOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_CalculateOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("CalculateOrder failed: unknown result");
  }

  public function CompleteSale($apiKey, $saleID)
  {
    $this->send_CompleteSale($apiKey, $saleID);
    $this->recv_CompleteSale();
  }

  public function send_CompleteSale($apiKey, $saleID)
  {
    $args = new \Workabox\API\APIService_CompleteSale_args();
    $args->apiKey = $apiKey;
    $args->saleID = $saleID;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CompleteSale', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CompleteSale', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CompleteSale()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_CompleteSale_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_CompleteSale_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    return;
  }

  public function ImportUserCatalog($apiKey, \Workabox\API\UserCatalog $importdata)
  {
    $this->send_ImportUserCatalog($apiKey, $importdata);
    return $this->recv_ImportUserCatalog();
  }

  public function send_ImportUserCatalog($apiKey, \Workabox\API\UserCatalog $importdata)
  {
    $args = new \Workabox\API\APIService_ImportUserCatalog_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportUserCatalog', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportUserCatalog', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportUserCatalog()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportUserCatalog_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportUserCatalog_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportUserCatalog failed: unknown result");
  }

  public function ExportUserCatalog($apiKey, $date, \Workabox\API\UserCatalogFilter $filter)
  {
    $this->send_ExportUserCatalog($apiKey, $date, $filter);
    return $this->recv_ExportUserCatalog();
  }

  public function send_ExportUserCatalog($apiKey, $date, \Workabox\API\UserCatalogFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportUserCatalog_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportUserCatalog', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportUserCatalog', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportUserCatalog()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportUserCatalog_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportUserCatalog_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportUserCatalog failed: unknown result");
  }

  public function ImportGoods($apiKey, \Workabox\API\Goods $importdata)
  {
    $this->send_ImportGoods($apiKey, $importdata);
    return $this->recv_ImportGoods();
  }

  public function send_ImportGoods($apiKey, \Workabox\API\Goods $importdata)
  {
    $args = new \Workabox\API\APIService_ImportGoods_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportGoods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportGoods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportGoods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportGoods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportGoods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportGoods failed: unknown result");
  }

  public function ExportGoods($apiKey, $date, \Workabox\API\GoodsFilter $filter)
  {
    $this->send_ExportGoods($apiKey, $date, $filter);
    return $this->recv_ExportGoods();
  }

  public function send_ExportGoods($apiKey, $date, \Workabox\API\GoodsFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportGoods_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportGoods', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportGoods', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportGoods()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportGoods_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportGoods_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportGoods failed: unknown result");
  }

  public function ImportService($apiKey, \Workabox\API\Service $importdata)
  {
    $this->send_ImportService($apiKey, $importdata);
    return $this->recv_ImportService();
  }

  public function send_ImportService($apiKey, \Workabox\API\Service $importdata)
  {
    $args = new \Workabox\API\APIService_ImportService_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportService', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportService', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportService()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportService_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportService_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportService failed: unknown result");
  }

  public function ExportService($apiKey, $date, \Workabox\API\ServiceFilter $filter)
  {
    $this->send_ExportService($apiKey, $date, $filter);
    return $this->recv_ExportService();
  }

  public function send_ExportService($apiKey, $date, \Workabox\API\ServiceFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportService_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportService', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportService', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportService()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportService_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportService_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportService failed: unknown result");
  }

  public function ImportMoneyFacilitiesType($apiKey, \Workabox\API\MoneyFacilitiesType $importdata)
  {
    $this->send_ImportMoneyFacilitiesType($apiKey, $importdata);
    return $this->recv_ImportMoneyFacilitiesType();
  }

  public function send_ImportMoneyFacilitiesType($apiKey, \Workabox\API\MoneyFacilitiesType $importdata)
  {
    $args = new \Workabox\API\APIService_ImportMoneyFacilitiesType_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportMoneyFacilitiesType', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportMoneyFacilitiesType', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportMoneyFacilitiesType()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportMoneyFacilitiesType_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportMoneyFacilitiesType_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportMoneyFacilitiesType failed: unknown result");
  }

  public function ExportMoneyFacilitiesType($apiKey, $date, \Workabox\API\MoneyFacilitiesTypeFilter $filter)
  {
    $this->send_ExportMoneyFacilitiesType($apiKey, $date, $filter);
    return $this->recv_ExportMoneyFacilitiesType();
  }

  public function send_ExportMoneyFacilitiesType($apiKey, $date, \Workabox\API\MoneyFacilitiesTypeFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportMoneyFacilitiesType_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportMoneyFacilitiesType', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportMoneyFacilitiesType', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportMoneyFacilitiesType()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportMoneyFacilitiesType_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportMoneyFacilitiesType_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportMoneyFacilitiesType failed: unknown result");
  }

  public function ImportPriceList($apiKey, \Workabox\API\PriceList $importdata)
  {
    $this->send_ImportPriceList($apiKey, $importdata);
    return $this->recv_ImportPriceList();
  }

  public function send_ImportPriceList($apiKey, \Workabox\API\PriceList $importdata)
  {
    $args = new \Workabox\API\APIService_ImportPriceList_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportPriceList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportPriceList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportPriceList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportPriceList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportPriceList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportPriceList failed: unknown result");
  }

  public function ExportPriceList($apiKey, $date, \Workabox\API\PriceListFilter $filter)
  {
    $this->send_ExportPriceList($apiKey, $date, $filter);
    return $this->recv_ExportPriceList();
  }

  public function send_ExportPriceList($apiKey, $date, \Workabox\API\PriceListFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportPriceList_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportPriceList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportPriceList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportPriceList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportPriceList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportPriceList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportPriceList failed: unknown result");
  }

  public function ImportSupplier($apiKey, \Workabox\API\Supplier $importdata)
  {
    $this->send_ImportSupplier($apiKey, $importdata);
    return $this->recv_ImportSupplier();
  }

  public function send_ImportSupplier($apiKey, \Workabox\API\Supplier $importdata)
  {
    $args = new \Workabox\API\APIService_ImportSupplier_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportSupplier', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportSupplier', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportSupplier()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportSupplier_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportSupplier_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportSupplier failed: unknown result");
  }

  public function ExportSupplier($apiKey, $date, \Workabox\API\SupplierFilter $filter)
  {
    $this->send_ExportSupplier($apiKey, $date, $filter);
    return $this->recv_ExportSupplier();
  }

  public function send_ExportSupplier($apiKey, $date, \Workabox\API\SupplierFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportSupplier_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportSupplier', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportSupplier', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportSupplier()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportSupplier_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportSupplier_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportSupplier failed: unknown result");
  }

  public function ImportOffice($apiKey, \Workabox\API\Office $importdata)
  {
    $this->send_ImportOffice($apiKey, $importdata);
    return $this->recv_ImportOffice();
  }

  public function send_ImportOffice($apiKey, \Workabox\API\Office $importdata)
  {
    $args = new \Workabox\API\APIService_ImportOffice_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportOffice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportOffice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportOffice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportOffice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportOffice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportOffice failed: unknown result");
  }

  public function ExportOffice($apiKey, $date, \Workabox\API\OfficeFilter $filter)
  {
    $this->send_ExportOffice($apiKey, $date, $filter);
    return $this->recv_ExportOffice();
  }

  public function send_ExportOffice($apiKey, $date, \Workabox\API\OfficeFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportOffice_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportOffice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportOffice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportOffice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportOffice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportOffice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportOffice failed: unknown result");
  }

  public function ImportStock($apiKey, \Workabox\API\Stock $importdata)
  {
    $this->send_ImportStock($apiKey, $importdata);
    return $this->recv_ImportStock();
  }

  public function send_ImportStock($apiKey, \Workabox\API\Stock $importdata)
  {
    $args = new \Workabox\API\APIService_ImportStock_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportStock', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportStock', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportStock()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportStock_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportStock_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportStock failed: unknown result");
  }

  public function ExportStock($apiKey, $date, \Workabox\API\StockFilter $filter)
  {
    $this->send_ExportStock($apiKey, $date, $filter);
    return $this->recv_ExportStock();
  }

  public function send_ExportStock($apiKey, $date, \Workabox\API\StockFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportStock_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportStock', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportStock', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportStock()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportStock_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportStock_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportStock failed: unknown result");
  }

  public function ImportRTT($apiKey, \Workabox\API\RTT $importdata)
  {
    $this->send_ImportRTT($apiKey, $importdata);
    return $this->recv_ImportRTT();
  }

  public function send_ImportRTT($apiKey, \Workabox\API\RTT $importdata)
  {
    $args = new \Workabox\API\APIService_ImportRTT_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportRTT', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportRTT', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportRTT()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportRTT_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportRTT_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportRTT failed: unknown result");
  }

  public function ExportRTT($apiKey, $date, \Workabox\API\RTTFilter $filter)
  {
    $this->send_ExportRTT($apiKey, $date, $filter);
    return $this->recv_ExportRTT();
  }

  public function send_ExportRTT($apiKey, $date, \Workabox\API\RTTFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportRTT_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportRTT', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportRTT', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportRTT()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportRTT_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportRTT_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportRTT failed: unknown result");
  }

  public function ImportCashDeskRTT($apiKey, \Workabox\API\CashDeskRTT $importdata)
  {
    $this->send_ImportCashDeskRTT($apiKey, $importdata);
    return $this->recv_ImportCashDeskRTT();
  }

  public function send_ImportCashDeskRTT($apiKey, \Workabox\API\CashDeskRTT $importdata)
  {
    $args = new \Workabox\API\APIService_ImportCashDeskRTT_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportCashDeskRTT', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportCashDeskRTT', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportCashDeskRTT()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportCashDeskRTT_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportCashDeskRTT_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportCashDeskRTT failed: unknown result");
  }

  public function ExportCashDeskRTT($apiKey, $date, \Workabox\API\CashDeskRTTFilter $filter)
  {
    $this->send_ExportCashDeskRTT($apiKey, $date, $filter);
    return $this->recv_ExportCashDeskRTT();
  }

  public function send_ExportCashDeskRTT($apiKey, $date, \Workabox\API\CashDeskRTTFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportCashDeskRTT_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportCashDeskRTT', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportCashDeskRTT', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportCashDeskRTT()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportCashDeskRTT_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportCashDeskRTT_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportCashDeskRTT failed: unknown result");
  }

  public function ImportEmployee($apiKey, \Workabox\API\Employee $importdata)
  {
    $this->send_ImportEmployee($apiKey, $importdata);
    return $this->recv_ImportEmployee();
  }

  public function send_ImportEmployee($apiKey, \Workabox\API\Employee $importdata)
  {
    $args = new \Workabox\API\APIService_ImportEmployee_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportEmployee', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportEmployee', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportEmployee()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportEmployee_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportEmployee_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportEmployee failed: unknown result");
  }

  public function ExportEmployee($apiKey, $date, \Workabox\API\EmployeeFilter $filter)
  {
    $this->send_ExportEmployee($apiKey, $date, $filter);
    return $this->recv_ExportEmployee();
  }

  public function send_ExportEmployee($apiKey, $date, \Workabox\API\EmployeeFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportEmployee_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportEmployee', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportEmployee', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportEmployee()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportEmployee_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportEmployee_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportEmployee failed: unknown result");
  }

  public function ImportBank($apiKey, \Workabox\API\Bank $importdata)
  {
    $this->send_ImportBank($apiKey, $importdata);
    return $this->recv_ImportBank();
  }

  public function send_ImportBank($apiKey, \Workabox\API\Bank $importdata)
  {
    $args = new \Workabox\API\APIService_ImportBank_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportBank', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportBank', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportBank()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportBank_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportBank_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportBank failed: unknown result");
  }

  public function ExportBank($apiKey, $date, \Workabox\API\BankFilter $filter)
  {
    $this->send_ExportBank($apiKey, $date, $filter);
    return $this->recv_ExportBank();
  }

  public function send_ExportBank($apiKey, $date, \Workabox\API\BankFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportBank_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportBank', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportBank', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportBank()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportBank_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportBank_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportBank failed: unknown result");
  }

  public function ImportAccount($apiKey, \Workabox\API\Account $importdata)
  {
    $this->send_ImportAccount($apiKey, $importdata);
    return $this->recv_ImportAccount();
  }

  public function send_ImportAccount($apiKey, \Workabox\API\Account $importdata)
  {
    $args = new \Workabox\API\APIService_ImportAccount_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportAccount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportAccount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportAccount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportAccount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportAccount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportAccount failed: unknown result");
  }

  public function ExportAccount($apiKey, $date, \Workabox\API\AccountFilter $filter)
  {
    $this->send_ExportAccount($apiKey, $date, $filter);
    return $this->recv_ExportAccount();
  }

  public function send_ExportAccount($apiKey, $date, \Workabox\API\AccountFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportAccount_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportAccount', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportAccount', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportAccount()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportAccount_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportAccount_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportAccount failed: unknown result");
  }

  public function ImportCashDesk($apiKey, \Workabox\API\CashDesk $importdata)
  {
    $this->send_ImportCashDesk($apiKey, $importdata);
    return $this->recv_ImportCashDesk();
  }

  public function send_ImportCashDesk($apiKey, \Workabox\API\CashDesk $importdata)
  {
    $args = new \Workabox\API\APIService_ImportCashDesk_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportCashDesk', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportCashDesk', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportCashDesk()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportCashDesk_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportCashDesk_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportCashDesk failed: unknown result");
  }

  public function ExportCashDesk($apiKey, $date, \Workabox\API\CashDeskFilter $filter)
  {
    $this->send_ExportCashDesk($apiKey, $date, $filter);
    return $this->recv_ExportCashDesk();
  }

  public function send_ExportCashDesk($apiKey, $date, \Workabox\API\CashDeskFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportCashDesk_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportCashDesk', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportCashDesk', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportCashDesk()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportCashDesk_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportCashDesk_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportCashDesk failed: unknown result");
  }

  public function ImportMarketingInstrumentType($apiKey, \Workabox\API\MarketingInstrumentType $importdata)
  {
    $this->send_ImportMarketingInstrumentType($apiKey, $importdata);
    return $this->recv_ImportMarketingInstrumentType();
  }

  public function send_ImportMarketingInstrumentType($apiKey, \Workabox\API\MarketingInstrumentType $importdata)
  {
    $args = new \Workabox\API\APIService_ImportMarketingInstrumentType_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportMarketingInstrumentType', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportMarketingInstrumentType', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportMarketingInstrumentType()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportMarketingInstrumentType_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportMarketingInstrumentType_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportMarketingInstrumentType failed: unknown result");
  }

  public function ExportMarketingInstrumentType($apiKey, $date, \Workabox\API\MarketingInstrumentTypeFilter $filter)
  {
    $this->send_ExportMarketingInstrumentType($apiKey, $date, $filter);
    return $this->recv_ExportMarketingInstrumentType();
  }

  public function send_ExportMarketingInstrumentType($apiKey, $date, \Workabox\API\MarketingInstrumentTypeFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportMarketingInstrumentType_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportMarketingInstrumentType', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportMarketingInstrumentType', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportMarketingInstrumentType()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportMarketingInstrumentType_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportMarketingInstrumentType_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportMarketingInstrumentType failed: unknown result");
  }

  public function ImportActualizingMI($apiKey, \Workabox\API\ActualizingMI $importdata)
  {
    $this->send_ImportActualizingMI($apiKey, $importdata);
    return $this->recv_ImportActualizingMI();
  }

  public function send_ImportActualizingMI($apiKey, \Workabox\API\ActualizingMI $importdata)
  {
    $args = new \Workabox\API\APIService_ImportActualizingMI_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportActualizingMI', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportActualizingMI', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportActualizingMI()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportActualizingMI_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportActualizingMI_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportActualizingMI failed: unknown result");
  }

  public function ExportActualizingMI($apiKey, $date, \Workabox\API\ActualizingMIFilter $filter)
  {
    $this->send_ExportActualizingMI($apiKey, $date, $filter);
    return $this->recv_ExportActualizingMI();
  }

  public function send_ExportActualizingMI($apiKey, $date, \Workabox\API\ActualizingMIFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportActualizingMI_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportActualizingMI', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportActualizingMI', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportActualizingMI()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportActualizingMI_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportActualizingMI_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportActualizingMI failed: unknown result");
  }

  public function ImportCustomerNaturalPerson($apiKey, \Workabox\API\CustomerNaturalPerson $importdata)
  {
    $this->send_ImportCustomerNaturalPerson($apiKey, $importdata);
    return $this->recv_ImportCustomerNaturalPerson();
  }

  public function send_ImportCustomerNaturalPerson($apiKey, \Workabox\API\CustomerNaturalPerson $importdata)
  {
    $args = new \Workabox\API\APIService_ImportCustomerNaturalPerson_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportCustomerNaturalPerson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportCustomerNaturalPerson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportCustomerNaturalPerson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportCustomerNaturalPerson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportCustomerNaturalPerson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportCustomerNaturalPerson failed: unknown result");
  }

  public function ExportCustomerNaturalPerson($apiKey, $date, \Workabox\API\CustomerNaturalPersonFilter $filter)
  {
    $this->send_ExportCustomerNaturalPerson($apiKey, $date, $filter);
    return $this->recv_ExportCustomerNaturalPerson();
  }

  public function send_ExportCustomerNaturalPerson($apiKey, $date, \Workabox\API\CustomerNaturalPersonFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportCustomerNaturalPerson_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportCustomerNaturalPerson', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportCustomerNaturalPerson', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportCustomerNaturalPerson()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportCustomerNaturalPerson_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportCustomerNaturalPerson_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportCustomerNaturalPerson failed: unknown result");
  }

  public function ImportGoodsIncome($apiKey, \Workabox\API\GoodsIncome $importdata)
  {
    $this->send_ImportGoodsIncome($apiKey, $importdata);
    return $this->recv_ImportGoodsIncome();
  }

  public function send_ImportGoodsIncome($apiKey, \Workabox\API\GoodsIncome $importdata)
  {
    $args = new \Workabox\API\APIService_ImportGoodsIncome_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportGoodsIncome', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportGoodsIncome', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportGoodsIncome()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportGoodsIncome_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportGoodsIncome_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportGoodsIncome failed: unknown result");
  }

  public function ExportGoodsIncome($apiKey, $date, \Workabox\API\GoodsIncomeFilter $filter)
  {
    $this->send_ExportGoodsIncome($apiKey, $date, $filter);
    return $this->recv_ExportGoodsIncome();
  }

  public function send_ExportGoodsIncome($apiKey, $date, \Workabox\API\GoodsIncomeFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportGoodsIncome_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportGoodsIncome', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportGoodsIncome', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportGoodsIncome()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportGoodsIncome_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportGoodsIncome_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportGoodsIncome failed: unknown result");
  }

  public function ImportGoodsMove($apiKey, \Workabox\API\GoodsMove $importdata)
  {
    $this->send_ImportGoodsMove($apiKey, $importdata);
    return $this->recv_ImportGoodsMove();
  }

  public function send_ImportGoodsMove($apiKey, \Workabox\API\GoodsMove $importdata)
  {
    $args = new \Workabox\API\APIService_ImportGoodsMove_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportGoodsMove', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportGoodsMove', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportGoodsMove()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportGoodsMove_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportGoodsMove_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportGoodsMove failed: unknown result");
  }

  public function ExportGoodsMove($apiKey, $date, \Workabox\API\GoodsMoveFilter $filter)
  {
    $this->send_ExportGoodsMove($apiKey, $date, $filter);
    return $this->recv_ExportGoodsMove();
  }

  public function send_ExportGoodsMove($apiKey, $date, \Workabox\API\GoodsMoveFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportGoodsMove_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportGoodsMove', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportGoodsMove', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportGoodsMove()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportGoodsMove_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportGoodsMove_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportGoodsMove failed: unknown result");
  }

  public function ImportGoodsReturn($apiKey, \Workabox\API\GoodsReturn $importdata)
  {
    $this->send_ImportGoodsReturn($apiKey, $importdata);
    return $this->recv_ImportGoodsReturn();
  }

  public function send_ImportGoodsReturn($apiKey, \Workabox\API\GoodsReturn $importdata)
  {
    $args = new \Workabox\API\APIService_ImportGoodsReturn_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportGoodsReturn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportGoodsReturn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportGoodsReturn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportGoodsReturn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportGoodsReturn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportGoodsReturn failed: unknown result");
  }

  public function ExportGoodsReturn($apiKey, $date, \Workabox\API\GoodsReturnFilter $filter)
  {
    $this->send_ExportGoodsReturn($apiKey, $date, $filter);
    return $this->recv_ExportGoodsReturn();
  }

  public function send_ExportGoodsReturn($apiKey, $date, \Workabox\API\GoodsReturnFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportGoodsReturn_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportGoodsReturn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportGoodsReturn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportGoodsReturn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportGoodsReturn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportGoodsReturn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportGoodsReturn failed: unknown result");
  }

  public function ImportGoodsDebit($apiKey, \Workabox\API\GoodsDebit $importdata)
  {
    $this->send_ImportGoodsDebit($apiKey, $importdata);
    return $this->recv_ImportGoodsDebit();
  }

  public function send_ImportGoodsDebit($apiKey, \Workabox\API\GoodsDebit $importdata)
  {
    $args = new \Workabox\API\APIService_ImportGoodsDebit_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportGoodsDebit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportGoodsDebit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportGoodsDebit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportGoodsDebit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportGoodsDebit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportGoodsDebit failed: unknown result");
  }

  public function ExportGoodsDebit($apiKey, $date, \Workabox\API\GoodsDebitFilter $filter)
  {
    $this->send_ExportGoodsDebit($apiKey, $date, $filter);
    return $this->recv_ExportGoodsDebit();
  }

  public function send_ExportGoodsDebit($apiKey, $date, \Workabox\API\GoodsDebitFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportGoodsDebit_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportGoodsDebit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportGoodsDebit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportGoodsDebit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportGoodsDebit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportGoodsDebit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportGoodsDebit failed: unknown result");
  }

  public function ImportRetailSale($apiKey, \Workabox\API\RetailSale $importdata)
  {
    $this->send_ImportRetailSale($apiKey, $importdata);
    return $this->recv_ImportRetailSale();
  }

  public function send_ImportRetailSale($apiKey, \Workabox\API\RetailSale $importdata)
  {
    $args = new \Workabox\API\APIService_ImportRetailSale_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportRetailSale', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportRetailSale', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportRetailSale()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportRetailSale_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportRetailSale_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportRetailSale failed: unknown result");
  }

  public function ExportRetailSale($apiKey, $date, \Workabox\API\RetailSaleFilter $filter)
  {
    $this->send_ExportRetailSale($apiKey, $date, $filter);
    return $this->recv_ExportRetailSale();
  }

  public function send_ExportRetailSale($apiKey, $date, \Workabox\API\RetailSaleFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportRetailSale_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportRetailSale', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportRetailSale', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportRetailSale()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportRetailSale_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportRetailSale_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportRetailSale failed: unknown result");
  }

  public function ImportCustomerOrder($apiKey, \Workabox\API\CustomerOrder $importdata)
  {
    $this->send_ImportCustomerOrder($apiKey, $importdata);
    return $this->recv_ImportCustomerOrder();
  }

  public function send_ImportCustomerOrder($apiKey, \Workabox\API\CustomerOrder $importdata)
  {
    $args = new \Workabox\API\APIService_ImportCustomerOrder_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportCustomerOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportCustomerOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportCustomerOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportCustomerOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportCustomerOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportCustomerOrder failed: unknown result");
  }

  public function ExportCustomerOrder($apiKey, $date, \Workabox\API\CustomerOrderFilter $filter)
  {
    $this->send_ExportCustomerOrder($apiKey, $date, $filter);
    return $this->recv_ExportCustomerOrder();
  }

  public function send_ExportCustomerOrder($apiKey, $date, \Workabox\API\CustomerOrderFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportCustomerOrder_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportCustomerOrder', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportCustomerOrder', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportCustomerOrder()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportCustomerOrder_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportCustomerOrder_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportCustomerOrder failed: unknown result");
  }

  public function ImportCustomerReturn($apiKey, \Workabox\API\CustomerReturn $importdata)
  {
    $this->send_ImportCustomerReturn($apiKey, $importdata);
    return $this->recv_ImportCustomerReturn();
  }

  public function send_ImportCustomerReturn($apiKey, \Workabox\API\CustomerReturn $importdata)
  {
    $args = new \Workabox\API\APIService_ImportCustomerReturn_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportCustomerReturn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportCustomerReturn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportCustomerReturn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportCustomerReturn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportCustomerReturn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportCustomerReturn failed: unknown result");
  }

  public function ExportCustomerReturn($apiKey, $date, \Workabox\API\CustomerReturnFilter $filter)
  {
    $this->send_ExportCustomerReturn($apiKey, $date, $filter);
    return $this->recv_ExportCustomerReturn();
  }

  public function send_ExportCustomerReturn($apiKey, $date, \Workabox\API\CustomerReturnFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportCustomerReturn_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportCustomerReturn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportCustomerReturn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportCustomerReturn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportCustomerReturn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportCustomerReturn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportCustomerReturn failed: unknown result");
  }

  public function ImportOrderDocOut($apiKey, \Workabox\API\OrderDocOut $importdata)
  {
    $this->send_ImportOrderDocOut($apiKey, $importdata);
    return $this->recv_ImportOrderDocOut();
  }

  public function send_ImportOrderDocOut($apiKey, \Workabox\API\OrderDocOut $importdata)
  {
    $args = new \Workabox\API\APIService_ImportOrderDocOut_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportOrderDocOut', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportOrderDocOut', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportOrderDocOut()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportOrderDocOut_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportOrderDocOut_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportOrderDocOut failed: unknown result");
  }

  public function ExportOrderDocOut($apiKey, $date, \Workabox\API\OrderDocOutFilter $filter)
  {
    $this->send_ExportOrderDocOut($apiKey, $date, $filter);
    return $this->recv_ExportOrderDocOut();
  }

  public function send_ExportOrderDocOut($apiKey, $date, \Workabox\API\OrderDocOutFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportOrderDocOut_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportOrderDocOut', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportOrderDocOut', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportOrderDocOut()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportOrderDocOut_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportOrderDocOut_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportOrderDocOut failed: unknown result");
  }

  public function ImportOrderDocInner($apiKey, \Workabox\API\OrderDocInner $importdata)
  {
    $this->send_ImportOrderDocInner($apiKey, $importdata);
    return $this->recv_ImportOrderDocInner();
  }

  public function send_ImportOrderDocInner($apiKey, \Workabox\API\OrderDocInner $importdata)
  {
    $args = new \Workabox\API\APIService_ImportOrderDocInner_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportOrderDocInner', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportOrderDocInner', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportOrderDocInner()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportOrderDocInner_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportOrderDocInner_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportOrderDocInner failed: unknown result");
  }

  public function ExportOrderDocInner($apiKey, $date, \Workabox\API\OrderDocInnerFilter $filter)
  {
    $this->send_ExportOrderDocInner($apiKey, $date, $filter);
    return $this->recv_ExportOrderDocInner();
  }

  public function send_ExportOrderDocInner($apiKey, $date, \Workabox\API\OrderDocInnerFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportOrderDocInner_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportOrderDocInner', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportOrderDocInner', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportOrderDocInner()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportOrderDocInner_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportOrderDocInner_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportOrderDocInner failed: unknown result");
  }

  public function ImportInventory($apiKey, \Workabox\API\Inventory $importdata)
  {
    $this->send_ImportInventory($apiKey, $importdata);
    return $this->recv_ImportInventory();
  }

  public function send_ImportInventory($apiKey, \Workabox\API\Inventory $importdata)
  {
    $args = new \Workabox\API\APIService_ImportInventory_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportInventory', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportInventory', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportInventory()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportInventory_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportInventory_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportInventory failed: unknown result");
  }

  public function ExportInventory($apiKey, $date, \Workabox\API\InventoryFilter $filter)
  {
    $this->send_ExportInventory($apiKey, $date, $filter);
    return $this->recv_ExportInventory();
  }

  public function send_ExportInventory($apiKey, $date, \Workabox\API\InventoryFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportInventory_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportInventory', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportInventory', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportInventory()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportInventory_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportInventory_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportInventory failed: unknown result");
  }

  public function ImportMoneyMovementIn($apiKey, \Workabox\API\MoneyMovementIn $importdata)
  {
    $this->send_ImportMoneyMovementIn($apiKey, $importdata);
    return $this->recv_ImportMoneyMovementIn();
  }

  public function send_ImportMoneyMovementIn($apiKey, \Workabox\API\MoneyMovementIn $importdata)
  {
    $args = new \Workabox\API\APIService_ImportMoneyMovementIn_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportMoneyMovementIn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportMoneyMovementIn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportMoneyMovementIn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportMoneyMovementIn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportMoneyMovementIn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportMoneyMovementIn failed: unknown result");
  }

  public function ExportMoneyMovementIn($apiKey, $date, \Workabox\API\MoneyMovementInFilter $filter)
  {
    $this->send_ExportMoneyMovementIn($apiKey, $date, $filter);
    return $this->recv_ExportMoneyMovementIn();
  }

  public function send_ExportMoneyMovementIn($apiKey, $date, \Workabox\API\MoneyMovementInFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportMoneyMovementIn_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportMoneyMovementIn', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportMoneyMovementIn', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportMoneyMovementIn()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportMoneyMovementIn_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportMoneyMovementIn_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportMoneyMovementIn failed: unknown result");
  }

  public function ImportMoneyMovementOut($apiKey, \Workabox\API\MoneyMovementOut $importdata)
  {
    $this->send_ImportMoneyMovementOut($apiKey, $importdata);
    return $this->recv_ImportMoneyMovementOut();
  }

  public function send_ImportMoneyMovementOut($apiKey, \Workabox\API\MoneyMovementOut $importdata)
  {
    $args = new \Workabox\API\APIService_ImportMoneyMovementOut_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportMoneyMovementOut', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportMoneyMovementOut', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportMoneyMovementOut()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportMoneyMovementOut_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportMoneyMovementOut_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportMoneyMovementOut failed: unknown result");
  }

  public function ExportMoneyMovementOut($apiKey, $date, \Workabox\API\MoneyMovementOutFilter $filter)
  {
    $this->send_ExportMoneyMovementOut($apiKey, $date, $filter);
    return $this->recv_ExportMoneyMovementOut();
  }

  public function send_ExportMoneyMovementOut($apiKey, $date, \Workabox\API\MoneyMovementOutFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportMoneyMovementOut_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportMoneyMovementOut', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportMoneyMovementOut', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportMoneyMovementOut()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportMoneyMovementOut_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportMoneyMovementOut_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportMoneyMovementOut failed: unknown result");
  }

  public function ImportMoneyMovementInner($apiKey, \Workabox\API\MoneyMovementInner $importdata)
  {
    $this->send_ImportMoneyMovementInner($apiKey, $importdata);
    return $this->recv_ImportMoneyMovementInner();
  }

  public function send_ImportMoneyMovementInner($apiKey, \Workabox\API\MoneyMovementInner $importdata)
  {
    $args = new \Workabox\API\APIService_ImportMoneyMovementInner_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportMoneyMovementInner', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportMoneyMovementInner', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportMoneyMovementInner()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportMoneyMovementInner_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportMoneyMovementInner_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportMoneyMovementInner failed: unknown result");
  }

  public function ExportMoneyMovementInner($apiKey, $date, \Workabox\API\MoneyMovementInnerFilter $filter)
  {
    $this->send_ExportMoneyMovementInner($apiKey, $date, $filter);
    return $this->recv_ExportMoneyMovementInner();
  }

  public function send_ExportMoneyMovementInner($apiKey, $date, \Workabox\API\MoneyMovementInnerFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportMoneyMovementInner_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportMoneyMovementInner', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportMoneyMovementInner', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportMoneyMovementInner()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportMoneyMovementInner_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportMoneyMovementInner_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportMoneyMovementInner failed: unknown result");
  }

  public function ImportRoutings($apiKey, \Workabox\API\Routings $importdata)
  {
    $this->send_ImportRoutings($apiKey, $importdata);
    return $this->recv_ImportRoutings();
  }

  public function send_ImportRoutings($apiKey, \Workabox\API\Routings $importdata)
  {
    $args = new \Workabox\API\APIService_ImportRoutings_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportRoutings', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportRoutings', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportRoutings()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportRoutings_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportRoutings_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportRoutings failed: unknown result");
  }

  public function ExportRoutings($apiKey, $date, \Workabox\API\RoutingsFilter $filter)
  {
    $this->send_ExportRoutings($apiKey, $date, $filter);
    return $this->recv_ExportRoutings();
  }

  public function send_ExportRoutings($apiKey, $date, \Workabox\API\RoutingsFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportRoutings_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportRoutings', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportRoutings', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportRoutings()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportRoutings_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportRoutings_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportRoutings failed: unknown result");
  }

  public function ImportProductionOperations($apiKey, \Workabox\API\ProductionOperations $importdata)
  {
    $this->send_ImportProductionOperations($apiKey, $importdata);
    return $this->recv_ImportProductionOperations();
  }

  public function send_ImportProductionOperations($apiKey, \Workabox\API\ProductionOperations $importdata)
  {
    $args = new \Workabox\API\APIService_ImportProductionOperations_args();
    $args->apiKey = $apiKey;
    $args->importdata = $importdata;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ImportProductionOperations', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ImportProductionOperations', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ImportProductionOperations()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ImportProductionOperations_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ImportProductionOperations_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ImportProductionOperations failed: unknown result");
  }

  public function ExportProductionOperations($apiKey, $date, \Workabox\API\ProductionOperationsFilter $filter)
  {
    $this->send_ExportProductionOperations($apiKey, $date, $filter);
    return $this->recv_ExportProductionOperations();
  }

  public function send_ExportProductionOperations($apiKey, $date, \Workabox\API\ProductionOperationsFilter $filter)
  {
    $args = new \Workabox\API\APIService_ExportProductionOperations_args();
    $args->apiKey = $apiKey;
    $args->date = $date;
    $args->filter = $filter;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ExportProductionOperations', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ExportProductionOperations', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ExportProductionOperations()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Workabox\API\APIService_ExportProductionOperations_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Workabox\API\APIService_ExportProductionOperations_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ex !== null) {
      throw $result->ex;
    }
    throw new \Exception("ExportProductionOperations failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class APIService_Login_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $login = null;
  /**
   * @var string
   */
  public $password = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'login',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['login'])) {
        $this->login = $vals['login'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
    }
  }

  public function getName() {
    return 'APIService_Login_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->login);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_Login_args');
    if ($this->login !== null) {
      $xfer += $output->writeFieldBegin('login', TType::STRING, 1);
      $xfer += $output->writeString($this->login);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 2);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_Login_result {
  static $_TSPEC;

  /**
   * @var string
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRING,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_Login_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_Login_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::STRING, 0);
      $xfer += $output->writeString($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsGroup_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\GoodsGroupFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\GoodsGroupFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsGroup_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\GoodsGroupFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsGroup_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsGroup_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\GoodsGroup[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsGroup',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsGroup_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1092 = 0;
            $_etype1095 = 0;
            $xfer += $input->readListBegin($_etype1095, $_size1092);
            for ($_i1096 = 0; $_i1096 < $_size1092; ++$_i1096)
            {
              $elem1097 = null;
              $elem1097 = new \Workabox\API\GoodsGroup();
              $xfer += $elem1097->read($input);
              $this->success []= $elem1097;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsGroup_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1098)
          {
            $xfer += $iter1098->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportHeadOffice_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\HeadOffice
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\HeadOffice',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportHeadOffice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\HeadOffice();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportHeadOffice_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportHeadOffice_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportHeadOffice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportHeadOffice_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportHeadOffice_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportHeadOffice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportHeadOffice_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportHeadOffice_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\HeadOffice
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\HeadOffice',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportHeadOffice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Workabox\API\HeadOffice();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportHeadOffice_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportChosenGoods_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $rttID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rttID',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['rttID'])) {
        $this->rttID = $vals['rttID'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportChosenGoods_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->rttID = new \Workabox\API\ObjectID();
            $xfer += $this->rttID->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportChosenGoods_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rttID !== null) {
      if (!is_object($this->rttID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rttID', TType::STRUCT, 2);
      $xfer += $this->rttID->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportChosenGoods_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportChosenGoods_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1099 = 0;
            $_etype1102 = 0;
            $xfer += $input->readListBegin($_etype1102, $_size1099);
            for ($_i1103 = 0; $_i1103 < $_size1099; ++$_i1103)
            {
              $elem1104 = null;
              $elem1104 = new \Workabox\API\ObjectID();
              $xfer += $elem1104->read($input);
              $this->success []= $elem1104;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportChosenGoods_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1105)
          {
            $xfer += $iter1105->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportChosenGoodsPrice_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $rttID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rttID',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['rttID'])) {
        $this->rttID = $vals['rttID'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportChosenGoodsPrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->rttID = new \Workabox\API\ObjectID();
            $xfer += $this->rttID->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportChosenGoodsPrice_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rttID !== null) {
      if (!is_object($this->rttID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rttID', TType::STRUCT, 2);
      $xfer += $this->rttID->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportChosenGoodsPrice_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\PricesListLine[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\PricesListLine',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportChosenGoodsPrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1106 = 0;
            $_etype1109 = 0;
            $xfer += $input->readListBegin($_etype1109, $_size1106);
            for ($_i1110 = 0; $_i1110 < $_size1106; ++$_i1110)
            {
              $elem1111 = null;
              $elem1111 = new \Workabox\API\PricesListLine();
              $xfer += $elem1111->read($input);
              $this->success []= $elem1111;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportChosenGoodsPrice_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1112)
          {
            $xfer += $iter1112->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportChosenGoods_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $rttID = null;
  /**
   * @var \Workabox\API\ObjectID[]
   */
  public $goodsIDs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rttID',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        3 => array(
          'var' => 'goodsIDs',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['rttID'])) {
        $this->rttID = $vals['rttID'];
      }
      if (isset($vals['goodsIDs'])) {
        $this->goodsIDs = $vals['goodsIDs'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportChosenGoods_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->rttID = new \Workabox\API\ObjectID();
            $xfer += $this->rttID->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->goodsIDs = array();
            $_size1113 = 0;
            $_etype1116 = 0;
            $xfer += $input->readListBegin($_etype1116, $_size1113);
            for ($_i1117 = 0; $_i1117 < $_size1113; ++$_i1117)
            {
              $elem1118 = null;
              $elem1118 = new \Workabox\API\ObjectID();
              $xfer += $elem1118->read($input);
              $this->goodsIDs []= $elem1118;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportChosenGoods_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rttID !== null) {
      if (!is_object($this->rttID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rttID', TType::STRUCT, 2);
      $xfer += $this->rttID->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->goodsIDs !== null) {
      if (!is_array($this->goodsIDs)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('goodsIDs', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->goodsIDs));
        {
          foreach ($this->goodsIDs as $iter1119)
          {
            $xfer += $iter1119->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportChosenGoods_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportChosenGoods_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportChosenGoods_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportPriceListRTT_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $rttID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rttID',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['rttID'])) {
        $this->rttID = $vals['rttID'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportPriceListRTT_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->rttID = new \Workabox\API\ObjectID();
            $xfer += $this->rttID->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportPriceListRTT_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rttID !== null) {
      if (!is_object($this->rttID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('rttID', TType::STRUCT, 2);
      $xfer += $this->rttID->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportPriceListRTT_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\PriceListRTTLine[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\PriceListRTTLine',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportPriceListRTT_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1120 = 0;
            $_etype1123 = 0;
            $xfer += $input->readListBegin($_etype1123, $_size1120);
            for ($_i1124 = 0; $_i1124 < $_size1120; ++$_i1124)
            {
              $elem1125 = null;
              $elem1125 = new \Workabox\API\PriceListRTTLine();
              $xfer += $elem1125->read($input);
              $this->success []= $elem1125;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportPriceListRTT_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1126)
          {
            $xfer += $iter1126->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsQuantity_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\ObjectID
   */
  public $storeID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'storeID',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ObjectID',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['storeID'])) {
        $this->storeID = $vals['storeID'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsQuantity_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->storeID = new \Workabox\API\ObjectID();
            $xfer += $this->storeID->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsQuantity_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->storeID !== null) {
      if (!is_object($this->storeID)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('storeID', TType::STRUCT, 2);
      $xfer += $this->storeID->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsQuantity_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\GoodsRestLine[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsRestLine',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsQuantity_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1127 = 0;
            $_etype1130 = 0;
            $xfer += $input->readListBegin($_etype1130, $_size1127);
            for ($_i1131 = 0; $_i1131 < $_size1127; ++$_i1131)
            {
              $elem1132 = null;
              $elem1132 = new \Workabox\API\GoodsRestLine();
              $xfer += $elem1132->read($input);
              $this->success []= $elem1132;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsQuantity_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1133)
          {
            $xfer += $iter1133->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_CalculateSale_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\CalculateSaleInfo
   */
  public $sale = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sale',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CalculateSaleInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['sale'])) {
        $this->sale = $vals['sale'];
      }
    }
  }

  public function getName() {
    return 'APIService_CalculateSale_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->sale = new \Workabox\API\CalculateSaleInfo();
            $xfer += $this->sale->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_CalculateSale_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sale !== null) {
      if (!is_object($this->sale)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sale', TType::STRUCT, 2);
      $xfer += $this->sale->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_CalculateSale_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\CalculateSaleInfo
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CalculateSaleInfo',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_CalculateSale_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Workabox\API\CalculateSaleInfo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_CalculateSale_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_CalculateOrder_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\CalculateOrderInfo
   */
  public $order = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'order',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CalculateOrderInfo',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['order'])) {
        $this->order = $vals['order'];
      }
    }
  }

  public function getName() {
    return 'APIService_CalculateOrder_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->order = new \Workabox\API\CalculateOrderInfo();
            $xfer += $this->order->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_CalculateOrder_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->order !== null) {
      if (!is_object($this->order)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('order', TType::STRUCT, 2);
      $xfer += $this->order->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_CalculateOrder_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\CalculateOrderInfo
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CalculateOrderInfo',
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_CalculateOrder_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \Workabox\API\CalculateOrderInfo();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_CalculateOrder_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_CompleteSale_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var int
   */
  public $saleID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'saleID',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['saleID'])) {
        $this->saleID = $vals['saleID'];
      }
    }
  }

  public function getName() {
    return 'APIService_CompleteSale_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->saleID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_CompleteSale_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->saleID !== null) {
      $xfer += $output->writeFieldBegin('saleID', TType::I32, 2);
      $xfer += $output->writeI32($this->saleID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_CompleteSale_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_CompleteSale_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_CompleteSale_result');
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportUserCatalog_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\UserCatalog
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\UserCatalog',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportUserCatalog_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\UserCatalog();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportUserCatalog_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportUserCatalog_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportUserCatalog_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportUserCatalog_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportUserCatalog_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\UserCatalogFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\UserCatalogFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportUserCatalog_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\UserCatalogFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportUserCatalog_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportUserCatalog_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\UserCatalog[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\UserCatalog',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportUserCatalog_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1134 = 0;
            $_etype1137 = 0;
            $xfer += $input->readListBegin($_etype1137, $_size1134);
            for ($_i1138 = 0; $_i1138 < $_size1134; ++$_i1138)
            {
              $elem1139 = null;
              $elem1139 = new \Workabox\API\UserCatalog();
              $xfer += $elem1139->read($input);
              $this->success []= $elem1139;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportUserCatalog_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1140)
          {
            $xfer += $iter1140->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportGoods_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\Goods
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\Goods',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportGoods_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\Goods();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportGoods_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportGoods_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportGoods_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportGoods_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoods_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\GoodsFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\GoodsFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoods_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\GoodsFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoods_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoods_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\Goods[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\Goods',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoods_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1141 = 0;
            $_etype1144 = 0;
            $xfer += $input->readListBegin($_etype1144, $_size1141);
            for ($_i1145 = 0; $_i1145 < $_size1141; ++$_i1145)
            {
              $elem1146 = null;
              $elem1146 = new \Workabox\API\Goods();
              $xfer += $elem1146->read($input);
              $this->success []= $elem1146;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoods_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1147)
          {
            $xfer += $iter1147->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportService_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\Service
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\Service',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportService_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\Service();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportService_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportService_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportService_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportService_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportService_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\ServiceFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ServiceFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportService_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\ServiceFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportService_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportService_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\Service[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\Service',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportService_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1148 = 0;
            $_etype1151 = 0;
            $xfer += $input->readListBegin($_etype1151, $_size1148);
            for ($_i1152 = 0; $_i1152 < $_size1148; ++$_i1152)
            {
              $elem1153 = null;
              $elem1153 = new \Workabox\API\Service();
              $xfer += $elem1153->read($input);
              $this->success []= $elem1153;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportService_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1154)
          {
            $xfer += $iter1154->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportMoneyFacilitiesType_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\MoneyFacilitiesType
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\MoneyFacilitiesType',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportMoneyFacilitiesType_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\MoneyFacilitiesType();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportMoneyFacilitiesType_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportMoneyFacilitiesType_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportMoneyFacilitiesType_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportMoneyFacilitiesType_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportMoneyFacilitiesType_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\MoneyFacilitiesTypeFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\MoneyFacilitiesTypeFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportMoneyFacilitiesType_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\MoneyFacilitiesTypeFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportMoneyFacilitiesType_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportMoneyFacilitiesType_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\MoneyFacilitiesType[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\MoneyFacilitiesType',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportMoneyFacilitiesType_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1155 = 0;
            $_etype1158 = 0;
            $xfer += $input->readListBegin($_etype1158, $_size1155);
            for ($_i1159 = 0; $_i1159 < $_size1155; ++$_i1159)
            {
              $elem1160 = null;
              $elem1160 = new \Workabox\API\MoneyFacilitiesType();
              $xfer += $elem1160->read($input);
              $this->success []= $elem1160;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportMoneyFacilitiesType_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1161)
          {
            $xfer += $iter1161->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportPriceList_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\PriceList
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\PriceList',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportPriceList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\PriceList();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportPriceList_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportPriceList_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportPriceList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportPriceList_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportPriceList_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\PriceListFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\PriceListFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportPriceList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\PriceListFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportPriceList_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportPriceList_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\PriceList[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\PriceList',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportPriceList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1162 = 0;
            $_etype1165 = 0;
            $xfer += $input->readListBegin($_etype1165, $_size1162);
            for ($_i1166 = 0; $_i1166 < $_size1162; ++$_i1166)
            {
              $elem1167 = null;
              $elem1167 = new \Workabox\API\PriceList();
              $xfer += $elem1167->read($input);
              $this->success []= $elem1167;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportPriceList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1168)
          {
            $xfer += $iter1168->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportSupplier_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\Supplier
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\Supplier',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportSupplier_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\Supplier();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportSupplier_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportSupplier_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportSupplier_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportSupplier_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportSupplier_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\SupplierFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\SupplierFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportSupplier_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\SupplierFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportSupplier_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportSupplier_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\Supplier[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\Supplier',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportSupplier_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1169 = 0;
            $_etype1172 = 0;
            $xfer += $input->readListBegin($_etype1172, $_size1169);
            for ($_i1173 = 0; $_i1173 < $_size1169; ++$_i1173)
            {
              $elem1174 = null;
              $elem1174 = new \Workabox\API\Supplier();
              $xfer += $elem1174->read($input);
              $this->success []= $elem1174;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportSupplier_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1175)
          {
            $xfer += $iter1175->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportOffice_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\Office
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\Office',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportOffice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\Office();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportOffice_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportOffice_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportOffice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportOffice_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportOffice_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\OfficeFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\OfficeFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportOffice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\OfficeFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportOffice_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportOffice_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\Office[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\Office',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportOffice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1176 = 0;
            $_etype1179 = 0;
            $xfer += $input->readListBegin($_etype1179, $_size1176);
            for ($_i1180 = 0; $_i1180 < $_size1176; ++$_i1180)
            {
              $elem1181 = null;
              $elem1181 = new \Workabox\API\Office();
              $xfer += $elem1181->read($input);
              $this->success []= $elem1181;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportOffice_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1182)
          {
            $xfer += $iter1182->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportStock_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\Stock
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\Stock',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportStock_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\Stock();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportStock_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportStock_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportStock_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportStock_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportStock_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\StockFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\StockFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportStock_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\StockFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportStock_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportStock_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\Stock[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\Stock',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportStock_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1183 = 0;
            $_etype1186 = 0;
            $xfer += $input->readListBegin($_etype1186, $_size1183);
            for ($_i1187 = 0; $_i1187 < $_size1183; ++$_i1187)
            {
              $elem1188 = null;
              $elem1188 = new \Workabox\API\Stock();
              $xfer += $elem1188->read($input);
              $this->success []= $elem1188;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportStock_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1189)
          {
            $xfer += $iter1189->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportRTT_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\RTT
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\RTT',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportRTT_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\RTT();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportRTT_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportRTT_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportRTT_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportRTT_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportRTT_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\RTTFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\RTTFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportRTT_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\RTTFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportRTT_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportRTT_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\RTT[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\RTT',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportRTT_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1190 = 0;
            $_etype1193 = 0;
            $xfer += $input->readListBegin($_etype1193, $_size1190);
            for ($_i1194 = 0; $_i1194 < $_size1190; ++$_i1194)
            {
              $elem1195 = null;
              $elem1195 = new \Workabox\API\RTT();
              $xfer += $elem1195->read($input);
              $this->success []= $elem1195;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportRTT_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1196)
          {
            $xfer += $iter1196->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportCashDeskRTT_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\CashDeskRTT
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CashDeskRTT',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportCashDeskRTT_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\CashDeskRTT();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportCashDeskRTT_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportCashDeskRTT_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportCashDeskRTT_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportCashDeskRTT_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportCashDeskRTT_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\CashDeskRTTFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CashDeskRTTFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportCashDeskRTT_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\CashDeskRTTFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportCashDeskRTT_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportCashDeskRTT_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\CashDeskRTT[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\CashDeskRTT',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportCashDeskRTT_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1197 = 0;
            $_etype1200 = 0;
            $xfer += $input->readListBegin($_etype1200, $_size1197);
            for ($_i1201 = 0; $_i1201 < $_size1197; ++$_i1201)
            {
              $elem1202 = null;
              $elem1202 = new \Workabox\API\CashDeskRTT();
              $xfer += $elem1202->read($input);
              $this->success []= $elem1202;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportCashDeskRTT_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1203)
          {
            $xfer += $iter1203->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportEmployee_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\Employee
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\Employee',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportEmployee_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\Employee();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportEmployee_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportEmployee_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportEmployee_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportEmployee_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportEmployee_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\EmployeeFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\EmployeeFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportEmployee_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\EmployeeFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportEmployee_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportEmployee_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\Employee[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\Employee',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportEmployee_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1204 = 0;
            $_etype1207 = 0;
            $xfer += $input->readListBegin($_etype1207, $_size1204);
            for ($_i1208 = 0; $_i1208 < $_size1204; ++$_i1208)
            {
              $elem1209 = null;
              $elem1209 = new \Workabox\API\Employee();
              $xfer += $elem1209->read($input);
              $this->success []= $elem1209;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportEmployee_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1210)
          {
            $xfer += $iter1210->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportBank_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\Bank
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\Bank',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportBank_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\Bank();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportBank_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportBank_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportBank_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportBank_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportBank_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\BankFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\BankFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportBank_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\BankFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportBank_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportBank_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\Bank[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\Bank',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportBank_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1211 = 0;
            $_etype1214 = 0;
            $xfer += $input->readListBegin($_etype1214, $_size1211);
            for ($_i1215 = 0; $_i1215 < $_size1211; ++$_i1215)
            {
              $elem1216 = null;
              $elem1216 = new \Workabox\API\Bank();
              $xfer += $elem1216->read($input);
              $this->success []= $elem1216;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportBank_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1217)
          {
            $xfer += $iter1217->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportAccount_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\Account
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\Account',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportAccount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\Account();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportAccount_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportAccount_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportAccount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportAccount_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportAccount_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\AccountFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\AccountFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportAccount_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\AccountFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportAccount_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportAccount_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\Account[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\Account',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportAccount_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1218 = 0;
            $_etype1221 = 0;
            $xfer += $input->readListBegin($_etype1221, $_size1218);
            for ($_i1222 = 0; $_i1222 < $_size1218; ++$_i1222)
            {
              $elem1223 = null;
              $elem1223 = new \Workabox\API\Account();
              $xfer += $elem1223->read($input);
              $this->success []= $elem1223;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportAccount_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1224)
          {
            $xfer += $iter1224->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportCashDesk_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\CashDesk
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CashDesk',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportCashDesk_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\CashDesk();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportCashDesk_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportCashDesk_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportCashDesk_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportCashDesk_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportCashDesk_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\CashDeskFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CashDeskFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportCashDesk_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\CashDeskFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportCashDesk_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportCashDesk_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\CashDesk[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\CashDesk',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportCashDesk_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1225 = 0;
            $_etype1228 = 0;
            $xfer += $input->readListBegin($_etype1228, $_size1225);
            for ($_i1229 = 0; $_i1229 < $_size1225; ++$_i1229)
            {
              $elem1230 = null;
              $elem1230 = new \Workabox\API\CashDesk();
              $xfer += $elem1230->read($input);
              $this->success []= $elem1230;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportCashDesk_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1231)
          {
            $xfer += $iter1231->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportMarketingInstrumentType_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\MarketingInstrumentType
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\MarketingInstrumentType',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportMarketingInstrumentType_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\MarketingInstrumentType();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportMarketingInstrumentType_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportMarketingInstrumentType_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportMarketingInstrumentType_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportMarketingInstrumentType_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportMarketingInstrumentType_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\MarketingInstrumentTypeFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\MarketingInstrumentTypeFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportMarketingInstrumentType_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\MarketingInstrumentTypeFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportMarketingInstrumentType_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportMarketingInstrumentType_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\MarketingInstrumentType[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\MarketingInstrumentType',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportMarketingInstrumentType_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1232 = 0;
            $_etype1235 = 0;
            $xfer += $input->readListBegin($_etype1235, $_size1232);
            for ($_i1236 = 0; $_i1236 < $_size1232; ++$_i1236)
            {
              $elem1237 = null;
              $elem1237 = new \Workabox\API\MarketingInstrumentType();
              $xfer += $elem1237->read($input);
              $this->success []= $elem1237;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportMarketingInstrumentType_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1238)
          {
            $xfer += $iter1238->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportActualizingMI_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\ActualizingMI
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ActualizingMI',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportActualizingMI_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\ActualizingMI();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportActualizingMI_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportActualizingMI_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportActualizingMI_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportActualizingMI_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportActualizingMI_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\ActualizingMIFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ActualizingMIFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportActualizingMI_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\ActualizingMIFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportActualizingMI_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportActualizingMI_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\ActualizingMI[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ActualizingMI',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportActualizingMI_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1239 = 0;
            $_etype1242 = 0;
            $xfer += $input->readListBegin($_etype1242, $_size1239);
            for ($_i1243 = 0; $_i1243 < $_size1239; ++$_i1243)
            {
              $elem1244 = null;
              $elem1244 = new \Workabox\API\ActualizingMI();
              $xfer += $elem1244->read($input);
              $this->success []= $elem1244;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportActualizingMI_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1245)
          {
            $xfer += $iter1245->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportCustomerNaturalPerson_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\CustomerNaturalPerson
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CustomerNaturalPerson',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportCustomerNaturalPerson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\CustomerNaturalPerson();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportCustomerNaturalPerson_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportCustomerNaturalPerson_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportCustomerNaturalPerson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportCustomerNaturalPerson_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportCustomerNaturalPerson_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\CustomerNaturalPersonFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CustomerNaturalPersonFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportCustomerNaturalPerson_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\CustomerNaturalPersonFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportCustomerNaturalPerson_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportCustomerNaturalPerson_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\CustomerNaturalPerson[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\CustomerNaturalPerson',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportCustomerNaturalPerson_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1246 = 0;
            $_etype1249 = 0;
            $xfer += $input->readListBegin($_etype1249, $_size1246);
            for ($_i1250 = 0; $_i1250 < $_size1246; ++$_i1250)
            {
              $elem1251 = null;
              $elem1251 = new \Workabox\API\CustomerNaturalPerson();
              $xfer += $elem1251->read($input);
              $this->success []= $elem1251;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportCustomerNaturalPerson_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1252)
          {
            $xfer += $iter1252->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportGoodsIncome_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\GoodsIncome
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\GoodsIncome',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportGoodsIncome_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\GoodsIncome();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportGoodsIncome_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportGoodsIncome_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportGoodsIncome_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportGoodsIncome_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsIncome_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\GoodsIncomeFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\GoodsIncomeFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsIncome_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\GoodsIncomeFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsIncome_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsIncome_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\GoodsIncome[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsIncome',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsIncome_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1253 = 0;
            $_etype1256 = 0;
            $xfer += $input->readListBegin($_etype1256, $_size1253);
            for ($_i1257 = 0; $_i1257 < $_size1253; ++$_i1257)
            {
              $elem1258 = null;
              $elem1258 = new \Workabox\API\GoodsIncome();
              $xfer += $elem1258->read($input);
              $this->success []= $elem1258;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsIncome_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1259)
          {
            $xfer += $iter1259->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportGoodsMove_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\GoodsMove
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\GoodsMove',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportGoodsMove_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\GoodsMove();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportGoodsMove_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportGoodsMove_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportGoodsMove_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportGoodsMove_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsMove_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\GoodsMoveFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\GoodsMoveFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsMove_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\GoodsMoveFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsMove_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsMove_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\GoodsMove[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsMove',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsMove_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1260 = 0;
            $_etype1263 = 0;
            $xfer += $input->readListBegin($_etype1263, $_size1260);
            for ($_i1264 = 0; $_i1264 < $_size1260; ++$_i1264)
            {
              $elem1265 = null;
              $elem1265 = new \Workabox\API\GoodsMove();
              $xfer += $elem1265->read($input);
              $this->success []= $elem1265;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsMove_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1266)
          {
            $xfer += $iter1266->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportGoodsReturn_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\GoodsReturn
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\GoodsReturn',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportGoodsReturn_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\GoodsReturn();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportGoodsReturn_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportGoodsReturn_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportGoodsReturn_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportGoodsReturn_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsReturn_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\GoodsReturnFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\GoodsReturnFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsReturn_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\GoodsReturnFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsReturn_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsReturn_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\GoodsReturn[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsReturn',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsReturn_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1267 = 0;
            $_etype1270 = 0;
            $xfer += $input->readListBegin($_etype1270, $_size1267);
            for ($_i1271 = 0; $_i1271 < $_size1267; ++$_i1271)
            {
              $elem1272 = null;
              $elem1272 = new \Workabox\API\GoodsReturn();
              $xfer += $elem1272->read($input);
              $this->success []= $elem1272;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsReturn_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1273)
          {
            $xfer += $iter1273->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportGoodsDebit_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\GoodsDebit
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\GoodsDebit',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportGoodsDebit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\GoodsDebit();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportGoodsDebit_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportGoodsDebit_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportGoodsDebit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportGoodsDebit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsDebit_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\GoodsDebitFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\GoodsDebitFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsDebit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\GoodsDebitFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsDebit_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportGoodsDebit_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\GoodsDebit[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\GoodsDebit',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportGoodsDebit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1274 = 0;
            $_etype1277 = 0;
            $xfer += $input->readListBegin($_etype1277, $_size1274);
            for ($_i1278 = 0; $_i1278 < $_size1274; ++$_i1278)
            {
              $elem1279 = null;
              $elem1279 = new \Workabox\API\GoodsDebit();
              $xfer += $elem1279->read($input);
              $this->success []= $elem1279;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportGoodsDebit_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1280)
          {
            $xfer += $iter1280->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportRetailSale_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\RetailSale
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\RetailSale',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportRetailSale_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\RetailSale();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportRetailSale_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportRetailSale_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportRetailSale_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportRetailSale_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportRetailSale_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\RetailSaleFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\RetailSaleFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportRetailSale_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\RetailSaleFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportRetailSale_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportRetailSale_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\RetailSale[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\RetailSale',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportRetailSale_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1281 = 0;
            $_etype1284 = 0;
            $xfer += $input->readListBegin($_etype1284, $_size1281);
            for ($_i1285 = 0; $_i1285 < $_size1281; ++$_i1285)
            {
              $elem1286 = null;
              $elem1286 = new \Workabox\API\RetailSale();
              $xfer += $elem1286->read($input);
              $this->success []= $elem1286;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportRetailSale_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1287)
          {
            $xfer += $iter1287->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportCustomerOrder_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\CustomerOrder
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CustomerOrder',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportCustomerOrder_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\CustomerOrder();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportCustomerOrder_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportCustomerOrder_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportCustomerOrder_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportCustomerOrder_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportCustomerOrder_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\CustomerOrderFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CustomerOrderFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportCustomerOrder_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\CustomerOrderFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportCustomerOrder_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportCustomerOrder_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\CustomerOrder[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\CustomerOrder',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportCustomerOrder_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1288 = 0;
            $_etype1291 = 0;
            $xfer += $input->readListBegin($_etype1291, $_size1288);
            for ($_i1292 = 0; $_i1292 < $_size1288; ++$_i1292)
            {
              $elem1293 = null;
              $elem1293 = new \Workabox\API\CustomerOrder();
              $xfer += $elem1293->read($input);
              $this->success []= $elem1293;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportCustomerOrder_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1294)
          {
            $xfer += $iter1294->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportCustomerReturn_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\CustomerReturn
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CustomerReturn',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportCustomerReturn_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\CustomerReturn();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportCustomerReturn_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportCustomerReturn_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportCustomerReturn_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportCustomerReturn_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportCustomerReturn_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\CustomerReturnFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\CustomerReturnFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportCustomerReturn_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\CustomerReturnFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportCustomerReturn_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportCustomerReturn_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\CustomerReturn[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\CustomerReturn',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportCustomerReturn_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1295 = 0;
            $_etype1298 = 0;
            $xfer += $input->readListBegin($_etype1298, $_size1295);
            for ($_i1299 = 0; $_i1299 < $_size1295; ++$_i1299)
            {
              $elem1300 = null;
              $elem1300 = new \Workabox\API\CustomerReturn();
              $xfer += $elem1300->read($input);
              $this->success []= $elem1300;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportCustomerReturn_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1301)
          {
            $xfer += $iter1301->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportOrderDocOut_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\OrderDocOut
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\OrderDocOut',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportOrderDocOut_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\OrderDocOut();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportOrderDocOut_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportOrderDocOut_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportOrderDocOut_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportOrderDocOut_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportOrderDocOut_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\OrderDocOutFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\OrderDocOutFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportOrderDocOut_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\OrderDocOutFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportOrderDocOut_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportOrderDocOut_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\OrderDocOut[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OrderDocOut',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportOrderDocOut_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1302 = 0;
            $_etype1305 = 0;
            $xfer += $input->readListBegin($_etype1305, $_size1302);
            for ($_i1306 = 0; $_i1306 < $_size1302; ++$_i1306)
            {
              $elem1307 = null;
              $elem1307 = new \Workabox\API\OrderDocOut();
              $xfer += $elem1307->read($input);
              $this->success []= $elem1307;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportOrderDocOut_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1308)
          {
            $xfer += $iter1308->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportOrderDocInner_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\OrderDocInner
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\OrderDocInner',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportOrderDocInner_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\OrderDocInner();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportOrderDocInner_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportOrderDocInner_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportOrderDocInner_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportOrderDocInner_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportOrderDocInner_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\OrderDocInnerFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\OrderDocInnerFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportOrderDocInner_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\OrderDocInnerFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportOrderDocInner_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportOrderDocInner_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\OrderDocInner[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\OrderDocInner',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportOrderDocInner_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1309 = 0;
            $_etype1312 = 0;
            $xfer += $input->readListBegin($_etype1312, $_size1309);
            for ($_i1313 = 0; $_i1313 < $_size1309; ++$_i1313)
            {
              $elem1314 = null;
              $elem1314 = new \Workabox\API\OrderDocInner();
              $xfer += $elem1314->read($input);
              $this->success []= $elem1314;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportOrderDocInner_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1315)
          {
            $xfer += $iter1315->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportInventory_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\Inventory
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\Inventory',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportInventory_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\Inventory();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportInventory_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportInventory_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportInventory_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportInventory_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportInventory_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\InventoryFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\InventoryFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportInventory_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\InventoryFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportInventory_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportInventory_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\Inventory[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\Inventory',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportInventory_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1316 = 0;
            $_etype1319 = 0;
            $xfer += $input->readListBegin($_etype1319, $_size1316);
            for ($_i1320 = 0; $_i1320 < $_size1316; ++$_i1320)
            {
              $elem1321 = null;
              $elem1321 = new \Workabox\API\Inventory();
              $xfer += $elem1321->read($input);
              $this->success []= $elem1321;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportInventory_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1322)
          {
            $xfer += $iter1322->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportMoneyMovementIn_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\MoneyMovementIn
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\MoneyMovementIn',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportMoneyMovementIn_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\MoneyMovementIn();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportMoneyMovementIn_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportMoneyMovementIn_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportMoneyMovementIn_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportMoneyMovementIn_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportMoneyMovementIn_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\MoneyMovementInFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\MoneyMovementInFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportMoneyMovementIn_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\MoneyMovementInFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportMoneyMovementIn_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportMoneyMovementIn_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\MoneyMovementIn[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\MoneyMovementIn',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportMoneyMovementIn_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1323 = 0;
            $_etype1326 = 0;
            $xfer += $input->readListBegin($_etype1326, $_size1323);
            for ($_i1327 = 0; $_i1327 < $_size1323; ++$_i1327)
            {
              $elem1328 = null;
              $elem1328 = new \Workabox\API\MoneyMovementIn();
              $xfer += $elem1328->read($input);
              $this->success []= $elem1328;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportMoneyMovementIn_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1329)
          {
            $xfer += $iter1329->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportMoneyMovementOut_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\MoneyMovementOut
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\MoneyMovementOut',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportMoneyMovementOut_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\MoneyMovementOut();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportMoneyMovementOut_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportMoneyMovementOut_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportMoneyMovementOut_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportMoneyMovementOut_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportMoneyMovementOut_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\MoneyMovementOutFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\MoneyMovementOutFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportMoneyMovementOut_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\MoneyMovementOutFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportMoneyMovementOut_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportMoneyMovementOut_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\MoneyMovementOut[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\MoneyMovementOut',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportMoneyMovementOut_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1330 = 0;
            $_etype1333 = 0;
            $xfer += $input->readListBegin($_etype1333, $_size1330);
            for ($_i1334 = 0; $_i1334 < $_size1330; ++$_i1334)
            {
              $elem1335 = null;
              $elem1335 = new \Workabox\API\MoneyMovementOut();
              $xfer += $elem1335->read($input);
              $this->success []= $elem1335;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportMoneyMovementOut_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1336)
          {
            $xfer += $iter1336->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportMoneyMovementInner_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\MoneyMovementInner
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\MoneyMovementInner',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportMoneyMovementInner_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\MoneyMovementInner();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportMoneyMovementInner_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportMoneyMovementInner_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportMoneyMovementInner_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportMoneyMovementInner_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportMoneyMovementInner_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\MoneyMovementInnerFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\MoneyMovementInnerFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportMoneyMovementInner_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\MoneyMovementInnerFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportMoneyMovementInner_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportMoneyMovementInner_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\MoneyMovementInner[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\MoneyMovementInner',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportMoneyMovementInner_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1337 = 0;
            $_etype1340 = 0;
            $xfer += $input->readListBegin($_etype1340, $_size1337);
            for ($_i1341 = 0; $_i1341 < $_size1337; ++$_i1341)
            {
              $elem1342 = null;
              $elem1342 = new \Workabox\API\MoneyMovementInner();
              $xfer += $elem1342->read($input);
              $this->success []= $elem1342;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportMoneyMovementInner_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1343)
          {
            $xfer += $iter1343->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportRoutings_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\Routings
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\Routings',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportRoutings_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\Routings();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportRoutings_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportRoutings_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportRoutings_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportRoutings_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportRoutings_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\RoutingsFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\RoutingsFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportRoutings_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\RoutingsFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportRoutings_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportRoutings_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\Routings[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\Routings',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportRoutings_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1344 = 0;
            $_etype1347 = 0;
            $xfer += $input->readListBegin($_etype1347, $_size1344);
            for ($_i1348 = 0; $_i1348 < $_size1344; ++$_i1348)
            {
              $elem1349 = null;
              $elem1349 = new \Workabox\API\Routings();
              $xfer += $elem1349->read($input);
              $this->success []= $elem1349;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportRoutings_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1350)
          {
            $xfer += $iter1350->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportProductionOperations_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var \Workabox\API\ProductionOperations
   */
  public $importdata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'importdata',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ProductionOperations',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['importdata'])) {
        $this->importdata = $vals['importdata'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportProductionOperations_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->importdata = new \Workabox\API\ProductionOperations();
            $xfer += $this->importdata->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportProductionOperations_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->importdata !== null) {
      if (!is_object($this->importdata)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('importdata', TType::STRUCT, 2);
      $xfer += $this->importdata->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ImportProductionOperations_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ImportProductionOperations_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ImportProductionOperations_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportProductionOperations_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $apiKey = null;
  /**
   * @var string
   */
  public $date = null;
  /**
   * @var \Workabox\API\ProductionOperationsFilter
   */
  public $filter = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'apiKey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'filter',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\ProductionOperationsFilter',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['apiKey'])) {
        $this->apiKey = $vals['apiKey'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['filter'])) {
        $this->filter = $vals['filter'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportProductionOperations_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->apiKey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->filter = new \Workabox\API\ProductionOperationsFilter();
            $xfer += $this->filter->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportProductionOperations_args');
    if ($this->apiKey !== null) {
      $xfer += $output->writeFieldBegin('apiKey', TType::STRING, 1);
      $xfer += $output->writeString($this->apiKey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 2);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filter !== null) {
      if (!is_object($this->filter)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filter', TType::STRUCT, 3);
      $xfer += $this->filter->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class APIService_ExportProductionOperations_result {
  static $_TSPEC;

  /**
   * @var \Workabox\API\ProductionOperations[]
   */
  public $success = null;
  /**
   * @var \Workabox\API\APIException
   */
  public $ex = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ProductionOperations',
            ),
          ),
        1 => array(
          'var' => 'ex',
          'type' => TType::STRUCT,
          'class' => '\Workabox\API\APIException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ex'])) {
        $this->ex = $vals['ex'];
      }
    }
  }

  public function getName() {
    return 'APIService_ExportProductionOperations_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size1351 = 0;
            $_etype1354 = 0;
            $xfer += $input->readListBegin($_etype1354, $_size1351);
            for ($_i1355 = 0; $_i1355 < $_size1351; ++$_i1355)
            {
              $elem1356 = null;
              $elem1356 = new \Workabox\API\ProductionOperations();
              $xfer += $elem1356->read($input);
              $this->success []= $elem1356;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->ex = new \Workabox\API\APIException();
            $xfer += $this->ex->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('APIService_ExportProductionOperations_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter1357)
          {
            $xfer += $iter1357->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ex !== null) {
      $xfer += $output->writeFieldBegin('ex', TType::STRUCT, 1);
      $xfer += $this->ex->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}



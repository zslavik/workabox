<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Goods
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'OuterID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'ObjectName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'Ref',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'Fraction',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'BarCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        7 => array(
            'var' => 'GoodsGroup',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        8 => array(
            'var' => 'ModelName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'PLU',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        10 => array(
            'var' => 'GoodsFullName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'ObjectOwner',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        12 => array(
            'var' => 'CodesSuppliers',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\CodesSuppliersLine',
                ),
        ),
        13 => array(
            'var' => 'TaxRate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'QRLink',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'RelatedGoods',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        16 => array(
            'var' => 'Modificators',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'GoodsPrices',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\GoodsPricesLine',
                ),
        ),
        18 => array(
            'var' => 'GoodsImages',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\GoodsImagesLine',
                ),
        ),
        19 => array(
            'var' => 'UrlPreview',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        20 => array(
            'var' => 'OuterCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\OuterCodesLine',
                ),
        ),
        21 => array(
            'var' => 'UserStrings',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserStringsLine',
                ),
        ),
        22 => array(
            'var' => 'UserLongStrings',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserLongStringsLine',
                ),
        ),
        23 => array(
            'var' => 'UserDates',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserDatesLine',
                ),
        ),
        24 => array(
            'var' => 'UserNumbers',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserNumbersLine',
                ),
        ),
        25 => array(
            'var' => 'UserCatalogs',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserCatalogsLine',
                ),
        ),
        26 => array(
            'var' => 'UserCatalogsView',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\UserCatalogsViewLine',
                ),
        ),
        27 => array(
            'var' => 'StateGoods',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        28 => array(
            'var' => 'GoodsModelsSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        29 => array(
            'var' => 'AnalogsGoodsSlave',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        30 => array(
            'var' => 'GoodsModelsMaster',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
        31 => array(
            'var' => 'AnalogsGoodsMaster',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\ObjectID',
                ),
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $OuterID = null;
    /**
     * @var string
     */
    public $ObjectName = null;
    /**
     * @var string[]
     */
    public $Ref = null;
    /**
     * @var string
     */
    public $Fraction = null;
    /**
     * @var string[]
     */
    public $BarCodes = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $GoodsGroup = null;
    /**
     * @var string
     */
    public $ModelName = null;
    /**
     * @var int
     */
    public $PLU = null;
    /**
     * @var string
     */
    public $GoodsFullName = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $ObjectOwner = null;
    /**
     * @var \Workabox\API\CodesSuppliersLine[]
     */
    public $CodesSuppliers = null;
    /**
     * @var string
     */
    public $TaxRate = null;
    /**
     * @var string
     */
    public $QRLink = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $RelatedGoods = null;
    /**
     * @var string
     */
    public $Modificators = null;
    /**
     * @var \Workabox\API\GoodsPricesLine[]
     */
    public $GoodsPrices = null;
    /**
     * @var \Workabox\API\GoodsImagesLine[]
     */
    public $GoodsImages = null;
    /**
     * @var string
     */
    public $UrlPreview = null;
    /**
     * @var \Workabox\API\OuterCodesLine[]
     */
    public $OuterCodes = null;
    /**
     * @var \Workabox\API\UserStringsLine[]
     */
    public $UserStrings = null;
    /**
     * @var \Workabox\API\UserLongStringsLine[]
     */
    public $UserLongStrings = null;
    /**
     * @var \Workabox\API\UserDatesLine[]
     */
    public $UserDates = null;
    /**
     * @var \Workabox\API\UserNumbersLine[]
     */
    public $UserNumbers = null;
    /**
     * @var \Workabox\API\UserCatalogsLine[]
     */
    public $UserCatalogs = null;
    /**
     * @var \Workabox\API\UserCatalogsViewLine[]
     */
    public $UserCatalogsView = null;
    /**
     * @var string
     */
    public $StateGoods = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $GoodsModelsSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $AnalogsGoodsSlave = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $GoodsModelsMaster = null;
    /**
     * @var \Workabox\API\ObjectID[]
     */
    public $AnalogsGoodsMaster = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['OuterID'])) {
                $this->OuterID = $vals['OuterID'];
            }
            if (isset($vals['ObjectName'])) {
                $this->ObjectName = $vals['ObjectName'];
            }
            if (isset($vals['Ref'])) {
                $this->Ref = $vals['Ref'];
            }
            if (isset($vals['Fraction'])) {
                $this->Fraction = $vals['Fraction'];
            }
            if (isset($vals['BarCodes'])) {
                $this->BarCodes = $vals['BarCodes'];
            }
            if (isset($vals['GoodsGroup'])) {
                $this->GoodsGroup = $vals['GoodsGroup'];
            }
            if (isset($vals['ModelName'])) {
                $this->ModelName = $vals['ModelName'];
            }
            if (isset($vals['PLU'])) {
                $this->PLU = $vals['PLU'];
            }
            if (isset($vals['GoodsFullName'])) {
                $this->GoodsFullName = $vals['GoodsFullName'];
            }
            if (isset($vals['ObjectOwner'])) {
                $this->ObjectOwner = $vals['ObjectOwner'];
            }
            if (isset($vals['CodesSuppliers'])) {
                $this->CodesSuppliers = $vals['CodesSuppliers'];
            }
            if (isset($vals['TaxRate'])) {
                $this->TaxRate = $vals['TaxRate'];
            }
            if (isset($vals['QRLink'])) {
                $this->QRLink = $vals['QRLink'];
            }
            if (isset($vals['RelatedGoods'])) {
                $this->RelatedGoods = $vals['RelatedGoods'];
            }
            if (isset($vals['Modificators'])) {
                $this->Modificators = $vals['Modificators'];
            }
            if (isset($vals['GoodsPrices'])) {
                $this->GoodsPrices = $vals['GoodsPrices'];
            }
            if (isset($vals['GoodsImages'])) {
                $this->GoodsImages = $vals['GoodsImages'];
            }
            if (isset($vals['UrlPreview'])) {
                $this->UrlPreview = $vals['UrlPreview'];
            }
            if (isset($vals['OuterCodes'])) {
                $this->OuterCodes = $vals['OuterCodes'];
            }
            if (isset($vals['UserStrings'])) {
                $this->UserStrings = $vals['UserStrings'];
            }
            if (isset($vals['UserLongStrings'])) {
                $this->UserLongStrings = $vals['UserLongStrings'];
            }
            if (isset($vals['UserDates'])) {
                $this->UserDates = $vals['UserDates'];
            }
            if (isset($vals['UserNumbers'])) {
                $this->UserNumbers = $vals['UserNumbers'];
            }
            if (isset($vals['UserCatalogs'])) {
                $this->UserCatalogs = $vals['UserCatalogs'];
            }
            if (isset($vals['UserCatalogsView'])) {
                $this->UserCatalogsView = $vals['UserCatalogsView'];
            }
            if (isset($vals['StateGoods'])) {
                $this->StateGoods = $vals['StateGoods'];
            }
            if (isset($vals['GoodsModelsSlave'])) {
                $this->GoodsModelsSlave = $vals['GoodsModelsSlave'];
            }
            if (isset($vals['AnalogsGoodsSlave'])) {
                $this->AnalogsGoodsSlave = $vals['AnalogsGoodsSlave'];
            }
            if (isset($vals['GoodsModelsMaster'])) {
                $this->GoodsModelsMaster = $vals['GoodsModelsMaster'];
            }
            if (isset($vals['AnalogsGoodsMaster'])) {
                $this->AnalogsGoodsMaster = $vals['AnalogsGoodsMaster'];
            }
        }
    }

    public function getName()
    {
        return 'Goods';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->OuterID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ObjectName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->Ref = array();
                        $_size21 = 0;
                        $_etype24 = 0;
                        $xfer += $input->readListBegin($_etype24, $_size21);
                        for ($_i25 = 0; $_i25 < $_size21; ++$_i25) {
                            $elem26 = null;
                            $xfer += $input->readString($elem26);
                            $this->Ref []= $elem26;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Fraction);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->BarCodes = array();
                        $_size27 = 0;
                        $_etype30 = 0;
                        $xfer += $input->readListBegin($_etype30, $_size27);
                        for ($_i31 = 0; $_i31 < $_size27; ++$_i31) {
                            $elem32 = null;
                            $xfer += $input->readString($elem32);
                            $this->BarCodes []= $elem32;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRUCT) {
                        $this->GoodsGroup = new \Workabox\API\ObjectID();
                        $xfer += $this->GoodsGroup->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ModelName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->PLU);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->GoodsFullName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRUCT) {
                        $this->ObjectOwner = new \Workabox\API\ObjectID();
                        $xfer += $this->ObjectOwner->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::LST) {
                        $this->CodesSuppliers = array();
                        $_size33 = 0;
                        $_etype36 = 0;
                        $xfer += $input->readListBegin($_etype36, $_size33);
                        for ($_i37 = 0; $_i37 < $_size33; ++$_i37) {
                            $elem38 = null;
                            $elem38 = new \Workabox\API\CodesSuppliersLine();
                            $xfer += $elem38->read($input);
                            $this->CodesSuppliers []= $elem38;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->TaxRate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->QRLink);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::LST) {
                        $this->RelatedGoods = array();
                        $_size39 = 0;
                        $_etype42 = 0;
                        $xfer += $input->readListBegin($_etype42, $_size39);
                        for ($_i43 = 0; $_i43 < $_size39; ++$_i43) {
                            $elem44 = null;
                            $elem44 = new \Workabox\API\ObjectID();
                            $xfer += $elem44->read($input);
                            $this->RelatedGoods []= $elem44;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Modificators);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::LST) {
                        $this->GoodsPrices = array();
                        $_size45 = 0;
                        $_etype48 = 0;
                        $xfer += $input->readListBegin($_etype48, $_size45);
                        for ($_i49 = 0; $_i49 < $_size45; ++$_i49) {
                            $elem50 = null;
                            $elem50 = new \Workabox\API\GoodsPricesLine();
                            $xfer += $elem50->read($input);
                            $this->GoodsPrices []= $elem50;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::LST) {
                        $this->GoodsImages = array();
                        $_size51 = 0;
                        $_etype54 = 0;
                        $xfer += $input->readListBegin($_etype54, $_size51);
                        for ($_i55 = 0; $_i55 < $_size51; ++$_i55) {
                            $elem56 = null;
                            $elem56 = new \Workabox\API\GoodsImagesLine();
                            $xfer += $elem56->read($input);
                            $this->GoodsImages []= $elem56;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->UrlPreview);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::LST) {
                        $this->OuterCodes = array();
                        $_size57 = 0;
                        $_etype60 = 0;
                        $xfer += $input->readListBegin($_etype60, $_size57);
                        for ($_i61 = 0; $_i61 < $_size57; ++$_i61) {
                            $elem62 = null;
                            $elem62 = new \Workabox\API\OuterCodesLine();
                            $xfer += $elem62->read($input);
                            $this->OuterCodes []= $elem62;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::LST) {
                        $this->UserStrings = array();
                        $_size63 = 0;
                        $_etype66 = 0;
                        $xfer += $input->readListBegin($_etype66, $_size63);
                        for ($_i67 = 0; $_i67 < $_size63; ++$_i67) {
                            $elem68 = null;
                            $elem68 = new \Workabox\API\UserStringsLine();
                            $xfer += $elem68->read($input);
                            $this->UserStrings []= $elem68;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::LST) {
                        $this->UserLongStrings = array();
                        $_size69 = 0;
                        $_etype72 = 0;
                        $xfer += $input->readListBegin($_etype72, $_size69);
                        for ($_i73 = 0; $_i73 < $_size69; ++$_i73) {
                            $elem74 = null;
                            $elem74 = new \Workabox\API\UserLongStringsLine();
                            $xfer += $elem74->read($input);
                            $this->UserLongStrings []= $elem74;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 23:
                    if ($ftype == TType::LST) {
                        $this->UserDates = array();
                        $_size75 = 0;
                        $_etype78 = 0;
                        $xfer += $input->readListBegin($_etype78, $_size75);
                        for ($_i79 = 0; $_i79 < $_size75; ++$_i79) {
                            $elem80 = null;
                            $elem80 = new \Workabox\API\UserDatesLine();
                            $xfer += $elem80->read($input);
                            $this->UserDates []= $elem80;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 24:
                    if ($ftype == TType::LST) {
                        $this->UserNumbers = array();
                        $_size81 = 0;
                        $_etype84 = 0;
                        $xfer += $input->readListBegin($_etype84, $_size81);
                        for ($_i85 = 0; $_i85 < $_size81; ++$_i85) {
                            $elem86 = null;
                            $elem86 = new \Workabox\API\UserNumbersLine();
                            $xfer += $elem86->read($input);
                            $this->UserNumbers []= $elem86;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 25:
                    if ($ftype == TType::LST) {
                        $this->UserCatalogs = array();
                        $_size87 = 0;
                        $_etype90 = 0;
                        $xfer += $input->readListBegin($_etype90, $_size87);
                        for ($_i91 = 0; $_i91 < $_size87; ++$_i91) {
                            $elem92 = null;
                            $elem92 = new \Workabox\API\UserCatalogsLine();
                            $xfer += $elem92->read($input);
                            $this->UserCatalogs []= $elem92;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 26:
                    if ($ftype == TType::LST) {
                        $this->UserCatalogsView = array();
                        $_size93 = 0;
                        $_etype96 = 0;
                        $xfer += $input->readListBegin($_etype96, $_size93);
                        for ($_i97 = 0; $_i97 < $_size93; ++$_i97) {
                            $elem98 = null;
                            $elem98 = new \Workabox\API\UserCatalogsViewLine();
                            $xfer += $elem98->read($input);
                            $this->UserCatalogsView []= $elem98;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 27:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->StateGoods);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 28:
                    if ($ftype == TType::LST) {
                        $this->GoodsModelsSlave = array();
                        $_size99 = 0;
                        $_etype102 = 0;
                        $xfer += $input->readListBegin($_etype102, $_size99);
                        for ($_i103 = 0; $_i103 < $_size99; ++$_i103) {
                            $elem104 = null;
                            $elem104 = new \Workabox\API\ObjectID();
                            $xfer += $elem104->read($input);
                            $this->GoodsModelsSlave []= $elem104;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 29:
                    if ($ftype == TType::LST) {
                        $this->AnalogsGoodsSlave = array();
                        $_size105 = 0;
                        $_etype108 = 0;
                        $xfer += $input->readListBegin($_etype108, $_size105);
                        for ($_i109 = 0; $_i109 < $_size105; ++$_i109) {
                            $elem110 = null;
                            $elem110 = new \Workabox\API\ObjectID();
                            $xfer += $elem110->read($input);
                            $this->AnalogsGoodsSlave []= $elem110;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 30:
                    if ($ftype == TType::LST) {
                        $this->GoodsModelsMaster = array();
                        $_size111 = 0;
                        $_etype114 = 0;
                        $xfer += $input->readListBegin($_etype114, $_size111);
                        for ($_i115 = 0; $_i115 < $_size111; ++$_i115) {
                            $elem116 = null;
                            $elem116 = new \Workabox\API\ObjectID();
                            $xfer += $elem116->read($input);
                            $this->GoodsModelsMaster []= $elem116;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 31:
                    if ($ftype == TType::LST) {
                        $this->AnalogsGoodsMaster = array();
                        $_size117 = 0;
                        $_etype120 = 0;
                        $xfer += $input->readListBegin($_etype120, $_size117);
                        for ($_i121 = 0; $_i121 < $_size117; ++$_i121) {
                            $elem122 = null;
                            $elem122 = new \Workabox\API\ObjectID();
                            $xfer += $elem122->read($input);
                            $this->AnalogsGoodsMaster []= $elem122;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Goods');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterID !== null) {
            $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
            $xfer += $output->writeString($this->OuterID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectName !== null) {
            $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 3);
            $xfer += $output->writeString($this->ObjectName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Ref !== null) {
            if (!is_array($this->Ref)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Ref', TType::LST, 4);
            $output->writeListBegin(TType::STRING, count($this->Ref));
            foreach ($this->Ref as $iter123) {
                $xfer += $output->writeString($iter123);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Fraction !== null) {
            $xfer += $output->writeFieldBegin('Fraction', TType::STRING, 5);
            $xfer += $output->writeString($this->Fraction);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->BarCodes !== null) {
            if (!is_array($this->BarCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('BarCodes', TType::LST, 6);
            $output->writeListBegin(TType::STRING, count($this->BarCodes));
            foreach ($this->BarCodes as $iter124) {
                $xfer += $output->writeString($iter124);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsGroup !== null) {
            if (!is_object($this->GoodsGroup)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('GoodsGroup', TType::STRUCT, 7);
            $xfer += $this->GoodsGroup->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ModelName !== null) {
            $xfer += $output->writeFieldBegin('ModelName', TType::STRING, 8);
            $xfer += $output->writeString($this->ModelName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PLU !== null) {
            $xfer += $output->writeFieldBegin('PLU', TType::I32, 9);
            $xfer += $output->writeI32($this->PLU);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsFullName !== null) {
            $xfer += $output->writeFieldBegin('GoodsFullName', TType::STRING, 10);
            $xfer += $output->writeString($this->GoodsFullName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectOwner !== null) {
            if (!is_object($this->ObjectOwner)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 11);
            $xfer += $this->ObjectOwner->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CodesSuppliers !== null) {
            if (!is_array($this->CodesSuppliers)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('CodesSuppliers', TType::LST, 12);
            $output->writeListBegin(TType::STRUCT, count($this->CodesSuppliers));
            foreach ($this->CodesSuppliers as $iter125) {
                $xfer += $iter125->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->TaxRate !== null) {
            $xfer += $output->writeFieldBegin('TaxRate', TType::STRING, 13);
            $xfer += $output->writeString($this->TaxRate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->QRLink !== null) {
            $xfer += $output->writeFieldBegin('QRLink', TType::STRING, 14);
            $xfer += $output->writeString($this->QRLink);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->RelatedGoods !== null) {
            if (!is_array($this->RelatedGoods)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('RelatedGoods', TType::LST, 15);
            $output->writeListBegin(TType::STRUCT, count($this->RelatedGoods));
            foreach ($this->RelatedGoods as $iter126) {
                $xfer += $iter126->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Modificators !== null) {
            $xfer += $output->writeFieldBegin('Modificators', TType::STRING, 16);
            $xfer += $output->writeString($this->Modificators);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsPrices !== null) {
            if (!is_array($this->GoodsPrices)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('GoodsPrices', TType::LST, 17);
            $output->writeListBegin(TType::STRUCT, count($this->GoodsPrices));
            foreach ($this->GoodsPrices as $iter127) {
                $xfer += $iter127->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsImages !== null) {
            if (!is_array($this->GoodsImages)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('GoodsImages', TType::LST, 18);
            $output->writeListBegin(TType::STRUCT, count($this->GoodsImages));
            foreach ($this->GoodsImages as $iter128) {
                $xfer += $iter128->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UrlPreview !== null) {
            $xfer += $output->writeFieldBegin('UrlPreview', TType::STRING, 19);
            $xfer += $output->writeString($this->UrlPreview);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterCodes !== null) {
            if (!is_array($this->OuterCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 20);
            $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
            foreach ($this->OuterCodes as $iter129) {
                $xfer += $iter129->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserStrings !== null) {
            if (!is_array($this->UserStrings)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserStrings', TType::LST, 21);
            $output->writeListBegin(TType::STRUCT, count($this->UserStrings));
            foreach ($this->UserStrings as $iter130) {
                $xfer += $iter130->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserLongStrings !== null) {
            if (!is_array($this->UserLongStrings)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserLongStrings', TType::LST, 22);
            $output->writeListBegin(TType::STRUCT, count($this->UserLongStrings));
            foreach ($this->UserLongStrings as $iter131) {
                $xfer += $iter131->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserDates !== null) {
            if (!is_array($this->UserDates)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserDates', TType::LST, 23);
            $output->writeListBegin(TType::STRUCT, count($this->UserDates));
            foreach ($this->UserDates as $iter132) {
                $xfer += $iter132->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserNumbers !== null) {
            if (!is_array($this->UserNumbers)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserNumbers', TType::LST, 24);
            $output->writeListBegin(TType::STRUCT, count($this->UserNumbers));
            foreach ($this->UserNumbers as $iter133) {
                $xfer += $iter133->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserCatalogs !== null) {
            if (!is_array($this->UserCatalogs)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserCatalogs', TType::LST, 25);
            $output->writeListBegin(TType::STRUCT, count($this->UserCatalogs));
            foreach ($this->UserCatalogs as $iter134) {
                $xfer += $iter134->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->UserCatalogsView !== null) {
            if (!is_array($this->UserCatalogsView)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('UserCatalogsView', TType::LST, 26);
            $output->writeListBegin(TType::STRUCT, count($this->UserCatalogsView));
            foreach ($this->UserCatalogsView as $iter135) {
                $xfer += $iter135->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StateGoods !== null) {
            $xfer += $output->writeFieldBegin('StateGoods', TType::STRING, 27);
            $xfer += $output->writeString($this->StateGoods);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsModelsSlave !== null) {
            if (!is_array($this->GoodsModelsSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('GoodsModelsSlave', TType::LST, 28);
            $output->writeListBegin(TType::STRUCT, count($this->GoodsModelsSlave));
            foreach ($this->GoodsModelsSlave as $iter136) {
                $xfer += $iter136->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->AnalogsGoodsSlave !== null) {
            if (!is_array($this->AnalogsGoodsSlave)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('AnalogsGoodsSlave', TType::LST, 29);
            $output->writeListBegin(TType::STRUCT, count($this->AnalogsGoodsSlave));
            foreach ($this->AnalogsGoodsSlave as $iter137) {
                $xfer += $iter137->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->GoodsModelsMaster !== null) {
            if (!is_array($this->GoodsModelsMaster)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('GoodsModelsMaster', TType::LST, 30);
            $output->writeListBegin(TType::STRUCT, count($this->GoodsModelsMaster));
            foreach ($this->GoodsModelsMaster as $iter138) {
                $xfer += $iter138->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->AnalogsGoodsMaster !== null) {
            if (!is_array($this->AnalogsGoodsMaster)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('AnalogsGoodsMaster', TType::LST, 31);
            $output->writeListBegin(TType::STRUCT, count($this->AnalogsGoodsMaster));
            foreach ($this->AnalogsGoodsMaster as $iter139) {
                $xfer += $iter139->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

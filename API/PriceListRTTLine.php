<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class PriceListRTTLine
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'PriceNotSet',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'CurrentPrice',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        3 => array(
            'var' => 'Price',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        4 => array(
            'var' => 'Goods',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        5 => array(
            'var' => 'Rest',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
    );

    /**
     * @var bool
     */
    public $PriceNotSet = null;
    /**
     * @var double
     */
    public $CurrentPrice = null;
    /**
     * @var double
     */
    public $Price = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $Goods = null;
    /**
     * @var double
     */
    public $Rest = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['PriceNotSet'])) {
                $this->PriceNotSet = $vals['PriceNotSet'];
            }
            if (isset($vals['CurrentPrice'])) {
                $this->CurrentPrice = $vals['CurrentPrice'];
            }
            if (isset($vals['Price'])) {
                $this->Price = $vals['Price'];
            }
            if (isset($vals['Goods'])) {
                $this->Goods = $vals['Goods'];
            }
            if (isset($vals['Rest'])) {
                $this->Rest = $vals['Rest'];
            }
        }
    }

    public function getName()
    {
        return 'PriceListRTTLine';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->PriceNotSet);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->CurrentPrice);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->Price);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::STRUCT) {
                        $this->Goods = new \Workabox\API\ObjectID();
                        $xfer += $this->Goods->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->Rest);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('PriceListRTTLine');
        if ($this->PriceNotSet !== null) {
            $xfer += $output->writeFieldBegin('PriceNotSet', TType::BOOL, 1);
            $xfer += $output->writeBool($this->PriceNotSet);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CurrentPrice !== null) {
            $xfer += $output->writeFieldBegin('CurrentPrice', TType::DOUBLE, 2);
            $xfer += $output->writeDouble($this->CurrentPrice);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Price !== null) {
            $xfer += $output->writeFieldBegin('Price', TType::DOUBLE, 3);
            $xfer += $output->writeDouble($this->Price);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Goods !== null) {
            if (!is_object($this->Goods)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Goods', TType::STRUCT, 4);
            $xfer += $this->Goods->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Rest !== null) {
            $xfer += $output->writeFieldBegin('Rest', TType::DOUBLE, 5);
            $xfer += $output->writeDouble($this->Rest);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

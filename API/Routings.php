<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class Routings
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'OuterID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'ObjectOwner',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        4 => array(
            'var' => 'ProdCost',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        5 => array(
            'var' => 'StoreFinished',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        6 => array(
            'var' => 'StoreMaterials',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Workabox\API\ObjectID',
        ),
        7 => array(
            'var' => 'FinishedGoods',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\FinishedGoodsLine',
                ),
        ),
        8 => array(
            'var' => 'Materials',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\MaterialsLine',
                ),
        ),
        9 => array(
            'var' => 'ObjectName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'OuterCodes',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Workabox\API\OuterCodesLine',
                ),
        ),
        11 => array(
            'var' => 'StateMain',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $OuterID = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $ObjectOwner = null;
    /**
     * @var double
     */
    public $ProdCost = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $StoreFinished = null;
    /**
     * @var \Workabox\API\ObjectID
     */
    public $StoreMaterials = null;
    /**
     * @var \Workabox\API\FinishedGoodsLine[]
     */
    public $FinishedGoods = null;
    /**
     * @var \Workabox\API\MaterialsLine[]
     */
    public $Materials = null;
    /**
     * @var string
     */
    public $ObjectName = null;
    /**
     * @var \Workabox\API\OuterCodesLine[]
     */
    public $OuterCodes = null;
    /**
     * @var string
     */
    public $StateMain = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['OuterID'])) {
                $this->OuterID = $vals['OuterID'];
            }
            if (isset($vals['ObjectOwner'])) {
                $this->ObjectOwner = $vals['ObjectOwner'];
            }
            if (isset($vals['ProdCost'])) {
                $this->ProdCost = $vals['ProdCost'];
            }
            if (isset($vals['StoreFinished'])) {
                $this->StoreFinished = $vals['StoreFinished'];
            }
            if (isset($vals['StoreMaterials'])) {
                $this->StoreMaterials = $vals['StoreMaterials'];
            }
            if (isset($vals['FinishedGoods'])) {
                $this->FinishedGoods = $vals['FinishedGoods'];
            }
            if (isset($vals['Materials'])) {
                $this->Materials = $vals['Materials'];
            }
            if (isset($vals['ObjectName'])) {
                $this->ObjectName = $vals['ObjectName'];
            }
            if (isset($vals['OuterCodes'])) {
                $this->OuterCodes = $vals['OuterCodes'];
            }
            if (isset($vals['StateMain'])) {
                $this->StateMain = $vals['StateMain'];
            }
        }
    }

    public function getName()
    {
        return 'Routings';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->OuterID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRUCT) {
                        $this->ObjectOwner = new \Workabox\API\ObjectID();
                        $xfer += $this->ObjectOwner->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->ProdCost);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRUCT) {
                        $this->StoreFinished = new \Workabox\API\ObjectID();
                        $xfer += $this->StoreFinished->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->StoreMaterials = new \Workabox\API\ObjectID();
                        $xfer += $this->StoreMaterials->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->FinishedGoods = array();
                        $_size917 = 0;
                        $_etype920 = 0;
                        $xfer += $input->readListBegin($_etype920, $_size917);
                        for ($_i921 = 0; $_i921 < $_size917; ++$_i921) {
                            $elem922 = null;
                            $elem922 = new \Workabox\API\FinishedGoodsLine();
                            $xfer += $elem922->read($input);
                            $this->FinishedGoods []= $elem922;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::LST) {
                        $this->Materials = array();
                        $_size923 = 0;
                        $_etype926 = 0;
                        $xfer += $input->readListBegin($_etype926, $_size923);
                        for ($_i927 = 0; $_i927 < $_size923; ++$_i927) {
                            $elem928 = null;
                            $elem928 = new \Workabox\API\MaterialsLine();
                            $xfer += $elem928->read($input);
                            $this->Materials []= $elem928;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->ObjectName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::LST) {
                        $this->OuterCodes = array();
                        $_size929 = 0;
                        $_etype932 = 0;
                        $xfer += $input->readListBegin($_etype932, $_size929);
                        for ($_i933 = 0; $_i933 < $_size929; ++$_i933) {
                            $elem934 = null;
                            $elem934 = new \Workabox\API\OuterCodesLine();
                            $xfer += $elem934->read($input);
                            $this->OuterCodes []= $elem934;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->StateMain);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('Routings');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterID !== null) {
            $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
            $xfer += $output->writeString($this->OuterID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectOwner !== null) {
            if (!is_object($this->ObjectOwner)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('ObjectOwner', TType::STRUCT, 3);
            $xfer += $this->ObjectOwner->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ProdCost !== null) {
            $xfer += $output->writeFieldBegin('ProdCost', TType::DOUBLE, 4);
            $xfer += $output->writeDouble($this->ProdCost);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StoreFinished !== null) {
            if (!is_object($this->StoreFinished)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('StoreFinished', TType::STRUCT, 5);
            $xfer += $this->StoreFinished->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StoreMaterials !== null) {
            if (!is_object($this->StoreMaterials)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('StoreMaterials', TType::STRUCT, 6);
            $xfer += $this->StoreMaterials->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->FinishedGoods !== null) {
            if (!is_array($this->FinishedGoods)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('FinishedGoods', TType::LST, 7);
            $output->writeListBegin(TType::STRUCT, count($this->FinishedGoods));
            foreach ($this->FinishedGoods as $iter935) {
                $xfer += $iter935->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Materials !== null) {
            if (!is_array($this->Materials)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Materials', TType::LST, 8);
            $output->writeListBegin(TType::STRUCT, count($this->Materials));
            foreach ($this->Materials as $iter936) {
                $xfer += $iter936->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->ObjectName !== null) {
            $xfer += $output->writeFieldBegin('ObjectName', TType::STRING, 9);
            $xfer += $output->writeString($this->ObjectName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterCodes !== null) {
            if (!is_array($this->OuterCodes)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('OuterCodes', TType::LST, 10);
            $output->writeListBegin(TType::STRUCT, count($this->OuterCodes));
            foreach ($this->OuterCodes as $iter937) {
                $xfer += $iter937->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StateMain !== null) {
            $xfer += $output->writeFieldBegin('StateMain', TType::STRING, 11);
            $xfer += $output->writeString($this->StateMain);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

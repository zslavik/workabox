<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GoodsProperty
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I16,
        ),
        2 => array(
            'var' => 'Name',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'PropertyType',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'Catalog',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'IsRequired',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        6 => array(
            'var' => 'IsShow',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        7 => array(
            'var' => 'IsFilter',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        8 => array(
            'var' => 'IsExtended',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        9 => array(
            'var' => 'IsModificator',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $Name = null;
    /**
     * @var int
     */
    public $PropertyType = null;
    /**
     * @var int
     */
    public $Catalog = null;
    /**
     * @var bool
     */
    public $IsRequired = null;
    /**
     * @var bool
     */
    public $IsShow = null;
    /**
     * @var bool
     */
    public $IsFilter = null;
    /**
     * @var bool
     */
    public $IsExtended = null;
    /**
     * @var bool
     */
    public $IsModificator = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['Name'])) {
                $this->Name = $vals['Name'];
            }
            if (isset($vals['PropertyType'])) {
                $this->PropertyType = $vals['PropertyType'];
            }
            if (isset($vals['Catalog'])) {
                $this->Catalog = $vals['Catalog'];
            }
            if (isset($vals['IsRequired'])) {
                $this->IsRequired = $vals['IsRequired'];
            }
            if (isset($vals['IsShow'])) {
                $this->IsShow = $vals['IsShow'];
            }
            if (isset($vals['IsFilter'])) {
                $this->IsFilter = $vals['IsFilter'];
            }
            if (isset($vals['IsExtended'])) {
                $this->IsExtended = $vals['IsExtended'];
            }
            if (isset($vals['IsModificator'])) {
                $this->IsModificator = $vals['IsModificator'];
            }
        }
    }

    public function getName()
    {
        return 'GoodsProperty';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I16) {
                        $xfer += $input->readI16($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->PropertyType);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->Catalog);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->IsRequired);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->IsShow);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->IsFilter);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->IsExtended);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->IsModificator);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GoodsProperty');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I16, 1);
            $xfer += $output->writeI16($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Name !== null) {
            $xfer += $output->writeFieldBegin('Name', TType::STRING, 2);
            $xfer += $output->writeString($this->Name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->PropertyType !== null) {
            $xfer += $output->writeFieldBegin('PropertyType', TType::I32, 3);
            $xfer += $output->writeI32($this->PropertyType);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Catalog !== null) {
            $xfer += $output->writeFieldBegin('Catalog', TType::I32, 4);
            $xfer += $output->writeI32($this->Catalog);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->IsRequired !== null) {
            $xfer += $output->writeFieldBegin('IsRequired', TType::BOOL, 5);
            $xfer += $output->writeBool($this->IsRequired);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->IsShow !== null) {
            $xfer += $output->writeFieldBegin('IsShow', TType::BOOL, 6);
            $xfer += $output->writeBool($this->IsShow);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->IsFilter !== null) {
            $xfer += $output->writeFieldBegin('IsFilter', TType::BOOL, 7);
            $xfer += $output->writeBool($this->IsFilter);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->IsExtended !== null) {
            $xfer += $output->writeFieldBegin('IsExtended', TType::BOOL, 8);
            $xfer += $output->writeBool($this->IsExtended);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->IsModificator !== null) {
            $xfer += $output->writeFieldBegin('IsModificator', TType::BOOL, 9);
            $xfer += $output->writeBool($this->IsModificator);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}

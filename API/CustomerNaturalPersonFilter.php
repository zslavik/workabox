<?php
namespace Workabox\API;

/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class CustomerNaturalPersonFilter
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'ID',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        2 => array(
            'var' => 'OuterID',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'Birthday',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'CanGetAdditionalInfo',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        5 => array(
            'var' => 'RefreshDate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'LastMovementDate',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'AmountAccount',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        8 => array(
            'var' => 'SumLastMove',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        9 => array(
            'var' => 'InformationMessage',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        10 => array(
            'var' => 'P425',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        11 => array(
            'var' => 'Additional',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        12 => array(
            'var' => 'EMail',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        13 => array(
            'var' => 'MobilePhone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        14 => array(
            'var' => 'HomePhone',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        15 => array(
            'var' => 'SecondName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        16 => array(
            'var' => 'FirstName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        17 => array(
            'var' => 'MiddleName',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        18 => array(
            'var' => 'BirthDay_Day',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        19 => array(
            'var' => 'BirthDay_Month',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        20 => array(
            'var' => 'BirthDay_Year',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        21 => array(
            'var' => 'Sex',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        22 => array(
            'var' => 'StateCustomer',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
    );

    /**
     * @var int
     */
    public $ID = null;
    /**
     * @var string
     */
    public $OuterID = null;
    /**
     * @var string
     */
    public $Birthday = null;
    /**
     * @var string[]
     */
    public $CanGetAdditionalInfo = null;
    /**
     * @var string
     */
    public $RefreshDate = null;
    /**
     * @var string
     */
    public $LastMovementDate = null;
    /**
     * @var string
     */
    public $AmountAccount = null;
    /**
     * @var string
     */
    public $SumLastMove = null;
    /**
     * @var string
     */
    public $InformationMessage = null;
    /**
     * @var string
     */
    public $P425 = null;
    /**
     * @var string
     */
    public $Additional = null;
    /**
     * @var string
     */
    public $EMail = null;
    /**
     * @var string
     */
    public $MobilePhone = null;
    /**
     * @var string
     */
    public $HomePhone = null;
    /**
     * @var string
     */
    public $SecondName = null;
    /**
     * @var string
     */
    public $FirstName = null;
    /**
     * @var string
     */
    public $MiddleName = null;
    /**
     * @var string
     */
    public $BirthDay_Day = null;
    /**
     * @var string[]
     */
    public $BirthDay_Month = null;
    /**
     * @var string
     */
    public $BirthDay_Year = null;
    /**
     * @var string[]
     */
    public $Sex = null;
    /**
     * @var string[]
     */
    public $StateCustomer = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['ID'])) {
                $this->ID = $vals['ID'];
            }
            if (isset($vals['OuterID'])) {
                $this->OuterID = $vals['OuterID'];
            }
            if (isset($vals['Birthday'])) {
                $this->Birthday = $vals['Birthday'];
            }
            if (isset($vals['CanGetAdditionalInfo'])) {
                $this->CanGetAdditionalInfo = $vals['CanGetAdditionalInfo'];
            }
            if (isset($vals['RefreshDate'])) {
                $this->RefreshDate = $vals['RefreshDate'];
            }
            if (isset($vals['LastMovementDate'])) {
                $this->LastMovementDate = $vals['LastMovementDate'];
            }
            if (isset($vals['AmountAccount'])) {
                $this->AmountAccount = $vals['AmountAccount'];
            }
            if (isset($vals['SumLastMove'])) {
                $this->SumLastMove = $vals['SumLastMove'];
            }
            if (isset($vals['InformationMessage'])) {
                $this->InformationMessage = $vals['InformationMessage'];
            }
            if (isset($vals['P425'])) {
                $this->P425 = $vals['P425'];
            }
            if (isset($vals['Additional'])) {
                $this->Additional = $vals['Additional'];
            }
            if (isset($vals['EMail'])) {
                $this->EMail = $vals['EMail'];
            }
            if (isset($vals['MobilePhone'])) {
                $this->MobilePhone = $vals['MobilePhone'];
            }
            if (isset($vals['HomePhone'])) {
                $this->HomePhone = $vals['HomePhone'];
            }
            if (isset($vals['SecondName'])) {
                $this->SecondName = $vals['SecondName'];
            }
            if (isset($vals['FirstName'])) {
                $this->FirstName = $vals['FirstName'];
            }
            if (isset($vals['MiddleName'])) {
                $this->MiddleName = $vals['MiddleName'];
            }
            if (isset($vals['BirthDay_Day'])) {
                $this->BirthDay_Day = $vals['BirthDay_Day'];
            }
            if (isset($vals['BirthDay_Month'])) {
                $this->BirthDay_Month = $vals['BirthDay_Month'];
            }
            if (isset($vals['BirthDay_Year'])) {
                $this->BirthDay_Year = $vals['BirthDay_Year'];
            }
            if (isset($vals['Sex'])) {
                $this->Sex = $vals['Sex'];
            }
            if (isset($vals['StateCustomer'])) {
                $this->StateCustomer = $vals['StateCustomer'];
            }
        }
    }

    public function getName()
    {
        return 'CustomerNaturalPersonFilter';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->ID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->OuterID);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Birthday);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->CanGetAdditionalInfo = array();
                        $_size609 = 0;
                        $_etype612 = 0;
                        $xfer += $input->readListBegin($_etype612, $_size609);
                        for ($_i613 = 0; $_i613 < $_size609; ++$_i613) {
                            $elem614 = null;
                            $xfer += $input->readString($elem614);
                            $this->CanGetAdditionalInfo []= $elem614;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->RefreshDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->LastMovementDate);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->AmountAccount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->SumLastMove);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->InformationMessage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 10:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->P425);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 11:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->Additional);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 12:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->EMail);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 13:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->MobilePhone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 14:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->HomePhone);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 15:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->SecondName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 16:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->FirstName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 17:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->MiddleName);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 18:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->BirthDay_Day);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 19:
                    if ($ftype == TType::LST) {
                        $this->BirthDay_Month = array();
                        $_size615 = 0;
                        $_etype618 = 0;
                        $xfer += $input->readListBegin($_etype618, $_size615);
                        for ($_i619 = 0; $_i619 < $_size615; ++$_i619) {
                            $elem620 = null;
                            $xfer += $input->readString($elem620);
                            $this->BirthDay_Month []= $elem620;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 20:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->BirthDay_Year);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 21:
                    if ($ftype == TType::LST) {
                        $this->Sex = array();
                        $_size621 = 0;
                        $_etype624 = 0;
                        $xfer += $input->readListBegin($_etype624, $_size621);
                        for ($_i625 = 0; $_i625 < $_size621; ++$_i625) {
                            $elem626 = null;
                            $xfer += $input->readString($elem626);
                            $this->Sex []= $elem626;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 22:
                    if ($ftype == TType::LST) {
                        $this->StateCustomer = array();
                        $_size627 = 0;
                        $_etype630 = 0;
                        $xfer += $input->readListBegin($_etype630, $_size627);
                        for ($_i631 = 0; $_i631 < $_size627; ++$_i631) {
                            $elem632 = null;
                            $xfer += $input->readString($elem632);
                            $this->StateCustomer []= $elem632;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('CustomerNaturalPersonFilter');
        if ($this->ID !== null) {
            $xfer += $output->writeFieldBegin('ID', TType::I32, 1);
            $xfer += $output->writeI32($this->ID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->OuterID !== null) {
            $xfer += $output->writeFieldBegin('OuterID', TType::STRING, 2);
            $xfer += $output->writeString($this->OuterID);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Birthday !== null) {
            $xfer += $output->writeFieldBegin('Birthday', TType::STRING, 3);
            $xfer += $output->writeString($this->Birthday);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->CanGetAdditionalInfo !== null) {
            if (!is_array($this->CanGetAdditionalInfo)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('CanGetAdditionalInfo', TType::LST, 4);
            $output->writeListBegin(TType::STRING, count($this->CanGetAdditionalInfo));
            foreach ($this->CanGetAdditionalInfo as $iter633) {
                $xfer += $output->writeString($iter633);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->RefreshDate !== null) {
            $xfer += $output->writeFieldBegin('RefreshDate', TType::STRING, 5);
            $xfer += $output->writeString($this->RefreshDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->LastMovementDate !== null) {
            $xfer += $output->writeFieldBegin('LastMovementDate', TType::STRING, 6);
            $xfer += $output->writeString($this->LastMovementDate);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->AmountAccount !== null) {
            $xfer += $output->writeFieldBegin('AmountAccount', TType::STRING, 7);
            $xfer += $output->writeString($this->AmountAccount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SumLastMove !== null) {
            $xfer += $output->writeFieldBegin('SumLastMove', TType::STRING, 8);
            $xfer += $output->writeString($this->SumLastMove);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->InformationMessage !== null) {
            $xfer += $output->writeFieldBegin('InformationMessage', TType::STRING, 9);
            $xfer += $output->writeString($this->InformationMessage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->P425 !== null) {
            $xfer += $output->writeFieldBegin('P425', TType::STRING, 10);
            $xfer += $output->writeString($this->P425);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Additional !== null) {
            $xfer += $output->writeFieldBegin('Additional', TType::STRING, 11);
            $xfer += $output->writeString($this->Additional);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->EMail !== null) {
            $xfer += $output->writeFieldBegin('EMail', TType::STRING, 12);
            $xfer += $output->writeString($this->EMail);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MobilePhone !== null) {
            $xfer += $output->writeFieldBegin('MobilePhone', TType::STRING, 13);
            $xfer += $output->writeString($this->MobilePhone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->HomePhone !== null) {
            $xfer += $output->writeFieldBegin('HomePhone', TType::STRING, 14);
            $xfer += $output->writeString($this->HomePhone);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->SecondName !== null) {
            $xfer += $output->writeFieldBegin('SecondName', TType::STRING, 15);
            $xfer += $output->writeString($this->SecondName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->FirstName !== null) {
            $xfer += $output->writeFieldBegin('FirstName', TType::STRING, 16);
            $xfer += $output->writeString($this->FirstName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->MiddleName !== null) {
            $xfer += $output->writeFieldBegin('MiddleName', TType::STRING, 17);
            $xfer += $output->writeString($this->MiddleName);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->BirthDay_Day !== null) {
            $xfer += $output->writeFieldBegin('BirthDay_Day', TType::STRING, 18);
            $xfer += $output->writeString($this->BirthDay_Day);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->BirthDay_Month !== null) {
            if (!is_array($this->BirthDay_Month)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('BirthDay_Month', TType::LST, 19);
            $output->writeListBegin(TType::STRING, count($this->BirthDay_Month));
            foreach ($this->BirthDay_Month as $iter634) {
                $xfer += $output->writeString($iter634);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->BirthDay_Year !== null) {
            $xfer += $output->writeFieldBegin('BirthDay_Year', TType::STRING, 20);
            $xfer += $output->writeString($this->BirthDay_Year);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->Sex !== null) {
            if (!is_array($this->Sex)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('Sex', TType::LST, 21);
            $output->writeListBegin(TType::STRING, count($this->Sex));
            foreach ($this->Sex as $iter635) {
                $xfer += $output->writeString($iter635);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->StateCustomer !== null) {
            if (!is_array($this->StateCustomer)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('StateCustomer', TType::LST, 22);
            $output->writeListBegin(TType::STRING, count($this->StateCustomer));
            foreach ($this->StateCustomer as $iter636) {
                $xfer += $output->writeString($iter636);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
